import pathlib

import torch


def inv_norm(tensor, mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)) -> torch.tensor:
    """Undo Normalization done in transforms
    for training.

    :param tensor: Image that is backpropagated on
    :type tensor: torch.tensor, required
    :param mean: Mean value used for Normalization (Default is ImageNet)
    :type mean: tuple, optional
    :param std: Standard Deviation value used for Normalization (Default is ImageNet)
    :type std: tuple, optional

    :returns: Un-normalized image
    :rtype: torch.tensor
    """
    for t_channel, m_channel, s_channel in zip(tensor, mean, std):
        t_channel.mul_(s_channel).add_(m_channel)
    return tensor


def gram(tensor) -> torch.tensor:
    """Computes the gram matrix of a given tensor
    ref: https://en.wikipedia.org/wiki/Gramian_matrix

    :param tensor: tensor containing feature maps generated by CNN
    :type tensor: torch.tensor, required

    :return: A gram matrix (inner product)
    :rtype: torch.tensor
    """
    _, channel, height, width = tensor.shape
    filters = tensor.view(channel, height * width)
    return torch.mm(filters, filters.t())


def convert_to_path(path):
    """Convert string type to pathlib.Path

    :param path: A string or path object
    :type path: str or path, required
    """

    if isinstance(path, pathlib.Path):
        return path
    return pathlib.Path(path)
