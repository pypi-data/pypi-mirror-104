"""hdev requirements implementation."""
import re
from pathlib import PosixPath

from pkg_resources import resource_filename

from hdev.tox_cmd import run_tox

PIP_TOOLS_REQS_PINNED = resource_filename("hdev", "requirements/pip-tools.txt")
# We could use the `pip-tools.in` file, but `pip-compile` thinks we've passed
# it accidentally as it doesn't have a `.txt` extension
PIP_TOOLS_REQS_UNPINNED = resource_filename(
    "hdev", "requirements/pip-tools-unpinned.txt"
)


class RequirementsFile(PosixPath):
    """Represents a pinned, or unpinned requirements file."""

    @property
    def tox_env(self):
        """Get the tox env used with this file."""
        return "dev" if self.stem == "requirements" else self.stem

    @property
    def tox_env_requirements_file(self):
        """Get the requirements file used in the tox env for this file."""
        return self.with_name(f"{self.tox_env}.txt")

    @property
    def pinned_file(self):
        """Get the pinned version of this file."""

        return self.with_suffix(".txt").absolute()


def compile_unpinned(unpinned_file, specific_package=None, old_pip_tools=True):
    """Compile an unpinned file, optionally specifying a single package.

    :param unpinned_file: The unpinned file to compile
    :param specific_package: A package definition like `package` to upgrade or
        `package>=1.2` to specify a version requirement
    :param old_pip_tools: Install using pip-tools <= 5
    :return: A pathlib Path object for the pinned version created

    :raises FileNotFoundError: If the specified file is missing
    """

    unpinned_file = RequirementsFile(unpinned_file).absolute()
    if not unpinned_file.exists():
        raise FileNotFoundError(unpinned_file)

    # Touch the requirements file of the tox env we are going to compile in
    # (not the requirements file we are going to create), to ensure the
    # tox environment can exist
    unpinned_file.tox_env_requirements_file.touch()

    command = f"pip-compile {unpinned_file}"
    if specific_package:
        command += f' --upgrade-package "{specific_package}"'

    run_tox(
        unpinned_file.tox_env,
        command,
        extra_dependencies_path=PIP_TOOLS_REQS_PINNED
        if old_pip_tools
        else PIP_TOOLS_REQS_UNPINNED,
    )

    return unpinned_file.pinned_file


def reformat_pinned(pinned_file):  # pragma: no cover
    """Reformat requirements.txt formatted by pip-tools.

    Formats files generated by pip-tools<5.0.5 to the format used by newer versions.

    This is required as dependabot uses the newer version
    but our local environments can't upgrade
    due to venv-update being tied to older version of pip.

    Every dependency update involves a full file
    rewrite which is impossible to review without this script.

    tox 4.0 could potentially deprecate the need for venv-update

    Details about the issue in tox:
        https://github.com/tox-dev/tox/issues/149

    and progress on the 4.0 release:
        https://tox.readthedocs.io/en/rewrite/changelog.html
    """
    with open(pinned_file, "r") as file:
        reformatted_requirements = _reformat_requirements(file.read())

    with open(pinned_file, "w") as file:
        file.write(reformatted_requirements)


def _reformat_requirements(requirements_contents: str) -> str:
    multi_dep_re = re.compile(r".* # via .*,.*$")
    comment_re = re.compile(r"^#")

    def _remove_trailing(string):
        return re.sub(r"[ ]+$", "", string, flags=re.MULTILINE)

    formatted_lines = []

    for line in requirements_contents.splitlines():
        # Comments in the original file
        if comment_re.match(line):
            formatted_lines.append(line)
            continue

        if not multi_dep_re.match(line):
            # Requirements with only one entry in "via" are kept in the same line:
            # package==XX # via other_package
            #   becomes
            # package==XX
            #   # via other_package
            formatted = line.replace("# via", "\n    # via")
            formatted_lines.append(_remove_trailing(formatted))
            continue

        # For multiple entries in `# via` gets it's own line
        # package==XX # via other_package, and_another
        #   becomes
        # package==XX
        #   # via
        #   #   other_package
        #   #   and_another
        formatted = line.replace("# via", "\n    # via \n    #  ")
        formatted = formatted.replace(", ", "\n    #   ")
        formatted_lines.append(_remove_trailing(formatted))

    return "\n".join(formatted_lines) + "\n"  # Include new line at EOF
