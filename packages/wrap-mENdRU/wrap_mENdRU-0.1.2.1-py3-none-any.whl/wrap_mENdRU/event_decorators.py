"""
Этот модуль содержит команды для работы с событиями.
Событие - это какое-то действие пользователя в игре. Например - нажатие на кнопку клавиатуры или на кнопку мыши.
Также событием считается срабатывание таймера.

Команды в этом модуле должны использоваться как декораторы к функциям, которые будут запускаться при событии.

Например, чтобы заставить какую-то функцию выполняться каждые 100 миллисекунд, нужно перед созданием функции написать декоратор always:

@wrap.always

def do_it_always():
    ...

В этом примере функция do_it_always() будет вызываться автоматически каждые 100 миллисекунд. Т.е. 10 раз в секунду.

Похожие декораторы используются, чтобы автоматически вызывать какую-то функцию, когда пользователь нажал на клавишу мыши или клавиатуры.

Любая вызываемая функция может содержать следующие входные параметры:

keys - этот параметр будет заполнен списком кодов клавиш, нажатых во время события.

control_keys - этот параметр будет заполнен списком кодов клавиш-модификаторов, нажатых во время события.
Клавиши-модификаторы это Ctrl, Shift, Alt и подобные специальные клавиши.

mouse_buttons - этот параметр будет заполнен списком номеров кнопок мыши, нажатых во время события.

pos - этот параметр будет заполнен списком из двух чисел. Это координаты x и y положения мыши в момент события.

pos_x, pos_y - Это координаты x и y положения мыши в момент события.

Для специальных событий также могут быть доступные другие параметры.
Их список нужно смотреть в описании декораторов.

Параметры, для которых не найдено значение, будут заполнены строкой "NOT_DEFINED".
"""

# import wrap_py


def always(delay=100):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.always

    def do_it_always():
        ...


    Выполняет запуск функции, к которой применяется, каждые несколько миллисекунд.
    Время задержки между запусками можно задать с помощью параметра delay.

    Вызываемая функция может содержать параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param delay: Число. Сколько миллисекунд нужно ждать между запуском
    """
    return wrap_py.always(delay)


def on_key_down(key=None, *other_keys):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_key_down

    def do_it_on_key_down():
        ...


    Выполняет запуск функции при нажатии на клавишу клавиатуры.
    В параметрах можно указать все клавиши, на которые должна реагировать функция.
    Если никакие клавиши не указаны, то функция будет срабатывать для любой клавиши.

    Например:

    @wrap.on_key_down(wrap.K_ENTER)

    будет вызывать функцию только принажатии на клавишу Enter.

    @wrap.on_key_down(wrap.K_ENTER, wrap.K_LEFT)

    будет вызывать функцию принажатии на клавишу Enter или стрелку Влево.

    Вызываемая функция может содержать параметр key. В него будет записан код нажатой клавиши.

    Вызываемая функция может содержать и другие параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param key: Код клавиши. Например wrap.K_ENTER
    :param other_keys: Через запятую можно указать несколько кодов клавиш.
    """
    return wrap_py.on_key_down(key, *other_keys)


def on_key_up(key=None, *other_keys):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_key_up

    def do_it_on_key_up():
        ...

    Выполняет запуск функции при отпускании клавиши клавиатуры.
    В параметрах можно указать все клавиши, на которые должна реагировать функция.
    Если никакие клавиши не указаны, то функция будет срабатывать для любой клавиши.

    Например:

    @wrap.on_key_up(wrap.K_ENTER)

    будет вызывать функцию только при отпускании клавиши Enter.

    @wrap.on_key_up(wrap.K_ENTER, wrap.K_LEFT)

    будет вызывать функцию при отпускании клавиши Enter или стрелки Влево.

    Вызываемая функция может содержать параметр key. В него будет записан код отпущенной клавиши.

    Вызываемая функция может содержать и другие параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param key: Код клавиши. Например wrap.K_ENTER
    :param other_keys: Через запятую можно указать несколько кодов клавиш.
    """
    return wrap_py.on_key_up(key, *other_keys)


def on_key_always(*keys, delay: int = 50):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_key_up

    def do_it_on_key_up():
        ...

    Выполняет запуск функции-обработчика при нажатии клавиши клавиатуры.
    Запуск функции-обработчика выполняется все время, пока зажата клавиша клавиатуры.
    Это главное отличие от функции on_key_down, которая запускает функцию-обработчик только один раз.
    Функция-обработчик запускается постоянно с задержкой delay миллисекунд между запусками.

    Задержка между запусками должна быть указана через именованный параметр delay.
    Например: @wrap.on_key_up(K_RETURN, K_LEFT, delay=100)

    будет запускать функцию-обработчик принажатии на клавиши Enter и стрелку влево с задержкой 100 миллисекунд.
    То есть 10 раз в секунду.

    В параметрах можно указать все клавиши, на которые должна реагировать функция.
    Если никакие клавиши не указаны, то функция будет срабатывать на любую клавишу.

    Вызываемая функция может содержать параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param keys: Коды клавиш, при нажатии которых должна запускаться функция-обработчик.
    :param delay: Число. Количество миллисекунд между запусками функции-обработчика.
    """
    return wrap_py.on_key_always(*keys, delay=delay)


def on_mouse_down(button, *other_buttons):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_mouse_down

    def do_it_on_mouse_down():
        ...

    Выполняет запуск функции-обработчика при нажатии кнопки мыши.

    В параметрах можно указать все клавиши, на которые должна реагировать функция.
    Если никакие клавиши не указаны, то функция будет срабатывать на любую клавишу.

    Например:

    @wrap.on_mouse_down(wrap.BUTTON_LEFT)

    будет вызывать функцию только при нажатии левой кнопки мыши.

    @wrap.on_mouse_down(wrap.BUTTON_LEFT, wrap.BUTTON_WHEELUP)

    будет вызывать функцию при нажатии левой кнопки мыши или вращении колесика вверх.

    Вызываемая функция может содержать параметр button. В него будет записан код нажатой клавиши.

    Вызываемая функция может содержать и другие параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param button: Код клавиши, при нажатии которой должна запускаться функция-обработчик.
    :param other_buttons: Дополнительные клавиши могут быть перечислены через запятую.
    """
    return wrap_py.on_mouse_down(button, *other_buttons)


def on_mouse_up(button, *other_buttons):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_mouse_up

    def do_it_on_mouse_up():
        ...

    Выполняет запуск функции-обработчика при отпускании кнопки мыши.

    В параметрах можно указать все клавиши, на которые должна реагировать функция.
    Если никакие клавиши не указаны, то функция будет срабатывать на отпускание любой клавиши.

    Например:

    @wrap.on_mouse_up(wrap.BUTTON_LEFT)

    будет вызывать функцию только при отпускании левой кнопки мыши.

    @wrap.on_mouse_up(wrap.BUTTON_LEFT, wrap.BUTTON_WHEELUP)

    будет вызывать функцию при отпускании левой кнопки мыши или вращении колесика вверх.

    Вызываемая функция может содержать параметр button. В него будет записан код нажатой клавиши.

    Вызываемая функция может содержать и другие параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.

    :param button: Код клавиши, при отпускании которой должна запускаться функция-обработчик.
    :param other_buttons: Дополнительные клавиши могут быть перечислены через запятую.
    """
    return wrap_py.on_mouse_up(button, *other_buttons)


def on_mouse_move(orig_func=None):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_mouse_move

    def do_it_on_mouse_move():
        ...

    Выполняет запуск функции-обработчика при движении мыши.

    Вызываемая функция может содержать параметры. Они будут заполнены информацией о произошедшем событии.
    Название этих параметров и их заполнение смотрите в описании модуля event_decorators.
    """
    return wrap_py.on_mouse_move(orig_func)


def on_close(orig_func=None):
    """
    Эта функция должна быть написана в виде декоратора.

    @wrap.on_close

    def do_it_on_close():
        ...

    Выполняет запуск функции-обработчика при нажатии на крестик окна.
    Также вызывается при попытке закрытия окна любым другим способом.
    Например, при нажатии клавиш Alt+F4 (в Windows).
    """
    return wrap_py.on_close(orig_func)


def w1():
    global wrap_py
    import wrap_py

w1()
