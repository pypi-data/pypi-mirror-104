# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dragon.dragon_pb2 as dragon__pb2


class DragonStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartContainer = channel.unary_unary(
            "/Dragon/StartContainer",
            request_serializer=dragon__pb2.StartContainerRequest.SerializeToString,
            response_deserializer=dragon__pb2.Response.FromString,
        )
        self.CommitContainer = channel.unary_unary(
            "/Dragon/CommitContainer",
            request_serializer=dragon__pb2.CommitContainerRequest.SerializeToString,
            response_deserializer=dragon__pb2.Response.FromString,
        )
        self.StopContainer = channel.unary_unary(
            "/Dragon/StopContainer",
            request_serializer=dragon__pb2.StopContainerRequest.SerializeToString,
            response_deserializer=dragon__pb2.Response.FromString,
        )
        self.RemoveContainer = channel.unary_unary(
            "/Dragon/RemoveContainer",
            request_serializer=dragon__pb2.RemoveContainerRequest.SerializeToString,
            response_deserializer=dragon__pb2.Response.FromString,
        )
        self.PingPong = channel.unary_unary(
            "/Dragon/PingPong",
            request_serializer=dragon__pb2.PingPongRequest.SerializeToString,
            response_deserializer=dragon__pb2.PingPongResponse.FromString,
        )


class DragonServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CommitContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StopContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PingPong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DragonServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StartContainer": grpc.unary_unary_rpc_method_handler(
            servicer.StartContainer,
            request_deserializer=dragon__pb2.StartContainerRequest.FromString,
            response_serializer=dragon__pb2.Response.SerializeToString,
        ),
        "CommitContainer": grpc.unary_unary_rpc_method_handler(
            servicer.CommitContainer,
            request_deserializer=dragon__pb2.CommitContainerRequest.FromString,
            response_serializer=dragon__pb2.Response.SerializeToString,
        ),
        "StopContainer": grpc.unary_unary_rpc_method_handler(
            servicer.StopContainer,
            request_deserializer=dragon__pb2.StopContainerRequest.FromString,
            response_serializer=dragon__pb2.Response.SerializeToString,
        ),
        "RemoveContainer": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveContainer,
            request_deserializer=dragon__pb2.RemoveContainerRequest.FromString,
            response_serializer=dragon__pb2.Response.SerializeToString,
        ),
        "PingPong": grpc.unary_unary_rpc_method_handler(
            servicer.PingPong,
            request_deserializer=dragon__pb2.PingPongRequest.FromString,
            response_serializer=dragon__pb2.PingPongResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Dragon", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Dragon(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartContainer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Dragon/StartContainer",
            dragon__pb2.StartContainerRequest.SerializeToString,
            dragon__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CommitContainer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Dragon/CommitContainer",
            dragon__pb2.CommitContainerRequest.SerializeToString,
            dragon__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StopContainer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Dragon/StopContainer",
            dragon__pb2.StopContainerRequest.SerializeToString,
            dragon__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RemoveContainer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Dragon/RemoveContainer",
            dragon__pb2.RemoveContainerRequest.SerializeToString,
            dragon__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PingPong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Dragon/PingPong",
            dragon__pb2.PingPongRequest.SerializeToString,
            dragon__pb2.PingPongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
