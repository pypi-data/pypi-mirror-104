# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Appsecs',
    'Config',
    'Dns',
    'Gtm',
    'Property',
]

@pulumi.output_type
class Appsecs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountKey":
            suggest = "account_key"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "clientToken":
            suggest = "client_token"
        elif key == "maxBody":
            suggest = "max_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Appsecs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Appsecs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Appsecs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 account_key: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_token: Optional[str] = None,
                 host: Optional[str] = None,
                 max_body: Optional[int] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[str]:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[int]:
        return pulumi.get(self, "max_body")


@pulumi.output_type
class Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountKey":
            suggest = "account_key"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "clientToken":
            suggest = "client_token"
        elif key == "maxBody":
            suggest = "max_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 account_key: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_token: Optional[str] = None,
                 host: Optional[str] = None,
                 max_body: Optional[int] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[str]:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[int]:
        return pulumi.get(self, "max_body")


@pulumi.output_type
class Dns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountKey":
            suggest = "account_key"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "clientToken":
            suggest = "client_token"
        elif key == "maxBody":
            suggest = "max_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Dns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Dns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Dns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 account_key: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_token: Optional[str] = None,
                 host: Optional[str] = None,
                 max_body: Optional[int] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[str]:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[int]:
        return pulumi.get(self, "max_body")


@pulumi.output_type
class Gtm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountKey":
            suggest = "account_key"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "clientToken":
            suggest = "client_token"
        elif key == "maxBody":
            suggest = "max_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Gtm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Gtm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Gtm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 account_key: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_token: Optional[str] = None,
                 host: Optional[str] = None,
                 max_body: Optional[int] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[str]:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[int]:
        return pulumi.get(self, "max_body")


@pulumi.output_type
class Property(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accountKey":
            suggest = "account_key"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "clientToken":
            suggest = "client_token"
        elif key == "maxBody":
            suggest = "max_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Property. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Property.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Property.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 account_key: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_token: Optional[str] = None,
                 host: Optional[str] = None,
                 max_body: Optional[int] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[str]:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[int]:
        return pulumi.get(self, "max_body")


