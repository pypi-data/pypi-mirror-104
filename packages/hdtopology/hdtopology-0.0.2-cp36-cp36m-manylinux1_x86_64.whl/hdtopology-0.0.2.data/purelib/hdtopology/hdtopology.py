# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hdtopology')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hdtopology')
    _hdtopology = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdtopology', [dirname(__file__)])
        except ImportError:
            import _hdtopology
            return _hdtopology
        try:
            _mod = imp.load_module('_hdtopology', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hdtopology = swig_import_helper()
    del swig_import_helper
else:
    import _hdtopology
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdtopology.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hdtopology.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hdtopology.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hdtopology.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hdtopology.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hdtopology.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hdtopology.SwigPyIterator_copy(self)

    def next(self):
        return _hdtopology.SwigPyIterator_next(self)

    def __next__(self):
        return _hdtopology.SwigPyIterator___next__(self)

    def previous(self):
        return _hdtopology.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hdtopology.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hdtopology.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hdtopology.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hdtopology.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hdtopology.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hdtopology.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hdtopology.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hdtopology.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdtopology.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdtopology.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _hdtopology.DoubleVector___bool__(self)

    def __len__(self):
        return _hdtopology.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _hdtopology.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdtopology.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdtopology.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdtopology.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdtopology.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdtopology.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _hdtopology.DoubleVector_pop(self)

    def append(self, x):
        return _hdtopology.DoubleVector_append(self, x)

    def empty(self):
        return _hdtopology.DoubleVector_empty(self)

    def size(self):
        return _hdtopology.DoubleVector_size(self)

    def swap(self, v):
        return _hdtopology.DoubleVector_swap(self, v)

    def begin(self):
        return _hdtopology.DoubleVector_begin(self)

    def end(self):
        return _hdtopology.DoubleVector_end(self)

    def rbegin(self):
        return _hdtopology.DoubleVector_rbegin(self)

    def rend(self):
        return _hdtopology.DoubleVector_rend(self)

    def clear(self):
        return _hdtopology.DoubleVector_clear(self)

    def get_allocator(self):
        return _hdtopology.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _hdtopology.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _hdtopology.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdtopology.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdtopology.DoubleVector_push_back(self, x)

    def front(self):
        return _hdtopology.DoubleVector_front(self)

    def back(self):
        return _hdtopology.DoubleVector_back(self)

    def assign(self, n, x):
        return _hdtopology.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _hdtopology.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _hdtopology.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _hdtopology.DoubleVector_reserve(self, n)

    def capacity(self):
        return _hdtopology.DoubleVector_capacity(self)
    __swig_destroy__ = _hdtopology.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _hdtopology.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdtopology.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdtopology.StringVector___nonzero__(self)

    def __bool__(self):
        return _hdtopology.StringVector___bool__(self)

    def __len__(self):
        return _hdtopology.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _hdtopology.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdtopology.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdtopology.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdtopology.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdtopology.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdtopology.StringVector___setitem__(self, *args)

    def pop(self):
        return _hdtopology.StringVector_pop(self)

    def append(self, x):
        return _hdtopology.StringVector_append(self, x)

    def empty(self):
        return _hdtopology.StringVector_empty(self)

    def size(self):
        return _hdtopology.StringVector_size(self)

    def swap(self, v):
        return _hdtopology.StringVector_swap(self, v)

    def begin(self):
        return _hdtopology.StringVector_begin(self)

    def end(self):
        return _hdtopology.StringVector_end(self)

    def rbegin(self):
        return _hdtopology.StringVector_rbegin(self)

    def rend(self):
        return _hdtopology.StringVector_rend(self)

    def clear(self):
        return _hdtopology.StringVector_clear(self)

    def get_allocator(self):
        return _hdtopology.StringVector_get_allocator(self)

    def pop_back(self):
        return _hdtopology.StringVector_pop_back(self)

    def erase(self, *args):
        return _hdtopology.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdtopology.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdtopology.StringVector_push_back(self, x)

    def front(self):
        return _hdtopology.StringVector_front(self)

    def back(self):
        return _hdtopology.StringVector_back(self)

    def assign(self, n, x):
        return _hdtopology.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _hdtopology.StringVector_resize(self, *args)

    def insert(self, *args):
        return _hdtopology.StringVector_insert(self, *args)

    def reserve(self, n):
        return _hdtopology.StringVector_reserve(self, n)

    def capacity(self):
        return _hdtopology.StringVector_capacity(self)
    __swig_destroy__ = _hdtopology.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _hdtopology.StringVector_swigregister
StringVector_swigregister(StringVector)

class FloatPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdtopology.new_FloatPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _hdtopology.FloatPair_first_set
    __swig_getmethods__["first"] = _hdtopology.FloatPair_first_get
    if _newclass:
        first = _swig_property(_hdtopology.FloatPair_first_get, _hdtopology.FloatPair_first_set)
    __swig_setmethods__["second"] = _hdtopology.FloatPair_second_set
    __swig_getmethods__["second"] = _hdtopology.FloatPair_second_get
    if _newclass:
        second = _swig_property(_hdtopology.FloatPair_second_get, _hdtopology.FloatPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _hdtopology.delete_FloatPair
    __del__ = lambda self: None
FloatPair_swigregister = _hdtopology.FloatPair_swigregister
FloatPair_swigregister(FloatPair)

class FloatPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdtopology.FloatPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdtopology.FloatPairVector___nonzero__(self)

    def __bool__(self):
        return _hdtopology.FloatPairVector___bool__(self)

    def __len__(self):
        return _hdtopology.FloatPairVector___len__(self)

    def __getslice__(self, i, j):
        return _hdtopology.FloatPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdtopology.FloatPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdtopology.FloatPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdtopology.FloatPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdtopology.FloatPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdtopology.FloatPairVector___setitem__(self, *args)

    def pop(self):
        return _hdtopology.FloatPairVector_pop(self)

    def append(self, x):
        return _hdtopology.FloatPairVector_append(self, x)

    def empty(self):
        return _hdtopology.FloatPairVector_empty(self)

    def size(self):
        return _hdtopology.FloatPairVector_size(self)

    def swap(self, v):
        return _hdtopology.FloatPairVector_swap(self, v)

    def begin(self):
        return _hdtopology.FloatPairVector_begin(self)

    def end(self):
        return _hdtopology.FloatPairVector_end(self)

    def rbegin(self):
        return _hdtopology.FloatPairVector_rbegin(self)

    def rend(self):
        return _hdtopology.FloatPairVector_rend(self)

    def clear(self):
        return _hdtopology.FloatPairVector_clear(self)

    def get_allocator(self):
        return _hdtopology.FloatPairVector_get_allocator(self)

    def pop_back(self):
        return _hdtopology.FloatPairVector_pop_back(self)

    def erase(self, *args):
        return _hdtopology.FloatPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdtopology.new_FloatPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdtopology.FloatPairVector_push_back(self, x)

    def front(self):
        return _hdtopology.FloatPairVector_front(self)

    def back(self):
        return _hdtopology.FloatPairVector_back(self)

    def assign(self, n, x):
        return _hdtopology.FloatPairVector_assign(self, n, x)

    def resize(self, *args):
        return _hdtopology.FloatPairVector_resize(self, *args)

    def insert(self, *args):
        return _hdtopology.FloatPairVector_insert(self, *args)

    def reserve(self, n):
        return _hdtopology.FloatPairVector_reserve(self, n)

    def capacity(self):
        return _hdtopology.FloatPairVector_capacity(self)
    __swig_destroy__ = _hdtopology.delete_FloatPairVector
    __del__ = lambda self: None
FloatPairVector_swigregister = _hdtopology.FloatPairVector_swigregister
FloatPairVector_swigregister(FloatPairVector)

class FloatVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdtopology.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdtopology.FloatVectorVector___nonzero__(self)

    def __bool__(self):
        return _hdtopology.FloatVectorVector___bool__(self)

    def __len__(self):
        return _hdtopology.FloatVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _hdtopology.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdtopology.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdtopology.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdtopology.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdtopology.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdtopology.FloatVectorVector___setitem__(self, *args)

    def pop(self):
        return _hdtopology.FloatVectorVector_pop(self)

    def append(self, x):
        return _hdtopology.FloatVectorVector_append(self, x)

    def empty(self):
        return _hdtopology.FloatVectorVector_empty(self)

    def size(self):
        return _hdtopology.FloatVectorVector_size(self)

    def swap(self, v):
        return _hdtopology.FloatVectorVector_swap(self, v)

    def begin(self):
        return _hdtopology.FloatVectorVector_begin(self)

    def end(self):
        return _hdtopology.FloatVectorVector_end(self)

    def rbegin(self):
        return _hdtopology.FloatVectorVector_rbegin(self)

    def rend(self):
        return _hdtopology.FloatVectorVector_rend(self)

    def clear(self):
        return _hdtopology.FloatVectorVector_clear(self)

    def get_allocator(self):
        return _hdtopology.FloatVectorVector_get_allocator(self)

    def pop_back(self):
        return _hdtopology.FloatVectorVector_pop_back(self)

    def erase(self, *args):
        return _hdtopology.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdtopology.new_FloatVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdtopology.FloatVectorVector_push_back(self, x)

    def front(self):
        return _hdtopology.FloatVectorVector_front(self)

    def back(self):
        return _hdtopology.FloatVectorVector_back(self)

    def assign(self, n, x):
        return _hdtopology.FloatVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _hdtopology.FloatVectorVector_resize(self, *args)

    def insert(self, *args):
        return _hdtopology.FloatVectorVector_insert(self, *args)

    def reserve(self, n):
        return _hdtopology.FloatVectorVector_reserve(self, n)

    def capacity(self):
        return _hdtopology.FloatVectorVector_capacity(self)
    __swig_destroy__ = _hdtopology.delete_FloatVectorVector
    __del__ = lambda self: None
FloatVectorVector_swigregister = _hdtopology.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class ExtremumGraphExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtremumGraphExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtremumGraphExt, name)
    __repr__ = _swig_repr
    SEGMENTATION = _hdtopology.ExtremumGraphExt_SEGMENTATION
    HISTOGRAM = _hdtopology.ExtremumGraphExt_HISTOGRAM
    COMBINED = _hdtopology.ExtremumGraphExt_COMBINED
    NONE = _hdtopology.ExtremumGraphExt_NONE
    REGULAR = _hdtopology.ExtremumGraphExt_REGULAR
    REDUCED = _hdtopology.ExtremumGraphExt_REDUCED
    ENTROPY = _hdtopology.ExtremumGraphExt_ENTROPY
    DTREE = _hdtopology.ExtremumGraphExt_DTREE

    def __init__(self):
        this = _hdtopology.new_ExtremumGraphExt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdtopology.delete_ExtremumGraphExt
    __del__ = lambda self: None

    def initialize(self, *args):
        return _hdtopology.ExtremumGraphExt_initialize(self, *args)

    def countForPersistence(self, persistence):
        return _hdtopology.ExtremumGraphExt_countForPersistence(self, persistence)

    def segmentation(self, count):
        return _hdtopology.ExtremumGraphExt_segmentation(self, count)

    def segment(self, ext, count, threshold):
        return _hdtopology.ExtremumGraphExt_segment(self, ext, count, threshold)

    def segmentSize(self, ext, count, threshold):
        return _hdtopology.ExtremumGraphExt_segmentSize(self, ext, count, threshold)

    def coreSize(self, ext, count):
        return _hdtopology.ExtremumGraphExt_coreSize(self, ext, count)

    def coreSegment(self, ext, count):
        return _hdtopology.ExtremumGraphExt_coreSegment(self, ext, count)

    def highestSaddleForExtremum(self, ext, count):
        return _hdtopology.ExtremumGraphExt_highestSaddleForExtremum(self, ext, count)

    def size(self):
        return _hdtopology.ExtremumGraphExt_size(self)

    def persistences(self):
        return _hdtopology.ExtremumGraphExt_persistences(self)

    def variations(self):
        return _hdtopology.ExtremumGraphExt_variations(self)

    def activeGraph(self, count, variation):
        return _hdtopology.ExtremumGraphExt_activeGraph(self, count, variation)

    def minimum(self):
        return _hdtopology.ExtremumGraphExt_minimum(self)

    def maximum(self):
        return _hdtopology.ExtremumGraphExt_maximum(self)

    def f(self, i):
        return _hdtopology.ExtremumGraphExt_f(self, i)

    def extrema(self):
        return _hdtopology.ExtremumGraphExt_extrema(self)

    def criticalPointFunctionValue(self, index):
        return _hdtopology.ExtremumGraphExt_criticalPointFunctionValue(self, index)

    def criticalPointLocation(self, index):
        return _hdtopology.ExtremumGraphExt_criticalPointLocation(self, index)

    def getHist(self, *args):
        return _hdtopology.ExtremumGraphExt_getHist(self, *args)

    def getJoint(self):
        return _hdtopology.ExtremumGraphExt_getJoint(self)

    def segmentHist(self, count):
        return _hdtopology.ExtremumGraphExt_segmentHist(self, count)

    def histogramSize(self, ext, count, threshold):
        return _hdtopology.ExtremumGraphExt_histogramSize(self, ext, count, threshold)

    def histogram(self, ext, count, threshold):
        return _hdtopology.ExtremumGraphExt_histogram(self, ext, count, threshold)

    def getSelected1D(self, dims, ranges, ext, count, targetIndex=-1):
        return _hdtopology.ExtremumGraphExt_getSelected1D(self, dims, ranges, ext, count, targetIndex)

    def save(self, handle):
        return _hdtopology.ExtremumGraphExt_save(self, handle)

    def load(self, handle, isIncludeFunctionIndexInfo=False, cube_dim=2):
        return _hdtopology.ExtremumGraphExt_load(self, handle, isIncludeFunctionIndexInfo, cube_dim)

    def serialize(self, output):
        return _hdtopology.ExtremumGraphExt_serialize(self, output)

    def deserialize(self, input, isIncludeFunctionIndexInfo):
        return _hdtopology.ExtremumGraphExt_deserialize(self, input, isIncludeFunctionIndexInfo)
ExtremumGraphExt_swigregister = _hdtopology.ExtremumGraphExt_swigregister
ExtremumGraphExt_swigregister(ExtremumGraphExt)

class Flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flags, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdtopology.new_Flags(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdtopology.delete_Flags
    __del__ = lambda self: None
    __swig_setmethods__["mFlags"] = _hdtopology.Flags_mFlags_set
    __swig_getmethods__["mFlags"] = _hdtopology.Flags_mFlags_get
    if _newclass:
        mFlags = _swig_property(_hdtopology.Flags_mFlags_get, _hdtopology.Flags_mFlags_set)
Flags_swigregister = _hdtopology.Flags_swigregister
Flags_swigregister(Flags)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdtopology.new_Histogram(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dimension(self):
        return _hdtopology.Histogram_dimension(self)

    def resolution(self):
        return _hdtopology.Histogram_resolution(self)

    def ranges(self):
        return _hdtopology.Histogram_ranges(self)

    def attribute(self, i):
        return _hdtopology.Histogram_attribute(self, i)

    def addValue(self, sample):
        return _hdtopology.Histogram_addValue(self, sample)

    def load(self, handle):
        return _hdtopology.Histogram_load(self, handle)

    def save(self, handle):
        return _hdtopology.Histogram_save(self, handle)

    def serialize(self, output):
        return _hdtopology.Histogram_serialize(self, output)

    def deserialize(self, input):
        return _hdtopology.Histogram_deserialize(self, input)

    def data(self, *args):
        return _hdtopology.Histogram_data(self, *args)

    def __add__(self, hist):
        return _hdtopology.Histogram___add__(self, hist)
    __swig_destroy__ = _hdtopology.delete_Histogram
    __del__ = lambda self: None
Histogram_swigregister = _hdtopology.Histogram_swigregister
Histogram_swigregister(Histogram)

class JointDistributions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointDistributions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointDistributions, name)
    __repr__ = _swig_repr
    REGULAR = _hdtopology.JointDistributions_REGULAR
    REDUCED = _hdtopology.JointDistributions_REDUCED
    ENTROPY = _hdtopology.JointDistributions_ENTROPY
    DTREE = _hdtopology.JointDistributions_DTREE

    def __init__(self, *args):
        this = _hdtopology.new_JointDistributions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetData(self, data):
        return _hdtopology.JointDistributions_SetData(self, data)

    def addHistogram(self, *args):
        return _hdtopology.JointDistributions_addHistogram(self, *args)

    def createHistogram(self, ranges, resolution, cubeDim, histogramType, target_attr):
        return _hdtopology.JointDistributions_createHistogram(self, ranges, resolution, cubeDim, histogramType, target_attr)

    def get(self, *args):
        return _hdtopology.JointDistributions_get(self, *args)

    def peek(self, attributes):
        return _hdtopology.JointDistributions_peek(self, attributes)

    def getAttr(self):
        return _hdtopology.JointDistributions_getAttr(self)

    def computeHistograms(self, data):
        return _hdtopology.JointDistributions_computeHistograms(self, data)

    def addValue(self, sample):
        return _hdtopology.JointDistributions_addValue(self, sample)

    def load(self, handle):
        return _hdtopology.JointDistributions_load(self, handle)

    def save(self, handle):
        return _hdtopology.JointDistributions_save(self, handle)

    def serialize(self, output):
        return _hdtopology.JointDistributions_serialize(self, output)

    def deserialize(self, input):
        return _hdtopology.JointDistributions_deserialize(self, input)
    __swig_destroy__ = _hdtopology.delete_JointDistributions
    __del__ = lambda self: None
JointDistributions_swigregister = _hdtopology.JointDistributions_swigregister
JointDistributions_swigregister(JointDistributions)

class Selectivity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selectivity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Selectivity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdtopology.new_Selectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def jointQuery(self, *args):
        return _hdtopology.Selectivity_jointQuery(self, *args)

    def functionQuery(self, *args):
        return _hdtopology.Selectivity_functionQuery(self, *args)
    __swig_destroy__ = _hdtopology.delete_Selectivity
    __del__ = lambda self: None
Selectivity_swigregister = _hdtopology.Selectivity_swigregister
Selectivity_swigregister(Selectivity)

# This file is compatible with both classic and new-style classes.


