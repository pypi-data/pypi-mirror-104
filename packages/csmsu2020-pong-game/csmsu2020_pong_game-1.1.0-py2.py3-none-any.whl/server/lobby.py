"""Module defines LobbyServer class for hosting custom pong servers."""

from random import choices
from string import ascii_lowercase, digits
from typing import Optional, List, Tuple

from flask import Flask, abort, request

from .game import GameServer


class Games:
    """A storage for games currently hosted on the server."""

    def __init__(self, registry_id: str = ""):
        """Create a new registry for games.

        :param registry_id: can be used to specify a prefix for game id's
                            generated by this game list, defaults to an
                            empty string.
        """
        self.registry_id = registry_id
        self.__games = {}

    def get(self, game_id: str) -> Optional[GameServer]:
        """Return a `GameServer` object given its game id.

        :param game_id: a string representing game id
        :return: a `GameServer` object, if game with given game id
                  is present in storage, or `None`, otherwise
        """
        return self.__games.get(game_id, None)

    def get_all(self) -> List[Tuple[str, GameServer]]:
        """Return a list of pairs `(game id, game)` all games in storage."""
        games_to_delete = []

        for id in self.__games:
            game = self.__games[id]
            if not game.is_running:
                games_to_delete.append(id)

        for id in games_to_delete:
            self.remove(id)
        return list(self.__games.items())

    def add(self, game: GameServer) -> str:
        """Insert a game into storage, generates and returns game id for it.

        :param game: a `GameServer` to register in storage
        :return: game id generated for given game
        """
        game_id = self.__new_game_id()
        self.__games[game_id] = game
        return game_id

    def remove(self, game_id: str) -> None:
        """Remove a game by its id, if present.

        :param game_id: a game id for game to remove from storage
        :return: `None`
        """
        if game_id in self.__games:
            del self.__games[game_id]

    def __new_game_id(self):
        def new_uid():
            charset = ascii_lowercase + digits
            return self.registry_id + ''.join(choices(charset, k=32))

        game_id = new_uid()
        while game_id in self.__games:
            game_id = new_uid()
        return game_id


class LobbyServer(Flask):
    """A web-server capable of listing and hosting games."""

    def __init__(self, name: str = "Lobby server"):
        """Initialize a new server.

        :param name: server name, str
        """
        super().__init__(name)

        self.games = Games()

        @self.route("/games/")
        def get_all_games():
            return {g_id: get_game(g_id) for g_id, game in self.games.get_all()
                    if game.get_num_players_connected() < 2}

        @self.route("/games/<game_id>/")
        def get_game(game_id):
            game = self.games.get(game_id)
            if game is None:
                abort(404, description="Game not found")
            return {"port": game.port, "settings": game.settings}

        @self.route("/games/new/", methods=["POST"])
        def create_new_game():
            settings = request.get_json()
            game = GameServer(settings)
            game_id = self.games.add(game)
            game.start()
            return {
                "id": game_id,
                "port": game.port,
                "settings": game.settings
            }
