
# This file is automatically generated. Do not edit.


from ply import yacc

# Required to build parser
from compiler.lex import tokens  # noqa


import compiler.yacc.grammar.lines
import compiler.yacc.grammar.InstrASM.IDxArgs
import compiler.yacc.grammar.InstrASM.control
import compiler.yacc.grammar.InstrASM.draw
import compiler.yacc.grammar.InstrASM.op
import compiler.yacc.grammar.InstrASM.radar
import compiler.yacc.grammar.InstrASM.simple
import compiler.yacc.grammar.InstrASM.ucontrol
import compiler.yacc.grammar.InstrASM.ulocate
import compiler.yacc.grammar.affectation
import compiler.yacc.grammar.arguments
import compiler.yacc.grammar.asm
import compiler.yacc.grammar.dottedID
import compiler.yacc.grammar.error
import compiler.yacc.grammar.function
import compiler.yacc.grammar.ifElseIf
import compiler.yacc.grammar.imports
import compiler.yacc.grammar.info
import compiler.yacc.grammar.jump
import compiler.yacc.grammar.staticFor




def p_lines_one(p):
    '''lines : ligne'''
    compiler.yacc.grammar.lines.lines_one(p)


def p_lines_lines(p):
    '''lines : lines lines'''
    compiler.yacc.grammar.lines.lines_lines(p)


def p_ligne_empty(p):
    '''ligne : noLine'''
    compiler.yacc.grammar.lines.ligne_empty(p)


def p_noLine(p):
    '''noLine : EndLine'''
    compiler.yacc.grammar.lines.noLine(p)


def p_setResult(p):
    '''ligne : set ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.IDxArgs.setResult(p)


def p_set_tooMuchArgs(p):
    '''ligne : set ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.set_tooMuchArgs(p)


def p_set_mustBeID(p):
    '''ligne : set error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.set_mustBeID(p)


def p_readResult(p):
    '''ligne : read ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.IDxArgs.readResult(p)


def p_read_tooMuchArgs(p):
    '''ligne : read ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.read_tooMuchArgs(p)


def p_read_mustBeID(p):
    '''ligne : read error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.read_mustBeID(p)


def p_sensorResult(p):
    '''ligne : sensor ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.IDxArgs.sensorResult(p)


def p_sensor_tooMuchArgs(p):
    '''ligne : sensor ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.sensor_tooMuchArgs(p)


def p_sensor_mustBeID(p):
    '''ligne : sensor error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.sensor_mustBeID(p)


def p_getlinkResult(p):
    '''ligne : getlink ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.IDxArgs.getlinkResult(p)


def p_getlink_tooMuchArgs(p):
    '''ligne : getlink ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.getlink_tooMuchArgs(p)


def p_getlink_mustBeID(p):
    '''ligne : getlink error'''
    compiler.yacc.grammar.InstrASM.IDxArgs.getlink_mustBeID(p)


def p_controlResult(p):
    '''ligne : control controlKeyWord instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.control.controlResult(p)


def p_controlKeyword_error(p):
    '''ligne : control error'''
    compiler.yacc.grammar.InstrASM.control.controlKeyword_error(p)


def p_controlArgs_error(p):
    '''ligne : control controlKeyWord instrArgs error'''
    compiler.yacc.grammar.InstrASM.control.controlArgs_error(p)


def p_controlKeyWord(p):
    '''controlKeyWord : enabled
                      | configure
                      | shootp
                      | shoot
                      | color
    '''
    compiler.yacc.grammar.InstrASM.control.controlKeyWord(p)


def p_drawResult(p):
    '''ligne : draw drawKeyWord instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.draw.drawResult(p)


def p_drawKeyword_error(p):
    '''ligne : draw error'''
    compiler.yacc.grammar.InstrASM.draw.drawKeyword_error(p)


def p_drawKeyWord(p):
    '''drawKeyWord : stroke
                   | clear
                   | color
                   | line
                   | rect
                   | lineRect
                   | image
                   | poly
                   | linePoly
                   | triangle
    '''
    compiler.yacc.grammar.InstrASM.draw.drawKeyWord(p)


def p_drawArgs_error(p):
    '''ligne : draw drawKeyWord instrArgs error'''
    compiler.yacc.grammar.InstrASM.draw.drawArgs_error(p)


def p_opResultTwoArgs(p):
    '''ligne : op opTwoArgs ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.op.opResultTwoArgs(p)


def p_opResultOneArgs(p):
    '''ligne : op opOneArgs ID instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.op.opResultOneArgs(p)


def p_opKeyword_error(p):
    '''ligne : op error'''
    compiler.yacc.grammar.InstrASM.op.opKeyword_error(p)


def p_opTwoArgsResult_error(p):
    '''ligne : op opTwoArgs error
            | op opOneArgs error'''
    compiler.yacc.grammar.InstrASM.op.opTwoArgsResult_error(p)


def p_opTwoArgsArgs_error(p):
    '''ligne : op opTwoArgs ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.op.opTwoArgsArgs_error(p)


def p_opOneArgsArgs_error(p):
    '''ligne : op opOneArgs ID instrArgs error'''
    compiler.yacc.grammar.InstrASM.op.opOneArgsArgs_error(p)


def p_opTwoArgs(p):
    '''opTwoArgs : add
                 | sub
                 | mul
                 | div
                 | idiv
                 | mod
                 | pow

                 | equal
                 | notEqual
                 | land
                 | lessThan
                 | lessThanEq
                 | greaterThan
                 | strictEqual

                 | shl
                 | shr
                 | or
                 | and
                 | xor
                 | not

                 | max
                 | min
                 | angle
                 | len
                 | noise'''
    compiler.yacc.grammar.InstrASM.op.opTwoArgs(p)


def p_opOneArgs(p):
    '''opOneArgs : abs
                 | log
                 | log10
                 | sin
                 | cos
                 | tan
                 | floor
                 | ceil
                 | sqrt
                 | rand
        '''
    compiler.yacc.grammar.InstrASM.op.opOneArgs(p)


def p_radarResult(p):
    '''ligne : radar radarTarget radarTarget radarTarget radarSort info info variable EndLine
             | uradar radarTarget radarTarget radarTarget radarSort info info variable EndLine'''
    compiler.yacc.grammar.InstrASM.radar.radarResult(p)


def p_radarTooManyArgs(p):
    '''ligne : radar radarTarget radarTarget radarTarget radarSort info info variable error
             | uradar radarTarget radarTarget radarTarget radarSort info info variable error'''
    compiler.yacc.grammar.InstrASM.radar.radarTooManyArgs(p)


def p_radarNotAnID(p):
    '''ligne : radar radarTarget radarTarget radarTarget radarSort info info error
             | uradar radarTarget radarTarget radarTarget radarSort info info error'''
    compiler.yacc.grammar.InstrASM.radar.radarNotAnID(p)


def p_radarMaybeNotEnought(p):
    '''ligne : radar radarTarget radarTarget radarTarget radarSort error
             | uradar radarTarget radarTarget radarTarget radarSort error'''
    compiler.yacc.grammar.InstrASM.radar.radarMaybeNotEnought(p)


def p_radarMaybeNotEnought2(p):
    '''ligne : radar radarTarget radarTarget radarTarget error
             | uradar radarTarget radarTarget radarTarget error'''
    compiler.yacc.grammar.InstrASM.radar.radarMaybeNotEnought2(p)


def p_radarMaybeNotEnought3(p):
    '''ligne : radar error
             | uradar error'''
    compiler.yacc.grammar.InstrASM.radar.radarMaybeNotEnought3(p)


def p_radarTarget(p):
    '''radarTarget : any
                   | enemy
                   | ally
                   | player
                   | attacker
                   | flying
                   | ground
                   | boss'''
    compiler.yacc.grammar.InstrASM.radar.radarTarget(p)


def p_radarSort(p):
    '''radarSort : distance
                 | health
                 | shield
                 | armor
                 | maxHealth'''
    compiler.yacc.grammar.InstrASM.radar.radarSort(p)


def p_endResult(p):
    '''ligne : end instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.simple.endResult(p)


def p_end_errorTooMuch(p):
    '''ligne : end instrArgs error'''
    compiler.yacc.grammar.InstrASM.simple.end_errorTooMuch(p)


def p_instrOneArgResult(p):
    '''ligne : instrOneArg instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.simple.instrOneArgResult(p)


def p_instrOneArg_MaybeArgsNotEnought(p):
    '''ligne : instrOneArg instrArgs error'''
    compiler.yacc.grammar.InstrASM.simple.instrOneArg_MaybeArgsNotEnought(p)


def p_instrOneArg(p):
    '''instrOneArg : print
                   | printflush
                   | drawflush
                   | ubind'''
    compiler.yacc.grammar.InstrASM.simple.instrOneArg(p)


def p_writeResult(p):
    '''ligne : write instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.simple.writeResult(p)


def p_write_MaybeArgsNotEnought(p):
    '''ligne : write instrArgs error'''
    compiler.yacc.grammar.InstrASM.simple.write_MaybeArgsNotEnought(p)


def p_ucontrolResult(p):
    '''ligne : ucontrol ucontrolKeyWord instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.ucontrol.ucontrolResult(p)


def p_ucontrolKeyword_error(p):
    '''ligne : ucontrol error'''
    compiler.yacc.grammar.InstrASM.ucontrol.ucontrolKeyword_error(p)


def p_ucontrolArgs_error(p):
    '''ligne : ucontrol ucontrolKeyWord instrArgs error'''
    compiler.yacc.grammar.InstrASM.ucontrol.ucontrolArgs_error(p)


def p_ucontrolKeyWord(p):
    '''ucontrolKeyWord : idle
                       | stop
                       | move
                       | approach
                       | pathfind
                       | target
                       | targetp
                       | itemDrop
                       | itemTake
                       | payDrop
                       | payTake
                       | flag
                       | mine
                       | build
                       | getBlock
                       | within
                       | boost
    '''
    compiler.yacc.grammar.InstrASM.ucontrol.ucontrolKeyWord(p)


def p_ulocateResult(p):
    '''ligne : ulocate building buildingType instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateResult(p)


def p_ulocateResultKeyWord(p):
    '''ligne : ulocate ulocateKeyWord instrArgs EndLine'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateResultKeyWord(p)


def p_ulocateKeyword_error(p):
    '''ligne : ulocate error'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateKeyword_error(p)


def p_ulocateBuildingType_error(p):
    '''ligne : ulocate building error'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateBuildingType_error(p)


def p_ulocateBuildingArgs_error(p):
    '''ligne : ulocate building buildingType instrArgs error'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateBuildingArgs_error(p)


def p_ulocateArgs_error(p):
    '''ligne : ulocate ulocateKeyWord instrArgs error'''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateArgs_error(p)


def p_ulocateKeyWord(p):
    '''ulocateKeyWord : ore
                      | damaged
                      | spawn
    '''
    compiler.yacc.grammar.InstrASM.ulocate.ulocateKeyWord(p)


def p_buildingType(p):
    '''buildingType : core
                    | storage
                    | generator
                    | factory
                    | repair
                    | rally
                    | battery
                    | resupply
                    | reactor
                    | turret
    '''
    compiler.yacc.grammar.InstrASM.ulocate.buildingType(p)


def p_affect(p):
    '''affectation : varsToAffect Affectaction'''
    compiler.yacc.grammar.affectation.affect(p)


def p_varsToAffect_one(p):
    '''varsToAffect : ID'''
    compiler.yacc.grammar.affectation.varsToAffect_one(p)


def p_varsToAffect_many(p):
    '''varsToAffect : varsToAffect Comma ID'''
    compiler.yacc.grammar.affectation.varsToAffect_many(p)


def p_args_empty(p):
    '''arguments : '''
    compiler.yacc.grammar.arguments.args_empty(p)


def p_args_one(p):
    '''arguments : info'''
    compiler.yacc.grammar.arguments.args_one(p)


def p_args_many(p):
    '''arguments : arguments Comma info'''
    compiler.yacc.grammar.arguments.args_many(p)


def p_args_oneComma(p):
    '''arguments : arguments Comma'''
    compiler.yacc.grammar.arguments.args_oneComma(p)


def p_instrKey_error(p):
    '''ligne : info error'''
    compiler.yacc.grammar.asm.instrKey_error(p)


def p_instrKey_error2(p):
    '''ligne : error'''
    compiler.yacc.grammar.asm.instrKey_error2(p)


def p_instrArgs(p):
    '''instrArgs :
                 | info
                 | instrArgs info'''
    compiler.yacc.grammar.asm.instrArgs(p)


def p_dottedID_one(p):
    '''dottedID : ID'''
    compiler.yacc.grammar.dottedID.dottedID_one(p)


def p_dottedID_many(p):
    '''dottedID : dottedID Dot ID'''
    compiler.yacc.grammar.dottedID.dottedID_many(p)


def p_error(p):
    '''None'''
    compiler.yacc.grammar.error.error(p)


def p_runFuncReturnArgs(p):
    '''ligne : affectation dottedID OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.function.runFuncReturnArgs(p)


def p_runFunc(p):
    '''ligne : dottedID OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.function.runFunc(p)


def p_defFun(p):
    '''noLine : dottedID OpenParenthesis arguments CloseParenthesis OpenCurlyBracket funDefContext lines CloseCurlyBracket'''
    compiler.yacc.grammar.function.defFun(p)


def p_funDefContext(p):
    '''funDefContext : '''
    compiler.yacc.grammar.function.funDefContext(p)


def p_handleReturn(p):
    '''ligne : Return arguments'''
    compiler.yacc.grammar.function.handleReturn(p)


def p_linesFromIf(p):
    '''lines : ifBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIf(p)


def p_linesFromIfElse(p):
    '''lines : ifBlock elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElse(p)


def p_linesFromIfElseElseIf(p):
    '''lines : ifBlock elifs'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIf(p)


def p_linesFromIfElseElseIfElse(p):
    '''lines : ifBlock elifs elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIfElse(p)


def p_elifs_one(p):
    '''elifs : elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_one(p)


def p_elifs_many(p):
    '''elifs : elifs elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_many(p)


def p_elseIfBlock(p):
    '''elseIfBlock : Else ifBlock'''
    compiler.yacc.grammar.ifElseIf.elseIfBlock(p)


def p_elseInstr(p):
    '''elseBlock : Else OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elseInstr(p)


def p_ifBlock(p):
    '''ifBlock : If asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.ifBlock(p)


def p_elifBlock(p):
    '''elseIfBlock : ElseIf asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elifBlock(p)


def p_importStd(p):
    '''noLine : Import ToImports'''
    compiler.yacc.grammar.imports.importStd(p)


def p_toImports_one(p):
    '''ToImports : ID'''
    compiler.yacc.grammar.imports.toImports_one(p)


def p_toImports_many(p):
    '''ToImports : ToImports Comma ID'''
    compiler.yacc.grammar.imports.toImports_many(p)


def p_info_id(p):
    '''info : ID'''
    compiler.yacc.grammar.info.info_id(p)


def p_info(p):
    '''info : Number
            | String
            | ArobasedInfo
            | True
            | False
    '''
    compiler.yacc.grammar.info.info(p)


def p_variable(p):
    '''variable : ID'''
    compiler.yacc.grammar.info.variable(p)


def p_ref(p):
    '''ligne : RefJump EndLine'''
    compiler.yacc.grammar.jump.ref(p)


def p_jump_asmCondition(p):
    '''ligne : jump ID asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmCondition(p)


def p_comparison(p):
    '''asmCondition : info Comparison info'''
    compiler.yacc.grammar.jump.comparison(p)


def p_jump_always(p):
    '''ligne : jump ID EndLine'''
    compiler.yacc.grammar.jump.jump_always(p)


def p_jump_asmNoRef(p):
    '''ligne : jump Number asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmNoRef(p)


def p_asmCondition(p):
    '''asmCondition : jumpKeyWord info info'''
    compiler.yacc.grammar.jump.asmCondition(p)


def p_jumpKeyWord(p):
    '''jumpKeyWord : equal
                   | notEqual
                   | lessThan
                   | lessThanEq
                   | greaterThan
                   | greaterThanEq
                   | strictEqual
                   | always
    '''
    compiler.yacc.grammar.jump.jumpKeyWord(p)


def p_staticFor(p):
    '''lines : For arguments ID liNameOrList OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.staticFor.staticFor(p)


def p_liNameOrList(p):
    '''liNameOrList : ID
                    | list'''
    compiler.yacc.grammar.staticFor.liNameOrList(p)


def p_staticList(p):
    '''noLine : affectation list'''
    compiler.yacc.grammar.staticFor.staticList(p)


def p_staticList_list(p):
    '''list : OpenBracket tuplesOrInfo CloseBracket'''
    compiler.yacc.grammar.staticFor.staticList_list(p)


def p_tuplesOrInfo(p):
    '''tuplesOrInfo : tuples
                    | arguments'''
    compiler.yacc.grammar.staticFor.tuplesOrInfo(p)


def p_tuples_one(p):
    '''tuples : tuple'''
    compiler.yacc.grammar.staticFor.tuples_one(p)


def p_tuples_many(p):
    '''tuples : tuples Comma tuple'''
    compiler.yacc.grammar.staticFor.tuples_many(p)


def p_tuples_oneComma(p):
    '''tuples : tuples Comma'''
    compiler.yacc.grammar.staticFor.tuples_oneComma(p)


def p_tupleDef(p):
    '''tuple : OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.staticFor.tupleDef(p)


parser = yacc.yacc()
