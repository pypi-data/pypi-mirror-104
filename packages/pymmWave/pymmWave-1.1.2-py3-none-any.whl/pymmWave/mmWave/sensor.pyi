import abc
from .data_model import xyzd as xyzd
from abc import ABC, abstractmethod
from enum import Enum
from typing import Any, Optional

class Sensor(ABC, metaclass=abc.ABCMeta):
    class SensorType(Enum):
        IMU: int = ...
        POINT_CLOUD3D: int = ...
        POINT_CLOUD2D: int = ...
    @abstractmethod
    def type(self) -> Sensor.SensorType: ...
    @abstractmethod
    def model(self) -> str: ...
    @abstractmethod
    def is_alive(self) -> bool: ...
    @abstractmethod
    async def start_sensor(self) -> None: ...
    @abstractmethod
    def stop_sensor(self) -> Any: ...
    @abstractmethod
    async def get_data(self) -> xyzd: ...
    @abstractmethod
    def get_data_nowait(self) -> Optional[xyzd]: ...
    @abstractmethod
    def get_update_freq(self) -> float: ...

class SpatialSensor:
    sensor: Any = ...
    location: Any = ...
    pitch_rads: Any = ...
    def __init__(self, sens: Sensor, location: tuple[float, float, float], pitch_rads: tuple[float, float, float]) -> None: ...

class InvalidSensorException(Exception):
    def __init__(self, message: str, errors: Any) -> None: ...
