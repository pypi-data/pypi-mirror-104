# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hdff')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hdff')
    _hdff = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdff', [dirname(__file__)])
        except ImportError:
            import _hdff
            return _hdff
        try:
            _mod = imp.load_module('_hdff', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hdff = swig_import_helper()
    del swig_import_helper
else:
    import _hdff
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdff.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hdff.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hdff.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hdff.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hdff.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hdff.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hdff.SwigPyIterator_copy(self)

    def next(self):
        return _hdff.SwigPyIterator_next(self)

    def __next__(self):
        return _hdff.SwigPyIterator___next__(self)

    def previous(self):
        return _hdff.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hdff.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hdff.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hdff.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hdff.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hdff.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hdff.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hdff.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hdff.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdff.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdff.StringVector___nonzero__(self)

    def __bool__(self):
        return _hdff.StringVector___bool__(self)

    def __len__(self):
        return _hdff.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _hdff.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdff.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdff.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdff.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdff.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdff.StringVector___setitem__(self, *args)

    def pop(self):
        return _hdff.StringVector_pop(self)

    def append(self, x):
        return _hdff.StringVector_append(self, x)

    def empty(self):
        return _hdff.StringVector_empty(self)

    def size(self):
        return _hdff.StringVector_size(self)

    def swap(self, v):
        return _hdff.StringVector_swap(self, v)

    def begin(self):
        return _hdff.StringVector_begin(self)

    def end(self):
        return _hdff.StringVector_end(self)

    def rbegin(self):
        return _hdff.StringVector_rbegin(self)

    def rend(self):
        return _hdff.StringVector_rend(self)

    def clear(self):
        return _hdff.StringVector_clear(self)

    def get_allocator(self):
        return _hdff.StringVector_get_allocator(self)

    def pop_back(self):
        return _hdff.StringVector_pop_back(self)

    def erase(self, *args):
        return _hdff.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdff.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdff.StringVector_push_back(self, x)

    def front(self):
        return _hdff.StringVector_front(self)

    def back(self):
        return _hdff.StringVector_back(self)

    def assign(self, n, x):
        return _hdff.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _hdff.StringVector_resize(self, *args)

    def insert(self, *args):
        return _hdff.StringVector_insert(self, *args)

    def reserve(self, n):
        return _hdff.StringVector_reserve(self, n)

    def capacity(self):
        return _hdff.StringVector_capacity(self)
    __swig_destroy__ = _hdff.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _hdff.StringVector_swigregister
StringVector_swigregister(StringVector)

class UInt32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdff.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdff.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _hdff.UInt32Vector___bool__(self)

    def __len__(self):
        return _hdff.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _hdff.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdff.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdff.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdff.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdff.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdff.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _hdff.UInt32Vector_pop(self)

    def append(self, x):
        return _hdff.UInt32Vector_append(self, x)

    def empty(self):
        return _hdff.UInt32Vector_empty(self)

    def size(self):
        return _hdff.UInt32Vector_size(self)

    def swap(self, v):
        return _hdff.UInt32Vector_swap(self, v)

    def begin(self):
        return _hdff.UInt32Vector_begin(self)

    def end(self):
        return _hdff.UInt32Vector_end(self)

    def rbegin(self):
        return _hdff.UInt32Vector_rbegin(self)

    def rend(self):
        return _hdff.UInt32Vector_rend(self)

    def clear(self):
        return _hdff.UInt32Vector_clear(self)

    def get_allocator(self):
        return _hdff.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _hdff.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _hdff.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _hdff.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdff.UInt32Vector_push_back(self, x)

    def front(self):
        return _hdff.UInt32Vector_front(self)

    def back(self):
        return _hdff.UInt32Vector_back(self)

    def assign(self, n, x):
        return _hdff.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _hdff.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _hdff.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _hdff.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _hdff.UInt32Vector_capacity(self)
    __swig_destroy__ = _hdff.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _hdff.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class FHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FHandleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdff.FHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdff.FHandleVector___nonzero__(self)

    def __bool__(self):
        return _hdff.FHandleVector___bool__(self)

    def __len__(self):
        return _hdff.FHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _hdff.FHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdff.FHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdff.FHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdff.FHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdff.FHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdff.FHandleVector___setitem__(self, *args)

    def pop(self):
        return _hdff.FHandleVector_pop(self)

    def append(self, x):
        return _hdff.FHandleVector_append(self, x)

    def empty(self):
        return _hdff.FHandleVector_empty(self)

    def size(self):
        return _hdff.FHandleVector_size(self)

    def swap(self, v):
        return _hdff.FHandleVector_swap(self, v)

    def begin(self):
        return _hdff.FHandleVector_begin(self)

    def end(self):
        return _hdff.FHandleVector_end(self)

    def rbegin(self):
        return _hdff.FHandleVector_rbegin(self)

    def rend(self):
        return _hdff.FHandleVector_rend(self)

    def clear(self):
        return _hdff.FHandleVector_clear(self)

    def get_allocator(self):
        return _hdff.FHandleVector_get_allocator(self)

    def pop_back(self):
        return _hdff.FHandleVector_pop_back(self)

    def erase(self, *args):
        return _hdff.FHandleVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdff.new_FHandleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hdff.FHandleVector_push_back(self, x)

    def front(self):
        return _hdff.FHandleVector_front(self)

    def back(self):
        return _hdff.FHandleVector_back(self)

    def assign(self, n, x):
        return _hdff.FHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _hdff.FHandleVector_resize(self, *args)

    def insert(self, *args):
        return _hdff.FHandleVector_insert(self, *args)

    def reserve(self, n):
        return _hdff.FHandleVector_reserve(self, n)

    def capacity(self):
        return _hdff.FHandleVector_capacity(self)
    __swig_destroy__ = _hdff.delete_FHandleVector
    __del__ = lambda self: None
FHandleVector_swigregister = _hdff.FHandleVector_swigregister
FHandleVector_swigregister(FHandleVector)

HANDLE_COUNT = _hdff.HANDLE_COUNT
H_COLLECTION = _hdff.H_COLLECTION
H_DATASET = _hdff.H_DATASET
H_DATABLOCK = _hdff.H_DATABLOCK
H_DATAPOINTS = _hdff.H_DATAPOINTS
H_CLUSTER = _hdff.H_CLUSTER
H_EMBEDDING = _hdff.H_EMBEDDING
H_GRAPH = _hdff.H_GRAPH
H_SEGMENTATION = _hdff.H_SEGMENTATION
H_FUNCTION = _hdff.H_FUNCTION
H_HIERARCHY = _hdff.H_HIERARCHY
H_SUBSPACE = _hdff.H_SUBSPACE
H_BASIS = _hdff.H_BASIS
H_VOLSEGMENT = _hdff.H_VOLSEGMENT
H_DATAPOINTS_METAINFO = _hdff.H_DATAPOINTS_METAINFO
H_HISTOGRAM = _hdff.H_HISTOGRAM
H_DISTRIBUTION = _hdff.H_DISTRIBUTION
H_UNDEFINED = _hdff.H_UNDEFINED
class FileHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHandle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        constructHandle = staticmethod(_hdff.FileHandle_constructHandle)
    else:
        constructHandle = _hdff.FileHandle_constructHandle
    __swig_destroy__ = _hdff.delete_FileHandle
    __del__ = lambda self: None

    def isValid(self):
        return _hdff.FileHandle_isValid(self)

    def clone(self):
        return _hdff.FileHandle_clone(self)

    def instantiate(self):
        return _hdff.FileHandle_instantiate(self)

    def type(self):
        return _hdff.FileHandle_type(self)

    def typeName(self, *args):
        return _hdff.FileHandle_typeName(self, *args)

    def idString(self, *args):
        return _hdff.FileHandle_idString(self, *args)

    def metaInfoString(self, *args):
        return _hdff.FileHandle_metaInfoString(self, *args)

    def encoding(self, *args):
        return _hdff.FileHandle_encoding(self, *args)

    def append(self, handle):
        return _hdff.FileHandle_append(self, handle)

    def add(self, handle):
        return _hdff.FileHandle_add(self, handle)

    def childCount(self):
        return _hdff.FileHandle_childCount(self)

    def getDataPoints(self, i):
        return _hdff.FileHandle_getDataPoints(self, i)

    def getDataBlock(self, i):
        return _hdff.FileHandle_getDataBlock(self, i)

    def getGraph(self, i):
        return _hdff.FileHandle_getGraph(self, i)

    def getCluster(self, i):
        return _hdff.FileHandle_getCluster(self, i)

    def getSubspace(self, i):
        return _hdff.FileHandle_getSubspace(self, i)

    def getBasis(self, i):
        return _hdff.FileHandle_getBasis(self, i)

    def getClusterByName(self, clusterName):
        return _hdff.FileHandle_getClusterByName(self, clusterName)

    def getChildrenCountByType(self, *args):
        return _hdff.FileHandle_getChildrenCountByType(self, *args)

    def getAllChildren(self):
        return _hdff.FileHandle_getAllChildren(self)
FileHandle_swigregister = _hdff.FileHandle_swigregister
FileHandle_swigregister(FileHandle)
cvar = _hdff.cvar
FileHandle.sEmptyString = _hdff.cvar.FileHandle_sEmptyString
FileHandle.sStringSeperator = _hdff.cvar.FileHandle_sStringSeperator

def FileHandle_constructHandle(*args):
    return _hdff.FileHandle_constructHandle(*args)
FileHandle_constructHandle = _hdff.FileHandle_constructHandle

class DatasetHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_DatasetHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_DatasetHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.DatasetHandle_clone(self)

    def add(self, handle):
        return _hdff.DatasetHandle_add(self, handle)

    def dataPoints(self):
        return _hdff.DatasetHandle_dataPoints(self)

    def getFunctions(self):
        return _hdff.DatasetHandle_getFunctions(self)

    def getFunction(self, i):
        return _hdff.DatasetHandle_getFunction(self, i)
DatasetHandle_swigregister = _hdff.DatasetHandle_swigregister
DatasetHandle_swigregister(DatasetHandle)
DatasetHandle.sDefaultDatasetName = _hdff.cvar.DatasetHandle_sDefaultDatasetName

class DataCollectionHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataCollectionHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataCollectionHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_DataCollectionHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_DataCollectionHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.DataCollectionHandle_clone(self)

    def collection(self):
        return _hdff.DataCollectionHandle_collection(self)

    def datasetCount(self):
        return _hdff.DataCollectionHandle_datasetCount(self)

    def dataset(self, *args):
        return _hdff.DataCollectionHandle_dataset(self, *args)

    def attach(self, *args):
        return _hdff.DataCollectionHandle_attach(self, *args)

    def write(self, filename=None):
        return _hdff.DataCollectionHandle_write(self, filename)

    def append(self, handle):
        return _hdff.DataCollectionHandle_append(self, handle)

    def add(self, handle):
        return _hdff.DataCollectionHandle_add(self, handle)

    def updateMetaData(self, filename=None):
        return _hdff.DataCollectionHandle_updateMetaData(self, filename)
DataCollectionHandle_swigregister = _hdff.DataCollectionHandle_swigregister
DataCollectionHandle_swigregister(DataCollectionHandle)
DataCollectionHandle.sMajorVersion = _hdff.cvar.DataCollectionHandle_sMajorVersion
DataCollectionHandle.sMinorVersion = _hdff.cvar.DataCollectionHandle_sMinorVersion
DataCollectionHandle.sPrecision = _hdff.cvar.DataCollectionHandle_sPrecision
DataCollectionHandle.sDefaultName = _hdff.cvar.DataCollectionHandle_sDefaultName

class DataBlockHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataBlockHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataBlockHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_DataBlockHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_DataBlockHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.DataBlockHandle_clone(self)

    def instantiate(self):
        return _hdff.DataBlockHandle_instantiate(self)

    def instantiateBuffer(self):
        return _hdff.DataBlockHandle_instantiateBuffer(self)

    def name(self, *args):
        return _hdff.DataBlockHandle_name(self, *args)

    def size(self, *args):
        return _hdff.DataBlockHandle_size(self, *args)

    def sampleCount(self, *args):
        return _hdff.DataBlockHandle_sampleCount(self, *args)

    def dimension(self, *args):
        return _hdff.DataBlockHandle_dimension(self, *args)

    def valueSize(self, *args):
        return _hdff.DataBlockHandle_valueSize(self, *args)

    def dataType(self, *args):
        return _hdff.DataBlockHandle_dataType(self, *args)

    def setData(self, data):
        return _hdff.DataBlockHandle_setData(self, data)

    def readData(self, data):
        return _hdff.DataBlockHandle_readData(self, data)

    def compressionFlag(self, *args):
        return _hdff.DataBlockHandle_compressionFlag(self, *args)

    def getData(self):
        return _hdff.DataBlockHandle_getData(self)
DataBlockHandle_swigregister = _hdff.DataBlockHandle_swigregister
DataBlockHandle_swigregister(DataBlockHandle)
DataBlockHandle.sDefaultDataBlockName = _hdff.cvar.DataBlockHandle_sDefaultDataBlockName

class DataPointsHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPointsHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPointsHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_DataPointsHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_DataPointsHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.DataPointsHandle_clone(self)

    def add(self, handle):
        return _hdff.DataPointsHandle_add(self, handle)

    def setDimensionLabel(self, dimLabel):
        return _hdff.DataPointsHandle_setDimensionLabel(self, dimLabel)

    def setDimensionFlag(self, dimFlag):
        return _hdff.DataPointsHandle_setDimensionFlag(self, dimFlag)

    def dimensionFlags(self):
        return _hdff.DataPointsHandle_dimensionFlags(self)

    def attributeNames(self, *args):
        return _hdff.DataPointsHandle_attributeNames(self, *args)

    def attributeName(self, *args):
        return _hdff.DataPointsHandle_attributeName(self, *args)

    def setSpatialDim(self, dimX, dimY, dimZ):
        return _hdff.DataPointsHandle_setSpatialDim(self, dimX, dimY, dimZ)

    def getSpatialDim(self, *args):
        return _hdff.DataPointsHandle_getSpatialDim(self, *args)

    def spatialDim(self):
        return _hdff.DataPointsHandle_spatialDim(self)

    def getData(self):
        return _hdff.DataPointsHandle_getData(self)

    def setData(self, obj):
        return _hdff.DataPointsHandle_setData(self, obj)
DataPointsHandle_swigregister = _hdff.DataPointsHandle_swigregister
DataPointsHandle_swigregister(DataPointsHandle)
DataPointsHandle.sDefaultDataPointsName = _hdff.cvar.DataPointsHandle_sDefaultDataPointsName

class SegmentationHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentationHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentationHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_SegmentationHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_SegmentationHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.SegmentationHandle_clone(self)

    def segmentationType(self):
        return _hdff.SegmentationHandle_segmentationType(self)

    def segCount(self):
        return _hdff.SegmentationHandle_segCount(self)

    def setOffsets(self, offsets):
        return _hdff.SegmentationHandle_setOffsets(self, offsets)

    def setSegmentation(self, *args):
        return _hdff.SegmentationHandle_setSegmentation(self, *args)

    def setSteepest(self, steepest):
        return _hdff.SegmentationHandle_setSteepest(self, steepest)

    def setIndexMap(self, index_map):
        return _hdff.SegmentationHandle_setIndexMap(self, index_map)

    def add(self, handle):
        return _hdff.SegmentationHandle_add(self, handle)

    def readSegmentation(self, offsets, segmentation, index_map):
        return _hdff.SegmentationHandle_readSegmentation(self, offsets, segmentation, index_map)
SegmentationHandle_swigregister = _hdff.SegmentationHandle_swigregister
SegmentationHandle_swigregister(SegmentationHandle)

class Segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _hdff.Segment_size_set
    __swig_getmethods__["size"] = _hdff.Segment_size_get
    if _newclass:
        size = _swig_property(_hdff.Segment_size_get, _hdff.Segment_size_set)
    __swig_setmethods__["samples"] = _hdff.Segment_samples_set
    __swig_getmethods__["samples"] = _hdff.Segment_samples_get
    if _newclass:
        samples = _swig_property(_hdff.Segment_samples_get, _hdff.Segment_samples_set)

    def __init__(self):
        this = _hdff.new_Segment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_Segment
    __del__ = lambda self: None
Segment_swigregister = _hdff.Segment_swigregister
Segment_swigregister(Segment)

class Segmentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segmentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segmentation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdff.new_Segmentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_Segmentation
    __del__ = lambda self: None

    def initialize(self, handle):
        return _hdff.Segmentation_initialize(self, handle)

    def setSegmentation(self, seg):
        return _hdff.Segmentation_setSegmentation(self, seg)

    def setIndexMap(self, index):
        return _hdff.Segmentation_setIndexMap(self, index)

    def elementSegmentation(self, seg_id):
        return _hdff.Segmentation_elementSegmentation(self, seg_id)

    def makeHandle(self):
        return _hdff.Segmentation_makeHandle(self)

    def segCount(self):
        return _hdff.Segmentation_segCount(self)

    def offsets(self):
        return _hdff.Segmentation_offsets(self)

    def segmentation(self):
        return _hdff.Segmentation_segmentation(self)
    __swig_setmethods__["mSegCount"] = _hdff.Segmentation_mSegCount_set
    __swig_getmethods__["mSegCount"] = _hdff.Segmentation_mSegCount_get
    if _newclass:
        mSegCount = _swig_property(_hdff.Segmentation_mSegCount_get, _hdff.Segmentation_mSegCount_set)
    __swig_setmethods__["mSegmentation"] = _hdff.Segmentation_mSegmentation_set
    __swig_getmethods__["mSegmentation"] = _hdff.Segmentation_mSegmentation_get
    if _newclass:
        mSegmentation = _swig_property(_hdff.Segmentation_mSegmentation_get, _hdff.Segmentation_mSegmentation_set)
    __swig_setmethods__["mSteepest"] = _hdff.Segmentation_mSteepest_set
    __swig_getmethods__["mSteepest"] = _hdff.Segmentation_mSteepest_get
    if _newclass:
        mSteepest = _swig_property(_hdff.Segmentation_mSteepest_get, _hdff.Segmentation_mSteepest_set)
    __swig_setmethods__["mOffsets"] = _hdff.Segmentation_mOffsets_set
    __swig_getmethods__["mOffsets"] = _hdff.Segmentation_mOffsets_get
    if _newclass:
        mOffsets = _swig_property(_hdff.Segmentation_mOffsets_get, _hdff.Segmentation_mOffsets_set)
    __swig_setmethods__["mIndexMap"] = _hdff.Segmentation_mIndexMap_set
    __swig_getmethods__["mIndexMap"] = _hdff.Segmentation_mIndexMap_get
    if _newclass:
        mIndexMap = _swig_property(_hdff.Segmentation_mIndexMap_get, _hdff.Segmentation_mIndexMap_set)

    def local(self, id):
        return _hdff.Segmentation_local(self, id)
Segmentation_swigregister = _hdff.Segmentation_swigregister
Segmentation_swigregister(Segmentation)

class HierarchicalSegmentation(Segmentation):
    __swig_setmethods__ = {}
    for _s in [Segmentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HierarchicalSegmentation, name, value)
    __swig_getmethods__ = {}
    for _s in [Segmentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HierarchicalSegmentation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdff.new_HierarchicalSegmentation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_HierarchicalSegmentation
    __del__ = lambda self: None

    def initialize(self, handle):
        return _hdff.HierarchicalSegmentation_initialize(self, handle)

    def makeHandle(self):
        return _hdff.HierarchicalSegmentation_makeHandle(self)

    def segmentation(self, parameter):
        return _hdff.HierarchicalSegmentation_segmentation(self, parameter)

    def addCancellation(self, global_child, global_parent, parameter):
        return _hdff.HierarchicalSegmentation_addCancellation(self, global_child, global_parent, parameter)

    def setOrder(self, order):
        return _hdff.HierarchicalSegmentation_setOrder(self, order)
    __swig_setmethods__["mHierarchy"] = _hdff.HierarchicalSegmentation_mHierarchy_set
    __swig_getmethods__["mHierarchy"] = _hdff.HierarchicalSegmentation_mHierarchy_get
    if _newclass:
        mHierarchy = _swig_property(_hdff.HierarchicalSegmentation_mHierarchy_get, _hdff.HierarchicalSegmentation_mHierarchy_set)
    __swig_setmethods__["mOrder"] = _hdff.HierarchicalSegmentation_mOrder_set
    __swig_getmethods__["mOrder"] = _hdff.HierarchicalSegmentation_mOrder_get
    if _newclass:
        mOrder = _swig_property(_hdff.HierarchicalSegmentation_mOrder_get, _hdff.HierarchicalSegmentation_mOrder_set)

    def representative(self, index, parameter):
        return _hdff.HierarchicalSegmentation_representative(self, index, parameter)
HierarchicalSegmentation_swigregister = _hdff.HierarchicalSegmentation_swigregister
HierarchicalSegmentation_swigregister(HierarchicalSegmentation)

class MorseComplex(HierarchicalSegmentation):
    __swig_setmethods__ = {}
    for _s in [HierarchicalSegmentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MorseComplex, name, value)
    __swig_getmethods__ = {}
    for _s in [HierarchicalSegmentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MorseComplex, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdff.new_MorseComplex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_MorseComplex
    __del__ = lambda self: None

    def initialize(self, handle):
        return _hdff.MorseComplex_initialize(self, handle)

    def makeHandle(self):
        return _hdff.MorseComplex_makeHandle(self)

    def addSaddlePair(self, saddle, f, a, b, p):
        return _hdff.MorseComplex_addSaddlePair(self, saddle, f, a, b, p)

    def finalizeConstruction(self):
        return _hdff.MorseComplex_finalizeConstruction(self)

    def setNodeInfo(self, global_index, function):
        return _hdff.MorseComplex_setNodeInfo(self, global_index, function)

    def cancellationTree(self, tree, persistence):
        return _hdff.MorseComplex_cancellationTree(self, tree, persistence)

    def topologicalSpine(self, tree, persistence, ridgeness):
        return _hdff.MorseComplex_topologicalSpine(self, tree, persistence, ridgeness)

    def getPersistenceByNodeNumber(self, nodeNum):
        return _hdff.MorseComplex_getPersistenceByNodeNumber(self, nodeNum)

    def getPersistenceMax(self):
        return _hdff.MorseComplex_getPersistenceMax(self)

    def getPersistenceVersusExtrema(self):
        return _hdff.MorseComplex_getPersistenceVersusExtrema(self)

    def getPersistenceVersusArcs(self):
        return _hdff.MorseComplex_getPersistenceVersusArcs(self)

    def writeDot(self, filename):
        return _hdff.MorseComplex_writeDot(self, filename)
    if _newclass:
        pairCmp = staticmethod(_hdff.MorseComplex_pairCmp)
    else:
        pairCmp = _hdff.MorseComplex_pairCmp
    __swig_setmethods__["mSaddles"] = _hdff.MorseComplex_mSaddles_set
    __swig_getmethods__["mSaddles"] = _hdff.MorseComplex_mSaddles_get
    if _newclass:
        mSaddles = _swig_property(_hdff.MorseComplex_mSaddles_get, _hdff.MorseComplex_mSaddles_set)
    __swig_setmethods__["mNodes"] = _hdff.MorseComplex_mNodes_set
    __swig_getmethods__["mNodes"] = _hdff.MorseComplex_mNodes_get
    if _newclass:
        mNodes = _swig_property(_hdff.MorseComplex_mNodes_get, _hdff.MorseComplex_mNodes_set)
MorseComplex_swigregister = _hdff.MorseComplex_swigregister
MorseComplex_swigregister(MorseComplex)

def MorseComplex_pairCmp(a, b):
    return _hdff.MorseComplex_pairCmp(a, b)
MorseComplex_pairCmp = _hdff.MorseComplex_pairCmp



def construct_complex(complex,f):

  morse = MorseComplex()
  morse.setSegmentation(complex.hierarchy)

  reps = [x.representative for x in complex.hierarchy]
#print reps
  morse.setIndexMap(reps)

# Collect all saddles that are part of cancellations
  saddles = dict()
  for seg in complex.hierarchy:
#print seg.representative,seg.parent,seg.persistence
      morse.addCancellation(seg.representative,seg.parent,seg.persistence)
#print seg.representative.__class__,f[seg.representative][-1].__class__
      morse.setNodeInfo(seg.representative, f[seg.representative][-1])

      if seg.persistence < 10e33:
          saddles[seg.saddle] = seg.persistence

  order = range(0,len(complex.hierarchy))
  morse.setOrder(order)


# Now finally add all the saddles triples
  for seg in complex.hierarchy: # For all segments
      for neigh in seg.neighbors: #For all neighbors
          if seg.representative < neigh: # Only output each edge once
              s = seg.neighbors[neigh] # THe corresponding saddles
              if s in saddles: # Is this a saddle that cancels
                  morse.addSaddlePair(s,f[s][-1],seg.representative,neigh,saddles[s])
              else:
                  morse.addSaddlePair(s,f[s][-1],seg.representative,neigh,10e34)


  morse.finalizeConstruction()

  return morse


class FunctionHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_FunctionHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_FunctionHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.FunctionHandle_clone(self)

    def add(self, handle):
        return _hdff.FunctionHandle_add(self, handle)

    def domain(self, *args):
        return _hdff.FunctionHandle_domain(self, *args)

    def range(self, *args):
        return _hdff.FunctionHandle_range(self, *args)

    def getGraph(self, i):
        return _hdff.FunctionHandle_getGraph(self, i)

    def getSegmentation(self, i):
        return _hdff.FunctionHandle_getSegmentation(self, i)
FunctionHandle_swigregister = _hdff.FunctionHandle_swigregister
FunctionHandle_swigregister(FunctionHandle)

GRAPH_STORAGE_TYPE_EDGE_PAIR = _hdff.GRAPH_STORAGE_TYPE_EDGE_PAIR
GRAPH_STORAGE_TYPE_DAG = _hdff.GRAPH_STORAGE_TYPE_DAG
GRAPH_STORAGE_UNDEFINED = _hdff.GRAPH_STORAGE_UNDEFINED
class GraphHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_GraphHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_GraphHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.GraphHandle_clone(self)

    def add(self, handle):
        return _hdff.GraphHandle_add(self, handle)

    def setEdgeWeight(self, edgeWeight, edgeCount):
        return _hdff.GraphHandle_setEdgeWeight(self, edgeWeight, edgeCount)

    def edgePairNum(self):
        return _hdff.GraphHandle_edgePairNum(self)

    def setEdgePairs(self, *args):
        return _hdff.GraphHandle_setEdgePairs(self, *args)
GraphHandle_swigregister = _hdff.GraphHandle_swigregister
GraphHandle_swigregister(GraphHandle)
GraphHandle.sDefaultGraphName = _hdff.cvar.GraphHandle_sDefaultGraphName

MAXIMUM = _hdff.MAXIMUM
MINIMUM = _hdff.MINIMUM
SADDLE = _hdff.SADDLE
class TopoNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_TopoNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_TopoNode
    __del__ = lambda self: None

    def begin(self):
        return _hdff.TopoNode_begin(self)

    def end(self):
        return _hdff.TopoNode_end(self)

    def neighbors(self, neighbors):
        return _hdff.TopoNode_neighbors(self, neighbors)

    def id(self, *args):
        return _hdff.TopoNode_id(self, *args)

    def index(self, *args):
        return _hdff.TopoNode_index(self, *args)

    def type(self, *args):
        return _hdff.TopoNode_type(self, *args)

    def function(self, *args):
        return _hdff.TopoNode_function(self, *args)

    def addNeighbor(self, node):
        return _hdff.TopoNode_addNeighbor(self, node)
TopoNode_swigregister = _hdff.TopoNode_swigregister
TopoNode_swigregister(TopoNode)

class TopoGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoGraph, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdff.new_TopoGraph()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_TopoGraph
    __del__ = lambda self: None

    def addNode(self, id, f, t):
        return _hdff.TopoGraph_addNode(self, id, f, t)

    def addEdge(self, u, v):
        return _hdff.TopoGraph_addEdge(self, u, v)

    def nodes(self):
        return _hdff.TopoGraph_nodes(self)

    def size(self):
        return _hdff.TopoGraph_size(self)

    def begin(self):
        return _hdff.TopoGraph_begin(self)

    def end(self):
        return _hdff.TopoGraph_end(self)

    def writeDot(self, filename):
        return _hdff.TopoGraph_writeDot(self, filename)
TopoGraph_swigregister = _hdff.TopoGraph_swigregister
TopoGraph_swigregister(TopoGraph)

class SubspaceHandle(FileHandle):
    __swig_setmethods__ = {}
    for _s in [FileHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubspaceHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubspaceHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_SubspaceHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_SubspaceHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.SubspaceHandle_clone(self)

    def add(self, handle):
        return _hdff.SubspaceHandle_add(self, handle)

    def setChildrenBasis(self, basis):
        return _hdff.SubspaceHandle_setChildrenBasis(self, basis)

    def subspaceBasisByIndex(self, index):
        return _hdff.SubspaceHandle_subspaceBasisByIndex(self, index)

    def subspaceNum(self):
        return _hdff.SubspaceHandle_subspaceNum(self)
SubspaceHandle_swigregister = _hdff.SubspaceHandle_swigregister
SubspaceHandle_swigregister(SubspaceHandle)
SubspaceHandle.sDefaultSubspaceName = _hdff.cvar.SubspaceHandle_sDefaultSubspaceName

ClusterType_FlatCluster = _hdff.ClusterType_FlatCluster
ClusterType_FlatCluster_Subspace = _hdff.ClusterType_FlatCluster_Subspace
ClusterType_HierarchicalCluster = _hdff.ClusterType_HierarchicalCluster
ClusterType_UnKnown = _hdff.ClusterType_UnKnown
class ClusterHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_ClusterHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_ClusterHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.ClusterHandle_clone(self)

    def add(self, handle):
        return _hdff.ClusterHandle_add(self, handle)

    def setLabel(self, label, pointCount):
        return _hdff.ClusterHandle_setLabel(self, label, pointCount)

    def GetClusteringResultType(self):
        return _hdff.ClusterHandle_GetClusteringResultType(self)

    def sampleCount(self):
        return _hdff.ClusterHandle_sampleCount(self)

    def setParameterString(self, params):
        return _hdff.ClusterHandle_setParameterString(self, params)

    def parameterString(self):
        return _hdff.ClusterHandle_parameterString(self)

    def readHierarchy(self, hierarchy):
        return _hdff.ClusterHandle_readHierarchy(self, hierarchy)
ClusterHandle_swigregister = _hdff.ClusterHandle_swigregister
ClusterHandle_swigregister(ClusterHandle)
ClusterHandle.sDefaultClusterName = _hdff.cvar.ClusterHandle_sDefaultClusterName

class BasisHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasisHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_BasisHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_BasisHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.BasisHandle_clone(self)

    def add(self, handle):
        return _hdff.BasisHandle_add(self, handle)

    def setBasis(self, basis):
        return _hdff.BasisHandle_setBasis(self, basis)

    def basis(self):
        return _hdff.BasisHandle_basis(self)

    def basisDimension(self):
        return _hdff.BasisHandle_basisDimension(self)
BasisHandle_swigregister = _hdff.BasisHandle_swigregister
BasisHandle_swigregister(BasisHandle)
BasisHandle.sDefaultBasisName = _hdff.cvar.BasisHandle_sDefaultBasisName

class Basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Basis, name)
    __repr__ = _swig_repr

    def empty(self):
        return _hdff.Basis_empty(self)

    def resize(self, row, col):
        return _hdff.Basis_resize(self, row, col)

    def __init__(self, *args):
        this = _hdff.new_Basis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coeff(self, *args):
        return _hdff.Basis_Coeff(self, *args)
    __swig_setmethods__["coeffColMajor"] = _hdff.Basis_coeffColMajor_set
    __swig_getmethods__["coeffColMajor"] = _hdff.Basis_coeffColMajor_get
    if _newclass:
        coeffColMajor = _swig_property(_hdff.Basis_coeffColMajor_get, _hdff.Basis_coeffColMajor_set)
    __swig_setmethods__["cols"] = _hdff.Basis_cols_set
    __swig_getmethods__["cols"] = _hdff.Basis_cols_get
    if _newclass:
        cols = _swig_property(_hdff.Basis_cols_get, _hdff.Basis_cols_set)
    __swig_setmethods__["rows"] = _hdff.Basis_rows_set
    __swig_getmethods__["rows"] = _hdff.Basis_rows_get
    if _newclass:
        rows = _swig_property(_hdff.Basis_rows_get, _hdff.Basis_rows_set)
    __swig_destroy__ = _hdff.delete_Basis
    __del__ = lambda self: None
Basis_swigregister = _hdff.Basis_swigregister
Basis_swigregister(Basis)


def __lshift__(os, basis):
    return _hdff.__lshift__(os, basis)
__lshift__ = _hdff.__lshift__
class DistributionHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_DistributionHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_DistributionHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.DistributionHandle_clone(self)
DistributionHandle_swigregister = _hdff.DistributionHandle_swigregister
DistributionHandle_swigregister(DistributionHandle)
DistributionHandle.sDefaultName = _hdff.cvar.DistributionHandle_sDefaultName

class HistogramHandle(DataBlockHandle):
    __swig_setmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistogramHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DataBlockHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistogramHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdff.new_HistogramHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdff.delete_HistogramHandle
    __del__ = lambda self: None

    def clone(self):
        return _hdff.HistogramHandle_clone(self)

    def add(self, handle):
        return _hdff.HistogramHandle_add(self, handle)
HistogramHandle_swigregister = _hdff.HistogramHandle_swigregister
HistogramHandle_swigregister(HistogramHandle)
HistogramHandle.sDefaultBasisName = _hdff.cvar.HistogramHandle_sDefaultBasisName

# This file is compatible with both classic and new-style classes.


