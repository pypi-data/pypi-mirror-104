# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class StructuredClassifyResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'boxes': 'list[list[float]]',
        'labels': 'list[str]',
        'scores': 'list[float]',
        'm_ap': 'float'
    }

    attribute_map = {
        'boxes': 'boxes',
        'labels': 'labels',
        'scores': 'scores',
        'm_ap': 'mAP'
    }

    def __init__(self, boxes=None, labels=None, scores=None, m_ap=None, local_vars_configuration=None):  # noqa: E501
        """StructuredClassifyResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._boxes = None
        self._labels = None
        self._scores = None
        self._m_ap = None
        self.discriminator = None

        if boxes is not None:
            self.boxes = boxes
        if labels is not None:
            self.labels = labels
        if scores is not None:
            self.scores = scores
        if m_ap is not None:
            self.m_ap = m_ap

    @property
    def boxes(self):
        """Gets the boxes of this StructuredClassifyResult.  # noqa: E501

        For object detection. An array of bounding box arrays, (x, y, width, height), one per detection in the image.  # noqa: E501

        :return: The boxes of this StructuredClassifyResult.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this StructuredClassifyResult.

        For object detection. An array of bounding box arrays, (x, y, width, height), one per detection in the image.  # noqa: E501

        :param boxes: The boxes of this StructuredClassifyResult.  # noqa: E501
        :type: list[list[float]]
        """

        self._boxes = boxes

    @property
    def labels(self):
        """Gets the labels of this StructuredClassifyResult.  # noqa: E501

        For object detection. An array of labels, one per detection in the image.  # noqa: E501

        :return: The labels of this StructuredClassifyResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this StructuredClassifyResult.

        For object detection. An array of labels, one per detection in the image.  # noqa: E501

        :param labels: The labels of this StructuredClassifyResult.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def scores(self):
        """Gets the scores of this StructuredClassifyResult.  # noqa: E501

        For object detection. An array of probability scores, one per detection in the image.  # noqa: E501

        :return: The scores of this StructuredClassifyResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this StructuredClassifyResult.

        For object detection. An array of probability scores, one per detection in the image.  # noqa: E501

        :param scores: The scores of this StructuredClassifyResult.  # noqa: E501
        :type: list[float]
        """

        self._scores = scores

    @property
    def m_ap(self):
        """Gets the m_ap of this StructuredClassifyResult.  # noqa: E501

        For object detection. A score that indicates accuracy compared to the ground truth, if available.  # noqa: E501

        :return: The m_ap of this StructuredClassifyResult.  # noqa: E501
        :rtype: float
        """
        return self._m_ap

    @m_ap.setter
    def m_ap(self, m_ap):
        """Sets the m_ap of this StructuredClassifyResult.

        For object detection. A score that indicates accuracy compared to the ground truth, if available.  # noqa: E501

        :param m_ap: The m_ap of this StructuredClassifyResult.  # noqa: E501
        :type: float
        """

        self._m_ap = m_ap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuredClassifyResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StructuredClassifyResult):
            return True

        return self.to_dict() != other.to_dict()
