# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class CreateUserRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'username': 'str',
        'email': 'str',
        'password': 'str',
        'project_name': 'str',
        'privacy_policy': 'bool',
        'evaluation': 'bool',
        'evaluation_project_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'username': 'username',
        'email': 'email',
        'password': 'password',
        'project_name': 'projectName',
        'privacy_policy': 'privacyPolicy',
        'evaluation': 'evaluation',
        'evaluation_project_type': 'evaluationProjectType'
    }

    def __init__(self, name=None, username=None, email=None, password=None, project_name=None, privacy_policy=None, evaluation=None, evaluation_project_type=None, local_vars_configuration=None):  # noqa: E501
        """CreateUserRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._username = None
        self._email = None
        self._password = None
        self._project_name = None
        self._privacy_policy = None
        self._evaluation = None
        self._evaluation_project_type = None
        self.discriminator = None

        self.name = name
        self.username = username
        self.email = email
        self.password = password
        if project_name is not None:
            self.project_name = project_name
        self.privacy_policy = privacy_policy
        self.evaluation = evaluation
        if evaluation_project_type is not None:
            self.evaluation_project_type = evaluation_project_type

    @property
    def name(self):
        """Gets the name of this CreateUserRequest.  # noqa: E501

        Your name  # noqa: E501

        :return: The name of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUserRequest.

        Your name  # noqa: E501

        :param name: The name of this CreateUserRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this CreateUserRequest.  # noqa: E501

        Username, minimum 4 and maximum 30 characters. May contain alphanumeric characters, hyphens, underscores and dots. Validated according to `^(?=.{4,30}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._-]+(?<![_.])$`.  # noqa: E501

        :return: The username of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserRequest.

        Username, minimum 4 and maximum 30 characters. May contain alphanumeric characters, hyphens, underscores and dots. Validated according to `^(?=.{4,30}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._-]+(?<![_.])$`.  # noqa: E501

        :param username: The username of this CreateUserRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self):
        """Gets the email of this CreateUserRequest.  # noqa: E501

        E-mail address. Will need to be validated before the account will become active.  # noqa: E501

        :return: The email of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserRequest.

        E-mail address. Will need to be validated before the account will become active.  # noqa: E501

        :param email: The email of this CreateUserRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this CreateUserRequest.  # noqa: E501

        Password, minimum length 8 characters.  # noqa: E501

        :return: The password of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserRequest.

        Password, minimum length 8 characters.  # noqa: E501

        :param password: The password of this CreateUserRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def project_name(self):
        """Gets the project_name of this CreateUserRequest.  # noqa: E501

        A project will automatically be created. Sets the name of the first project. If not set, this will be derived from the username.  # noqa: E501

        :return: The project_name of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateUserRequest.

        A project will automatically be created. Sets the name of the first project. If not set, this will be derived from the username.  # noqa: E501

        :param project_name: The project_name of this CreateUserRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this CreateUserRequest.  # noqa: E501

        Whether the user accepted the privacy policy  # noqa: E501

        :return: The privacy_policy of this CreateUserRequest.  # noqa: E501
        :rtype: bool
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this CreateUserRequest.

        Whether the user accepted the privacy policy  # noqa: E501

        :param privacy_policy: The privacy_policy of this CreateUserRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and privacy_policy is None:  # noqa: E501
            raise ValueError("Invalid value for `privacy_policy`, must not be `None`")  # noqa: E501

        self._privacy_policy = privacy_policy

    @property
    def evaluation(self):
        """Gets the evaluation of this CreateUserRequest.  # noqa: E501

        Whether this is an ephemeral evaluation account.  # noqa: E501

        :return: The evaluation of this CreateUserRequest.  # noqa: E501
        :rtype: bool
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this CreateUserRequest.

        Whether this is an ephemeral evaluation account.  # noqa: E501

        :param evaluation: The evaluation of this CreateUserRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and evaluation is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation`, must not be `None`")  # noqa: E501

        self._evaluation = evaluation

    @property
    def evaluation_project_type(self):
        """Gets the evaluation_project_type of this CreateUserRequest.  # noqa: E501

        Evaluation project type  # noqa: E501

        :return: The evaluation_project_type of this CreateUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_project_type

    @evaluation_project_type.setter
    def evaluation_project_type(self, evaluation_project_type):
        """Sets the evaluation_project_type of this CreateUserRequest.

        Evaluation project type  # noqa: E501

        :param evaluation_project_type: The evaluation_project_type of this CreateUserRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["motion", "audio", "visual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation_project_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation_project_type` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_project_type, allowed_values)
            )

        self._evaluation_project_type = evaluation_project_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUserRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUserRequest):
            return True

        return self.to_dict() != other.to_dict()
