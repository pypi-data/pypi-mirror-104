# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'error': 'str',
        'dependencies': 'DependencyData',
        'trained': 'bool',
        'name': 'str',
        'type': 'str',
        'script': 'str',
        'minimum_confidence_rating': 'float',
        'selected_model_type': 'KerasModelTypeEnum',
        'mode': 'str',
        'visual_layers': 'list[KerasVisualLayer]',
        'training_cycles': 'int',
        'learning_rate': 'float',
        'learning_rates': 'list[float]',
        'tuning_algorithm': 'str',
        'tuning_max_trials': 'float',
        'tuning_workers': 'float',
        'augmentation_policy_image': 'AugmentationPolicyImageEnum',
        'augmentation_policy_spectrogram': 'AugmentationPolicySpectrogram'
    }

    attribute_map = {
        'success': 'success',
        'error': 'error',
        'dependencies': 'dependencies',
        'trained': 'trained',
        'name': 'name',
        'type': 'type',
        'script': 'script',
        'minimum_confidence_rating': 'minimumConfidenceRating',
        'selected_model_type': 'selectedModelType',
        'mode': 'mode',
        'visual_layers': 'visualLayers',
        'training_cycles': 'trainingCycles',
        'learning_rate': 'learningRate',
        'learning_rates': 'learningRates',
        'tuning_algorithm': 'tuningAlgorithm',
        'tuning_max_trials': 'tuningMaxTrials',
        'tuning_workers': 'tuningWorkers',
        'augmentation_policy_image': 'augmentationPolicyImage',
        'augmentation_policy_spectrogram': 'augmentationPolicySpectrogram'
    }

    def __init__(self, success=None, error=None, dependencies=None, trained=None, name=None, type=None, script=None, minimum_confidence_rating=None, selected_model_type=None, mode=None, visual_layers=None, training_cycles=None, learning_rate=None, learning_rates=None, tuning_algorithm=None, tuning_max_trials=None, tuning_workers=None, augmentation_policy_image=None, augmentation_policy_spectrogram=None, local_vars_configuration=None):  # noqa: E501
        """KerasResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._error = None
        self._dependencies = None
        self._trained = None
        self._name = None
        self._type = None
        self._script = None
        self._minimum_confidence_rating = None
        self._selected_model_type = None
        self._mode = None
        self._visual_layers = None
        self._training_cycles = None
        self._learning_rate = None
        self._learning_rates = None
        self._tuning_algorithm = None
        self._tuning_max_trials = None
        self._tuning_workers = None
        self._augmentation_policy_image = None
        self._augmentation_policy_spectrogram = None
        self.discriminator = None

        self.success = success
        if error is not None:
            self.error = error
        self.dependencies = dependencies
        self.trained = trained
        self.name = name
        if type is not None:
            self.type = type
        self.script = script
        self.minimum_confidence_rating = minimum_confidence_rating
        self.selected_model_type = selected_model_type
        self.mode = mode
        self.visual_layers = visual_layers
        self.training_cycles = training_cycles
        self.learning_rate = learning_rate
        if learning_rates is not None:
            self.learning_rates = learning_rates
        if tuning_algorithm is not None:
            self.tuning_algorithm = tuning_algorithm
        if tuning_max_trials is not None:
            self.tuning_max_trials = tuning_max_trials
        if tuning_workers is not None:
            self.tuning_workers = tuning_workers
        self.augmentation_policy_image = augmentation_policy_image
        if augmentation_policy_spectrogram is not None:
            self.augmentation_policy_spectrogram = augmentation_policy_spectrogram

    @property
    def success(self):
        """Gets the success of this KerasResponse.  # noqa: E501

        Whether the operation succeeded  # noqa: E501

        :return: The success of this KerasResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this KerasResponse.

        Whether the operation succeeded  # noqa: E501

        :param success: The success of this KerasResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def error(self):
        """Gets the error of this KerasResponse.  # noqa: E501

        Optional error description (set if 'success' was false)  # noqa: E501

        :return: The error of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this KerasResponse.

        Optional error description (set if 'success' was false)  # noqa: E501

        :param error: The error of this KerasResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def dependencies(self):
        """Gets the dependencies of this KerasResponse.  # noqa: E501


        :return: The dependencies of this KerasResponse.  # noqa: E501
        :rtype: DependencyData
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this KerasResponse.


        :param dependencies: The dependencies of this KerasResponse.  # noqa: E501
        :type: DependencyData
        """
        if self.local_vars_configuration.client_side_validation and dependencies is None:  # noqa: E501
            raise ValueError("Invalid value for `dependencies`, must not be `None`")  # noqa: E501

        self._dependencies = dependencies

    @property
    def trained(self):
        """Gets the trained of this KerasResponse.  # noqa: E501

        Whether the block is trained  # noqa: E501

        :return: The trained of this KerasResponse.  # noqa: E501
        :rtype: bool
        """
        return self._trained

    @trained.setter
    def trained(self, trained):
        """Sets the trained of this KerasResponse.

        Whether the block is trained  # noqa: E501

        :param trained: The trained of this KerasResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and trained is None:  # noqa: E501
            raise ValueError("Invalid value for `trained`, must not be `None`")  # noqa: E501

        self._trained = trained

    @property
    def name(self):
        """Gets the name of this KerasResponse.  # noqa: E501


        :return: The name of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KerasResponse.


        :param name: The name of this KerasResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this KerasResponse.  # noqa: E501

        The type of Keras block (keras, keras-transfer-image, keras-object-detection, keras-regression). Each behaves differently.  # noqa: E501

        :return: The type of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KerasResponse.

        The type of Keras block (keras, keras-transfer-image, keras-object-detection, keras-regression). Each behaves differently.  # noqa: E501

        :param type: The type of this KerasResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["keras", "keras-transfer-image", "keras-object-detection", "keras-regression"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def script(self):
        """Gets the script of this KerasResponse.  # noqa: E501

        The Keras script. This script might be empty if the mode is visual.  # noqa: E501

        :return: The script of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this KerasResponse.

        The Keras script. This script might be empty if the mode is visual.  # noqa: E501

        :param script: The script of this KerasResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and script is None:  # noqa: E501
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script

    @property
    def minimum_confidence_rating(self):
        """Gets the minimum_confidence_rating of this KerasResponse.  # noqa: E501

        Minimum confidence rating required for the neural network. Scores below this confidence are tagged as uncertain.  # noqa: E501

        :return: The minimum_confidence_rating of this KerasResponse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_confidence_rating

    @minimum_confidence_rating.setter
    def minimum_confidence_rating(self, minimum_confidence_rating):
        """Sets the minimum_confidence_rating of this KerasResponse.

        Minimum confidence rating required for the neural network. Scores below this confidence are tagged as uncertain.  # noqa: E501

        :param minimum_confidence_rating: The minimum_confidence_rating of this KerasResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and minimum_confidence_rating is None:  # noqa: E501
            raise ValueError("Invalid value for `minimum_confidence_rating`, must not be `None`")  # noqa: E501

        self._minimum_confidence_rating = minimum_confidence_rating

    @property
    def selected_model_type(self):
        """Gets the selected_model_type of this KerasResponse.  # noqa: E501


        :return: The selected_model_type of this KerasResponse.  # noqa: E501
        :rtype: KerasModelTypeEnum
        """
        return self._selected_model_type

    @selected_model_type.setter
    def selected_model_type(self, selected_model_type):
        """Sets the selected_model_type of this KerasResponse.


        :param selected_model_type: The selected_model_type of this KerasResponse.  # noqa: E501
        :type: KerasModelTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and selected_model_type is None:  # noqa: E501
            raise ValueError("Invalid value for `selected_model_type`, must not be `None`")  # noqa: E501

        self._selected_model_type = selected_model_type

    @property
    def mode(self):
        """Gets the mode of this KerasResponse.  # noqa: E501

        The mode (visual or expert) to use for editing this network.  # noqa: E501

        :return: The mode of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this KerasResponse.

        The mode (visual or expert) to use for editing this network.  # noqa: E501

        :param mode: The mode of this KerasResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["visual", "expert"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def visual_layers(self):
        """Gets the visual_layers of this KerasResponse.  # noqa: E501

        The visual layers (if in visual mode) for the neural network. This will be an empty array when in expert mode.  # noqa: E501

        :return: The visual_layers of this KerasResponse.  # noqa: E501
        :rtype: list[KerasVisualLayer]
        """
        return self._visual_layers

    @visual_layers.setter
    def visual_layers(self, visual_layers):
        """Sets the visual_layers of this KerasResponse.

        The visual layers (if in visual mode) for the neural network. This will be an empty array when in expert mode.  # noqa: E501

        :param visual_layers: The visual_layers of this KerasResponse.  # noqa: E501
        :type: list[KerasVisualLayer]
        """
        if self.local_vars_configuration.client_side_validation and visual_layers is None:  # noqa: E501
            raise ValueError("Invalid value for `visual_layers`, must not be `None`")  # noqa: E501

        self._visual_layers = visual_layers

    @property
    def training_cycles(self):
        """Gets the training_cycles of this KerasResponse.  # noqa: E501

        Number of training cycles. If in expert mode this will be 0.  # noqa: E501

        :return: The training_cycles of this KerasResponse.  # noqa: E501
        :rtype: int
        """
        return self._training_cycles

    @training_cycles.setter
    def training_cycles(self, training_cycles):
        """Sets the training_cycles of this KerasResponse.

        Number of training cycles. If in expert mode this will be 0.  # noqa: E501

        :param training_cycles: The training_cycles of this KerasResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and training_cycles is None:  # noqa: E501
            raise ValueError("Invalid value for `training_cycles`, must not be `None`")  # noqa: E501

        self._training_cycles = training_cycles

    @property
    def learning_rate(self):
        """Gets the learning_rate of this KerasResponse.  # noqa: E501

        Learning rate (between 0 and 1). If in expert mode this will be 0.  # noqa: E501

        :return: The learning_rate of this KerasResponse.  # noqa: E501
        :rtype: float
        """
        return self._learning_rate

    @learning_rate.setter
    def learning_rate(self, learning_rate):
        """Sets the learning_rate of this KerasResponse.

        Learning rate (between 0 and 1). If in expert mode this will be 0.  # noqa: E501

        :param learning_rate: The learning_rate of this KerasResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and learning_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `learning_rate`, must not be `None`")  # noqa: E501

        self._learning_rate = learning_rate

    @property
    def learning_rates(self):
        """Gets the learning_rates of this KerasResponse.  # noqa: E501

        Possible learning rates (between 0 and 1).  # noqa: E501

        :return: The learning_rates of this KerasResponse.  # noqa: E501
        :rtype: list[float]
        """
        return self._learning_rates

    @learning_rates.setter
    def learning_rates(self, learning_rates):
        """Sets the learning_rates of this KerasResponse.

        Possible learning rates (between 0 and 1).  # noqa: E501

        :param learning_rates: The learning_rates of this KerasResponse.  # noqa: E501
        :type: list[float]
        """

        self._learning_rates = learning_rates

    @property
    def tuning_algorithm(self):
        """Gets the tuning_algorithm of this KerasResponse.  # noqa: E501

        Tuning algorithm to use to search hyperparameter space  # noqa: E501

        :return: The tuning_algorithm of this KerasResponse.  # noqa: E501
        :rtype: str
        """
        return self._tuning_algorithm

    @tuning_algorithm.setter
    def tuning_algorithm(self, tuning_algorithm):
        """Sets the tuning_algorithm of this KerasResponse.

        Tuning algorithm to use to search hyperparameter space  # noqa: E501

        :param tuning_algorithm: The tuning_algorithm of this KerasResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["random", "hyperband", "bayesian"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tuning_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tuning_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(tuning_algorithm, allowed_values)
            )

        self._tuning_algorithm = tuning_algorithm

    @property
    def tuning_max_trials(self):
        """Gets the tuning_max_trials of this KerasResponse.  # noqa: E501

        Total number of trials (model configurations) to test at most.  # noqa: E501

        :return: The tuning_max_trials of this KerasResponse.  # noqa: E501
        :rtype: float
        """
        return self._tuning_max_trials

    @tuning_max_trials.setter
    def tuning_max_trials(self, tuning_max_trials):
        """Sets the tuning_max_trials of this KerasResponse.

        Total number of trials (model configurations) to test at most.  # noqa: E501

        :param tuning_max_trials: The tuning_max_trials of this KerasResponse.  # noqa: E501
        :type: float
        """

        self._tuning_max_trials = tuning_max_trials

    @property
    def tuning_workers(self):
        """Gets the tuning_workers of this KerasResponse.  # noqa: E501

        Number of parallel workers used for tuning  # noqa: E501

        :return: The tuning_workers of this KerasResponse.  # noqa: E501
        :rtype: float
        """
        return self._tuning_workers

    @tuning_workers.setter
    def tuning_workers(self, tuning_workers):
        """Sets the tuning_workers of this KerasResponse.

        Number of parallel workers used for tuning  # noqa: E501

        :param tuning_workers: The tuning_workers of this KerasResponse.  # noqa: E501
        :type: float
        """

        self._tuning_workers = tuning_workers

    @property
    def augmentation_policy_image(self):
        """Gets the augmentation_policy_image of this KerasResponse.  # noqa: E501


        :return: The augmentation_policy_image of this KerasResponse.  # noqa: E501
        :rtype: AugmentationPolicyImageEnum
        """
        return self._augmentation_policy_image

    @augmentation_policy_image.setter
    def augmentation_policy_image(self, augmentation_policy_image):
        """Sets the augmentation_policy_image of this KerasResponse.


        :param augmentation_policy_image: The augmentation_policy_image of this KerasResponse.  # noqa: E501
        :type: AugmentationPolicyImageEnum
        """
        if self.local_vars_configuration.client_side_validation and augmentation_policy_image is None:  # noqa: E501
            raise ValueError("Invalid value for `augmentation_policy_image`, must not be `None`")  # noqa: E501

        self._augmentation_policy_image = augmentation_policy_image

    @property
    def augmentation_policy_spectrogram(self):
        """Gets the augmentation_policy_spectrogram of this KerasResponse.  # noqa: E501


        :return: The augmentation_policy_spectrogram of this KerasResponse.  # noqa: E501
        :rtype: AugmentationPolicySpectrogram
        """
        return self._augmentation_policy_spectrogram

    @augmentation_policy_spectrogram.setter
    def augmentation_policy_spectrogram(self, augmentation_policy_spectrogram):
        """Sets the augmentation_policy_spectrogram of this KerasResponse.


        :param augmentation_policy_spectrogram: The augmentation_policy_spectrogram of this KerasResponse.  # noqa: E501
        :type: AugmentationPolicySpectrogram
        """

        self._augmentation_policy_spectrogram = augmentation_policy_spectrogram

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasResponse):
            return True

        return self.to_dict() != other.to_dict()
