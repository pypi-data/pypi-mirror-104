# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'username': 'str',
        'name': 'str',
        'photo': 'str',
        'created': 'datetime',
        'added': 'datetime',
        'email': 'str',
        'role': 'str',
        'is_edge_impulse_staff': 'bool',
        'project_count': 'float',
        'datasets': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'name': 'name',
        'photo': 'photo',
        'created': 'created',
        'added': 'added',
        'email': 'email',
        'role': 'role',
        'is_edge_impulse_staff': 'isEdgeImpulseStaff',
        'project_count': 'projectCount',
        'datasets': 'datasets'
    }

    def __init__(self, id=None, username=None, name=None, photo=None, created=None, added=None, email=None, role=None, is_edge_impulse_staff=None, project_count=None, datasets=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._name = None
        self._photo = None
        self._created = None
        self._added = None
        self._email = None
        self._role = None
        self._is_edge_impulse_staff = None
        self._project_count = None
        self._datasets = None
        self.discriminator = None

        self.id = id
        self.username = username
        self.name = name
        if photo is not None:
            self.photo = photo
        self.created = created
        self.added = added
        self.email = email
        self.role = role
        self.is_edge_impulse_staff = is_edge_impulse_staff
        self.project_count = project_count
        self.datasets = datasets

    @property
    def id(self):
        """Gets the id of this OrganizationUser.  # noqa: E501


        :return: The id of this OrganizationUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationUser.


        :param id: The id of this OrganizationUser.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self):
        """Gets the username of this OrganizationUser.  # noqa: E501


        :return: The username of this OrganizationUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrganizationUser.


        :param username: The username of this OrganizationUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self):
        """Gets the name of this OrganizationUser.  # noqa: E501


        :return: The name of this OrganizationUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationUser.


        :param name: The name of this OrganizationUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def photo(self):
        """Gets the photo of this OrganizationUser.  # noqa: E501


        :return: The photo of this OrganizationUser.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this OrganizationUser.


        :param photo: The photo of this OrganizationUser.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def created(self):
        """Gets the created of this OrganizationUser.  # noqa: E501


        :return: The created of this OrganizationUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrganizationUser.


        :param created: The created of this OrganizationUser.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def added(self):
        """Gets the added of this OrganizationUser.  # noqa: E501


        :return: The added of this OrganizationUser.  # noqa: E501
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this OrganizationUser.


        :param added: The added of this OrganizationUser.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and added is None:  # noqa: E501
            raise ValueError("Invalid value for `added`, must not be `None`")  # noqa: E501

        self._added = added

    @property
    def email(self):
        """Gets the email of this OrganizationUser.  # noqa: E501


        :return: The email of this OrganizationUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationUser.


        :param email: The email of this OrganizationUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this OrganizationUser.  # noqa: E501


        :return: The role of this OrganizationUser.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationUser.


        :param role: The role of this OrganizationUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role is None:  # noqa: E501
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["admin", "member", "guest"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def is_edge_impulse_staff(self):
        """Gets the is_edge_impulse_staff of this OrganizationUser.  # noqa: E501


        :return: The is_edge_impulse_staff of this OrganizationUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_edge_impulse_staff

    @is_edge_impulse_staff.setter
    def is_edge_impulse_staff(self, is_edge_impulse_staff):
        """Sets the is_edge_impulse_staff of this OrganizationUser.


        :param is_edge_impulse_staff: The is_edge_impulse_staff of this OrganizationUser.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_edge_impulse_staff is None:  # noqa: E501
            raise ValueError("Invalid value for `is_edge_impulse_staff`, must not be `None`")  # noqa: E501

        self._is_edge_impulse_staff = is_edge_impulse_staff

    @property
    def project_count(self):
        """Gets the project_count of this OrganizationUser.  # noqa: E501


        :return: The project_count of this OrganizationUser.  # noqa: E501
        :rtype: float
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this OrganizationUser.


        :param project_count: The project_count of this OrganizationUser.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and project_count is None:  # noqa: E501
            raise ValueError("Invalid value for `project_count`, must not be `None`")  # noqa: E501

        self._project_count = project_count

    @property
    def datasets(self):
        """Gets the datasets of this OrganizationUser.  # noqa: E501


        :return: The datasets of this OrganizationUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this OrganizationUser.


        :param datasets: The datasets of this OrganizationUser.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and datasets is None:  # noqa: E501
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501

        self._datasets = datasets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationUser):
            return True

        return self.to_dict() != other.to_dict()
