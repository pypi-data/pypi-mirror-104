# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class Note(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'note': 'str',
        'user_id': 'int',
        'parent_id': 'int',
        'created': 'datetime',
        'user_name': 'str',
        'user_photo': 'str'
    }

    attribute_map = {
        'id': 'id',
        'note': 'note',
        'user_id': 'userId',
        'parent_id': 'parentId',
        'created': 'created',
        'user_name': 'userName',
        'user_photo': 'userPhoto'
    }

    def __init__(self, id=None, note=None, user_id=None, parent_id=None, created=None, user_name=None, user_photo=None, local_vars_configuration=None):  # noqa: E501
        """Note - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._note = None
        self._user_id = None
        self._parent_id = None
        self._created = None
        self._user_name = None
        self._user_photo = None
        self.discriminator = None

        self.id = id
        self.note = note
        if user_id is not None:
            self.user_id = user_id
        if parent_id is not None:
            self.parent_id = parent_id
        self.created = created
        if user_name is not None:
            self.user_name = user_name
        if user_photo is not None:
            self.user_photo = user_photo

    @property
    def id(self):
        """Gets the id of this Note.  # noqa: E501


        :return: The id of this Note.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.


        :param id: The id of this Note.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def note(self):
        """Gets the note of this Note.  # noqa: E501


        :return: The note of this Note.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Note.


        :param note: The note of this Note.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and note is None:  # noqa: E501
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def user_id(self):
        """Gets the user_id of this Note.  # noqa: E501


        :return: The user_id of this Note.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Note.


        :param user_id: The user_id of this Note.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Note.  # noqa: E501

        If the note is a response to a previous note, this value holds the Id of that note  # noqa: E501

        :return: The parent_id of this Note.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Note.

        If the note is a response to a previous note, this value holds the Id of that note  # noqa: E501

        :param parent_id: The parent_id of this Note.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def created(self):
        """Gets the created of this Note.  # noqa: E501

        Timestamp when the note was created  # noqa: E501

        :return: The created of this Note.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Note.

        Timestamp when the note was created  # noqa: E501

        :param created: The created of this Note.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def user_name(self):
        """Gets the user_name of this Note.  # noqa: E501

        Name of the user that created the note  # noqa: E501

        :return: The user_name of this Note.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Note.

        Name of the user that created the note  # noqa: E501

        :param user_name: The user_name of this Note.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_photo(self):
        """Gets the user_photo of this Note.  # noqa: E501

        Photo of the user that created the note  # noqa: E501

        :return: The user_photo of this Note.  # noqa: E501
        :rtype: str
        """
        return self._user_photo

    @user_photo.setter
    def user_photo(self, user_photo):
        """Sets the user_photo of this Note.

        Photo of the user that created the note  # noqa: E501

        :param user_photo: The user_photo of this Note.  # noqa: E501
        :type: str
        """

        self._user_photo = user_photo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Note):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Note):
            return True

        return self.to_dict() != other.to_dict()
