# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class AugmentationPolicySpectrogram(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'warping': 'bool',
        'freq_masking': 'str',
        'time_masking': 'str',
        'gaussian_noise': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'warping': 'warping',
        'freq_masking': 'freqMasking',
        'time_masking': 'timeMasking',
        'gaussian_noise': 'gaussianNoise'
    }

    def __init__(self, enabled=None, warping=None, freq_masking=None, time_masking=None, gaussian_noise=None, local_vars_configuration=None):  # noqa: E501
        """AugmentationPolicySpectrogram - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._warping = None
        self._freq_masking = None
        self._time_masking = None
        self._gaussian_noise = None
        self.discriminator = None

        self.enabled = enabled
        if warping is not None:
            self.warping = warping
        if freq_masking is not None:
            self.freq_masking = freq_masking
        if time_masking is not None:
            self.time_masking = time_masking
        if gaussian_noise is not None:
            self.gaussian_noise = gaussian_noise

    @property
    def enabled(self):
        """Gets the enabled of this AugmentationPolicySpectrogram.  # noqa: E501

        True if spectrogram augmentation is enabled. Other properties will be ignored if this is false.  # noqa: E501

        :return: The enabled of this AugmentationPolicySpectrogram.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AugmentationPolicySpectrogram.

        True if spectrogram augmentation is enabled. Other properties will be ignored if this is false.  # noqa: E501

        :param enabled: The enabled of this AugmentationPolicySpectrogram.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def warping(self):
        """Gets the warping of this AugmentationPolicySpectrogram.  # noqa: E501

        True if warping along the time axis is enabled.  # noqa: E501

        :return: The warping of this AugmentationPolicySpectrogram.  # noqa: E501
        :rtype: bool
        """
        return self._warping

    @warping.setter
    def warping(self, warping):
        """Sets the warping of this AugmentationPolicySpectrogram.

        True if warping along the time axis is enabled.  # noqa: E501

        :param warping: The warping of this AugmentationPolicySpectrogram.  # noqa: E501
        :type: bool
        """

        self._warping = warping

    @property
    def freq_masking(self):
        """Gets the freq_masking of this AugmentationPolicySpectrogram.  # noqa: E501

        The amount of frequency masking to apply.  # noqa: E501

        :return: The freq_masking of this AugmentationPolicySpectrogram.  # noqa: E501
        :rtype: str
        """
        return self._freq_masking

    @freq_masking.setter
    def freq_masking(self, freq_masking):
        """Sets the freq_masking of this AugmentationPolicySpectrogram.

        The amount of frequency masking to apply.  # noqa: E501

        :param freq_masking: The freq_masking of this AugmentationPolicySpectrogram.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "low", "high"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and freq_masking not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `freq_masking` ({0}), must be one of {1}"  # noqa: E501
                .format(freq_masking, allowed_values)
            )

        self._freq_masking = freq_masking

    @property
    def time_masking(self):
        """Gets the time_masking of this AugmentationPolicySpectrogram.  # noqa: E501

        The amount of time masking to apply.  # noqa: E501

        :return: The time_masking of this AugmentationPolicySpectrogram.  # noqa: E501
        :rtype: str
        """
        return self._time_masking

    @time_masking.setter
    def time_masking(self, time_masking):
        """Sets the time_masking of this AugmentationPolicySpectrogram.

        The amount of time masking to apply.  # noqa: E501

        :param time_masking: The time_masking of this AugmentationPolicySpectrogram.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "low", "high"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_masking not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `time_masking` ({0}), must be one of {1}"  # noqa: E501
                .format(time_masking, allowed_values)
            )

        self._time_masking = time_masking

    @property
    def gaussian_noise(self):
        """Gets the gaussian_noise of this AugmentationPolicySpectrogram.  # noqa: E501

        The amount of Gaussian noise to add.  # noqa: E501

        :return: The gaussian_noise of this AugmentationPolicySpectrogram.  # noqa: E501
        :rtype: str
        """
        return self._gaussian_noise

    @gaussian_noise.setter
    def gaussian_noise(self, gaussian_noise):
        """Sets the gaussian_noise of this AugmentationPolicySpectrogram.

        The amount of Gaussian noise to add.  # noqa: E501

        :param gaussian_noise: The gaussian_noise of this AugmentationPolicySpectrogram.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "low", "high"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gaussian_noise not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gaussian_noise` ({0}), must be one of {1}"  # noqa: E501
                .format(gaussian_noise, allowed_values)
            )

        self._gaussian_noise = gaussian_noise

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AugmentationPolicySpectrogram):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AugmentationPolicySpectrogram):
            return True

        return self.to_dict() != other.to_dict()
