# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ClassifySampleResponseClassification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'learn_block': 'ImpulseLearnBlock',
        'result': 'list[dict(str, float)]',
        'structured_result': 'list[StructuredClassifyResult]',
        'minimum_confidence_rating': 'float',
        'maximum_regression_error': 'float',
        'details': 'list[ClassifySampleResponseClassificationDetails]'
    }

    attribute_map = {
        'learn_block': 'learnBlock',
        'result': 'result',
        'structured_result': 'structuredResult',
        'minimum_confidence_rating': 'minimumConfidenceRating',
        'maximum_regression_error': 'maximumRegressionError',
        'details': 'details'
    }

    def __init__(self, learn_block=None, result=None, structured_result=None, minimum_confidence_rating=None, maximum_regression_error=None, details=None, local_vars_configuration=None):  # noqa: E501
        """ClassifySampleResponseClassification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._learn_block = None
        self._result = None
        self._structured_result = None
        self._minimum_confidence_rating = None
        self._maximum_regression_error = None
        self._details = None
        self.discriminator = None

        self.learn_block = learn_block
        self.result = result
        if structured_result is not None:
            self.structured_result = structured_result
        self.minimum_confidence_rating = minimum_confidence_rating
        self.maximum_regression_error = maximum_regression_error
        if details is not None:
            self.details = details

    @property
    def learn_block(self):
        """Gets the learn_block of this ClassifySampleResponseClassification.  # noqa: E501


        :return: The learn_block of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: ImpulseLearnBlock
        """
        return self._learn_block

    @learn_block.setter
    def learn_block(self, learn_block):
        """Sets the learn_block of this ClassifySampleResponseClassification.


        :param learn_block: The learn_block of this ClassifySampleResponseClassification.  # noqa: E501
        :type: ImpulseLearnBlock
        """
        if self.local_vars_configuration.client_side_validation and learn_block is None:  # noqa: E501
            raise ValueError("Invalid value for `learn_block`, must not be `None`")  # noqa: E501

        self._learn_block = learn_block

    @property
    def result(self):
        """Gets the result of this ClassifySampleResponseClassification.  # noqa: E501

        Classification result, one item per window.  # noqa: E501

        :return: The result of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: list[dict(str, float)]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ClassifySampleResponseClassification.

        Classification result, one item per window.  # noqa: E501

        :param result: The result of this ClassifySampleResponseClassification.  # noqa: E501
        :type: list[dict(str, float)]
        """
        if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def structured_result(self):
        """Gets the structured_result of this ClassifySampleResponseClassification.  # noqa: E501

        Results of inferencing that returns structured data, such as object detection  # noqa: E501

        :return: The structured_result of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: list[StructuredClassifyResult]
        """
        return self._structured_result

    @structured_result.setter
    def structured_result(self, structured_result):
        """Sets the structured_result of this ClassifySampleResponseClassification.

        Results of inferencing that returns structured data, such as object detection  # noqa: E501

        :param structured_result: The structured_result of this ClassifySampleResponseClassification.  # noqa: E501
        :type: list[StructuredClassifyResult]
        """

        self._structured_result = structured_result

    @property
    def minimum_confidence_rating(self):
        """Gets the minimum_confidence_rating of this ClassifySampleResponseClassification.  # noqa: E501

        The minimum confidence rating for this block  # noqa: E501

        :return: The minimum_confidence_rating of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: float
        """
        return self._minimum_confidence_rating

    @minimum_confidence_rating.setter
    def minimum_confidence_rating(self, minimum_confidence_rating):
        """Sets the minimum_confidence_rating of this ClassifySampleResponseClassification.

        The minimum confidence rating for this block  # noqa: E501

        :param minimum_confidence_rating: The minimum_confidence_rating of this ClassifySampleResponseClassification.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and minimum_confidence_rating is None:  # noqa: E501
            raise ValueError("Invalid value for `minimum_confidence_rating`, must not be `None`")  # noqa: E501

        self._minimum_confidence_rating = minimum_confidence_rating

    @property
    def maximum_regression_error(self):
        """Gets the maximum_regression_error of this ClassifySampleResponseClassification.  # noqa: E501

        The maximum error for regression models (only set when the learn block is of type 'keras-regression', otherwise 0)  # noqa: E501

        :return: The maximum_regression_error of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: float
        """
        return self._maximum_regression_error

    @maximum_regression_error.setter
    def maximum_regression_error(self, maximum_regression_error):
        """Sets the maximum_regression_error of this ClassifySampleResponseClassification.

        The maximum error for regression models (only set when the learn block is of type 'keras-regression', otherwise 0)  # noqa: E501

        :param maximum_regression_error: The maximum_regression_error of this ClassifySampleResponseClassification.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and maximum_regression_error is None:  # noqa: E501
            raise ValueError("Invalid value for `maximum_regression_error`, must not be `None`")  # noqa: E501

        self._maximum_regression_error = maximum_regression_error

    @property
    def details(self):
        """Gets the details of this ClassifySampleResponseClassification.  # noqa: E501

        Structured outputs and computed metrics for some model types (e.g. object detection), one item per window.  # noqa: E501

        :return: The details of this ClassifySampleResponseClassification.  # noqa: E501
        :rtype: list[ClassifySampleResponseClassificationDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ClassifySampleResponseClassification.

        Structured outputs and computed metrics for some model types (e.g. object detection), one item per window.  # noqa: E501

        :param details: The details of this ClassifySampleResponseClassification.  # noqa: E501
        :type: list[ClassifySampleResponseClassificationDetails]
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassifySampleResponseClassification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassifySampleResponseClassification):
            return True

        return self.to_dict() != other.to_dict()
