# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ModelVariantStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_type': 'KerasModelTypeEnum',
        'learn_block_id': 'float',
        'learn_block_type': 'str',
        'confusion_matrix': 'dict(str, dict(str, EvaluateResultValue))',
        'training_labels': 'list[str]',
        'classification_labels': 'list[str]',
        'total_window_count': 'float',
        'total_correct_window_count': 'EvaluateResultValue',
        'accuracy': 'EvaluateResultValue'
    }

    attribute_map = {
        'model_type': 'modelType',
        'learn_block_id': 'learnBlockId',
        'learn_block_type': 'learnBlockType',
        'confusion_matrix': 'confusionMatrix',
        'training_labels': 'trainingLabels',
        'classification_labels': 'classificationLabels',
        'total_window_count': 'totalWindowCount',
        'total_correct_window_count': 'totalCorrectWindowCount',
        'accuracy': 'accuracy'
    }

    def __init__(self, model_type=None, learn_block_id=None, learn_block_type=None, confusion_matrix=None, training_labels=None, classification_labels=None, total_window_count=None, total_correct_window_count=None, accuracy=None, local_vars_configuration=None):  # noqa: E501
        """ModelVariantStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_type = None
        self._learn_block_id = None
        self._learn_block_type = None
        self._confusion_matrix = None
        self._training_labels = None
        self._classification_labels = None
        self._total_window_count = None
        self._total_correct_window_count = None
        self._accuracy = None
        self.discriminator = None

        self.model_type = model_type
        self.learn_block_id = learn_block_id
        self.learn_block_type = learn_block_type
        self.confusion_matrix = confusion_matrix
        self.training_labels = training_labels
        self.classification_labels = classification_labels
        if total_window_count is not None:
            self.total_window_count = total_window_count
        if total_correct_window_count is not None:
            self.total_correct_window_count = total_correct_window_count
        self.accuracy = accuracy

    @property
    def model_type(self):
        """Gets the model_type of this ModelVariantStats.  # noqa: E501


        :return: The model_type of this ModelVariantStats.  # noqa: E501
        :rtype: KerasModelTypeEnum
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ModelVariantStats.


        :param model_type: The model_type of this ModelVariantStats.  # noqa: E501
        :type: KerasModelTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and model_type is None:  # noqa: E501
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def learn_block_id(self):
        """Gets the learn_block_id of this ModelVariantStats.  # noqa: E501

        The learning block this model variant is from  # noqa: E501

        :return: The learn_block_id of this ModelVariantStats.  # noqa: E501
        :rtype: float
        """
        return self._learn_block_id

    @learn_block_id.setter
    def learn_block_id(self, learn_block_id):
        """Sets the learn_block_id of this ModelVariantStats.

        The learning block this model variant is from  # noqa: E501

        :param learn_block_id: The learn_block_id of this ModelVariantStats.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and learn_block_id is None:  # noqa: E501
            raise ValueError("Invalid value for `learn_block_id`, must not be `None`")  # noqa: E501

        self._learn_block_id = learn_block_id

    @property
    def learn_block_type(self):
        """Gets the learn_block_type of this ModelVariantStats.  # noqa: E501

        Learn block type  # noqa: E501

        :return: The learn_block_type of this ModelVariantStats.  # noqa: E501
        :rtype: str
        """
        return self._learn_block_type

    @learn_block_type.setter
    def learn_block_type(self, learn_block_type):
        """Sets the learn_block_type of this ModelVariantStats.

        Learn block type  # noqa: E501

        :param learn_block_type: The learn_block_type of this ModelVariantStats.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and learn_block_type is None:  # noqa: E501
            raise ValueError("Invalid value for `learn_block_type`, must not be `None`")  # noqa: E501
        allowed_values = ["keras", "keras-transfer-image", "keras-object-detection", "keras-regression"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and learn_block_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `learn_block_type` ({0}), must be one of {1}"  # noqa: E501
                .format(learn_block_type, allowed_values)
            )

        self._learn_block_type = learn_block_type

    @property
    def confusion_matrix(self):
        """Gets the confusion_matrix of this ModelVariantStats.  # noqa: E501

        A map from actual labels to predicted labels, where actual labels are listed in `trainingLabels` and possible predicted labels are listed in `classificationLabels`.  # noqa: E501

        :return: The confusion_matrix of this ModelVariantStats.  # noqa: E501
        :rtype: dict(str, dict(str, EvaluateResultValue))
        """
        return self._confusion_matrix

    @confusion_matrix.setter
    def confusion_matrix(self, confusion_matrix):
        """Sets the confusion_matrix of this ModelVariantStats.

        A map from actual labels to predicted labels, where actual labels are listed in `trainingLabels` and possible predicted labels are listed in `classificationLabels`.  # noqa: E501

        :param confusion_matrix: The confusion_matrix of this ModelVariantStats.  # noqa: E501
        :type: dict(str, dict(str, EvaluateResultValue))
        """
        if self.local_vars_configuration.client_side_validation and confusion_matrix is None:  # noqa: E501
            raise ValueError("Invalid value for `confusion_matrix`, must not be `None`")  # noqa: E501

        self._confusion_matrix = confusion_matrix

    @property
    def training_labels(self):
        """Gets the training_labels of this ModelVariantStats.  # noqa: E501

        The labels present in the model's training data. These are all present in the first dimension of the confusion matrix.  # noqa: E501

        :return: The training_labels of this ModelVariantStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._training_labels

    @training_labels.setter
    def training_labels(self, training_labels):
        """Sets the training_labels of this ModelVariantStats.

        The labels present in the model's training data. These are all present in the first dimension of the confusion matrix.  # noqa: E501

        :param training_labels: The training_labels of this ModelVariantStats.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and training_labels is None:  # noqa: E501
            raise ValueError("Invalid value for `training_labels`, must not be `None`")  # noqa: E501

        self._training_labels = training_labels

    @property
    def classification_labels(self):
        """Gets the classification_labels of this ModelVariantStats.  # noqa: E501

        The possible labels resulting from classification. These may be present in the second dimension of the confusion matrix.  # noqa: E501

        :return: The classification_labels of this ModelVariantStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._classification_labels

    @classification_labels.setter
    def classification_labels(self, classification_labels):
        """Sets the classification_labels of this ModelVariantStats.

        The possible labels resulting from classification. These may be present in the second dimension of the confusion matrix.  # noqa: E501

        :param classification_labels: The classification_labels of this ModelVariantStats.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and classification_labels is None:  # noqa: E501
            raise ValueError("Invalid value for `classification_labels`, must not be `None`")  # noqa: E501

        self._classification_labels = classification_labels

    @property
    def total_window_count(self):
        """Gets the total_window_count of this ModelVariantStats.  # noqa: E501

        The total number of windows that were evaluated  # noqa: E501

        :return: The total_window_count of this ModelVariantStats.  # noqa: E501
        :rtype: float
        """
        return self._total_window_count

    @total_window_count.setter
    def total_window_count(self, total_window_count):
        """Sets the total_window_count of this ModelVariantStats.

        The total number of windows that were evaluated  # noqa: E501

        :param total_window_count: The total_window_count of this ModelVariantStats.  # noqa: E501
        :type: float
        """

        self._total_window_count = total_window_count

    @property
    def total_correct_window_count(self):
        """Gets the total_correct_window_count of this ModelVariantStats.  # noqa: E501


        :return: The total_correct_window_count of this ModelVariantStats.  # noqa: E501
        :rtype: EvaluateResultValue
        """
        return self._total_correct_window_count

    @total_correct_window_count.setter
    def total_correct_window_count(self, total_correct_window_count):
        """Sets the total_correct_window_count of this ModelVariantStats.


        :param total_correct_window_count: The total_correct_window_count of this ModelVariantStats.  # noqa: E501
        :type: EvaluateResultValue
        """

        self._total_correct_window_count = total_correct_window_count

    @property
    def accuracy(self):
        """Gets the accuracy of this ModelVariantStats.  # noqa: E501


        :return: The accuracy of this ModelVariantStats.  # noqa: E501
        :rtype: EvaluateResultValue
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this ModelVariantStats.


        :param accuracy: The accuracy of this ModelVariantStats.  # noqa: E501
        :type: EvaluateResultValue
        """
        if self.local_vars_configuration.client_side_validation and accuracy is None:  # noqa: E501
            raise ValueError("Invalid value for `accuracy`, must not be `None`")  # noqa: E501

        self._accuracy = accuracy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelVariantStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelVariantStats):
            return True

        return self.to_dict() != other.to_dict()
