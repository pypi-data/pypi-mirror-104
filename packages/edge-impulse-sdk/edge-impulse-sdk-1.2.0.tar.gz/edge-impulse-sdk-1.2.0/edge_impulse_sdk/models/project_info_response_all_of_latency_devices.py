# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ProjectInfoResponseAllOfLatencyDevices(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mcu': 'str',
        'name': 'str',
        'selected': 'bool',
        'int8_latency': 'float',
        'int8_conv_latency': 'float',
        'float32_latency': 'float',
        'float32_conv_latency': 'float'
    }

    attribute_map = {
        'mcu': 'mcu',
        'name': 'name',
        'selected': 'selected',
        'int8_latency': 'int8Latency',
        'int8_conv_latency': 'int8ConvLatency',
        'float32_latency': 'float32Latency',
        'float32_conv_latency': 'float32ConvLatency'
    }

    def __init__(self, mcu=None, name=None, selected=None, int8_latency=None, int8_conv_latency=None, float32_latency=None, float32_conv_latency=None, local_vars_configuration=None):  # noqa: E501
        """ProjectInfoResponseAllOfLatencyDevices - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mcu = None
        self._name = None
        self._selected = None
        self._int8_latency = None
        self._int8_conv_latency = None
        self._float32_latency = None
        self._float32_conv_latency = None
        self.discriminator = None

        self.mcu = mcu
        self.name = name
        self.selected = selected
        self.int8_latency = int8_latency
        self.int8_conv_latency = int8_conv_latency
        self.float32_latency = float32_latency
        self.float32_conv_latency = float32_conv_latency

    @property
    def mcu(self):
        """Gets the mcu of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The mcu of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: str
        """
        return self._mcu

    @mcu.setter
    def mcu(self, mcu):
        """Sets the mcu of this ProjectInfoResponseAllOfLatencyDevices.


        :param mcu: The mcu of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mcu is None:  # noqa: E501
            raise ValueError("Invalid value for `mcu`, must not be `None`")  # noqa: E501

        self._mcu = mcu

    @property
    def name(self):
        """Gets the name of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The name of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectInfoResponseAllOfLatencyDevices.


        :param name: The name of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def selected(self):
        """Gets the selected of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The selected of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this ProjectInfoResponseAllOfLatencyDevices.


        :param selected: The selected of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and selected is None:  # noqa: E501
            raise ValueError("Invalid value for `selected`, must not be `None`")  # noqa: E501

        self._selected = selected

    @property
    def int8_latency(self):
        """Gets the int8_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The int8_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: float
        """
        return self._int8_latency

    @int8_latency.setter
    def int8_latency(self, int8_latency):
        """Sets the int8_latency of this ProjectInfoResponseAllOfLatencyDevices.


        :param int8_latency: The int8_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and int8_latency is None:  # noqa: E501
            raise ValueError("Invalid value for `int8_latency`, must not be `None`")  # noqa: E501

        self._int8_latency = int8_latency

    @property
    def int8_conv_latency(self):
        """Gets the int8_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The int8_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: float
        """
        return self._int8_conv_latency

    @int8_conv_latency.setter
    def int8_conv_latency(self, int8_conv_latency):
        """Sets the int8_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.


        :param int8_conv_latency: The int8_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and int8_conv_latency is None:  # noqa: E501
            raise ValueError("Invalid value for `int8_conv_latency`, must not be `None`")  # noqa: E501

        self._int8_conv_latency = int8_conv_latency

    @property
    def float32_latency(self):
        """Gets the float32_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The float32_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: float
        """
        return self._float32_latency

    @float32_latency.setter
    def float32_latency(self, float32_latency):
        """Sets the float32_latency of this ProjectInfoResponseAllOfLatencyDevices.


        :param float32_latency: The float32_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and float32_latency is None:  # noqa: E501
            raise ValueError("Invalid value for `float32_latency`, must not be `None`")  # noqa: E501

        self._float32_latency = float32_latency

    @property
    def float32_conv_latency(self):
        """Gets the float32_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501


        :return: The float32_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :rtype: float
        """
        return self._float32_conv_latency

    @float32_conv_latency.setter
    def float32_conv_latency(self, float32_conv_latency):
        """Sets the float32_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.


        :param float32_conv_latency: The float32_conv_latency of this ProjectInfoResponseAllOfLatencyDevices.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and float32_conv_latency is None:  # noqa: E501
            raise ValueError("Invalid value for `float32_conv_latency`, must not be `None`")  # noqa: E501

        self._float32_conv_latency = float32_conv_latency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfoResponseAllOfLatencyDevices):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectInfoResponseAllOfLatencyDevices):
            return True

        return self.to_dict() != other.to_dict()
