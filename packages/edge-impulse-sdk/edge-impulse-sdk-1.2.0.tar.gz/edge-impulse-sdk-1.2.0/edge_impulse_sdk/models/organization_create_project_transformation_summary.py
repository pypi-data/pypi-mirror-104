# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationCreateProjectTransformationSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'started_count': 'float',
        'succeeded_count': 'float',
        'finished_count': 'float',
        'total_file_count': 'float'
    }

    attribute_map = {
        'started_count': 'startedCount',
        'succeeded_count': 'succeededCount',
        'finished_count': 'finishedCount',
        'total_file_count': 'totalFileCount'
    }

    def __init__(self, started_count=None, succeeded_count=None, finished_count=None, total_file_count=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationCreateProjectTransformationSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._started_count = None
        self._succeeded_count = None
        self._finished_count = None
        self._total_file_count = None
        self.discriminator = None

        self.started_count = started_count
        self.succeeded_count = succeeded_count
        self.finished_count = finished_count
        self.total_file_count = total_file_count

    @property
    def started_count(self):
        """Gets the started_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501


        :return: The started_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :rtype: float
        """
        return self._started_count

    @started_count.setter
    def started_count(self, started_count):
        """Sets the started_count of this OrganizationCreateProjectTransformationSummary.


        :param started_count: The started_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and started_count is None:  # noqa: E501
            raise ValueError("Invalid value for `started_count`, must not be `None`")  # noqa: E501

        self._started_count = started_count

    @property
    def succeeded_count(self):
        """Gets the succeeded_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501


        :return: The succeeded_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :rtype: float
        """
        return self._succeeded_count

    @succeeded_count.setter
    def succeeded_count(self, succeeded_count):
        """Sets the succeeded_count of this OrganizationCreateProjectTransformationSummary.


        :param succeeded_count: The succeeded_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and succeeded_count is None:  # noqa: E501
            raise ValueError("Invalid value for `succeeded_count`, must not be `None`")  # noqa: E501

        self._succeeded_count = succeeded_count

    @property
    def finished_count(self):
        """Gets the finished_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501


        :return: The finished_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :rtype: float
        """
        return self._finished_count

    @finished_count.setter
    def finished_count(self, finished_count):
        """Sets the finished_count of this OrganizationCreateProjectTransformationSummary.


        :param finished_count: The finished_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and finished_count is None:  # noqa: E501
            raise ValueError("Invalid value for `finished_count`, must not be `None`")  # noqa: E501

        self._finished_count = finished_count

    @property
    def total_file_count(self):
        """Gets the total_file_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501


        :return: The total_file_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_file_count

    @total_file_count.setter
    def total_file_count(self, total_file_count):
        """Sets the total_file_count of this OrganizationCreateProjectTransformationSummary.


        :param total_file_count: The total_file_count of this OrganizationCreateProjectTransformationSummary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `total_file_count`, must not be `None`")  # noqa: E501

        self._total_file_count = total_file_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationCreateProjectTransformationSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationCreateProjectTransformationSummary):
            return True

        return self.to_dict() != other.to_dict()
