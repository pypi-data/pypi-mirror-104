# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OptimizeStateResponseAllOfStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_pending_trials': 'float',
        'num_running_trials': 'float',
        'num_completed_trials': 'float',
        'num_failed_trials': 'float',
        'num_ready_workers': 'float',
        'num_busy_workers': 'float',
        'num_pending_workers': 'float',
        'status': 'str'
    }

    attribute_map = {
        'num_pending_trials': 'numPendingTrials',
        'num_running_trials': 'numRunningTrials',
        'num_completed_trials': 'numCompletedTrials',
        'num_failed_trials': 'numFailedTrials',
        'num_ready_workers': 'numReadyWorkers',
        'num_busy_workers': 'numBusyWorkers',
        'num_pending_workers': 'numPendingWorkers',
        'status': 'status'
    }

    def __init__(self, num_pending_trials=None, num_running_trials=None, num_completed_trials=None, num_failed_trials=None, num_ready_workers=None, num_busy_workers=None, num_pending_workers=None, status=None, local_vars_configuration=None):  # noqa: E501
        """OptimizeStateResponseAllOfStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_pending_trials = None
        self._num_running_trials = None
        self._num_completed_trials = None
        self._num_failed_trials = None
        self._num_ready_workers = None
        self._num_busy_workers = None
        self._num_pending_workers = None
        self._status = None
        self.discriminator = None

        if num_pending_trials is not None:
            self.num_pending_trials = num_pending_trials
        if num_running_trials is not None:
            self.num_running_trials = num_running_trials
        if num_completed_trials is not None:
            self.num_completed_trials = num_completed_trials
        if num_failed_trials is not None:
            self.num_failed_trials = num_failed_trials
        if num_ready_workers is not None:
            self.num_ready_workers = num_ready_workers
        if num_busy_workers is not None:
            self.num_busy_workers = num_busy_workers
        if num_pending_workers is not None:
            self.num_pending_workers = num_pending_workers
        if status is not None:
            self.status = status

    @property
    def num_pending_trials(self):
        """Gets the num_pending_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_pending_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_pending_trials

    @num_pending_trials.setter
    def num_pending_trials(self, num_pending_trials):
        """Sets the num_pending_trials of this OptimizeStateResponseAllOfStatus.


        :param num_pending_trials: The num_pending_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_pending_trials = num_pending_trials

    @property
    def num_running_trials(self):
        """Gets the num_running_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_running_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_running_trials

    @num_running_trials.setter
    def num_running_trials(self, num_running_trials):
        """Sets the num_running_trials of this OptimizeStateResponseAllOfStatus.


        :param num_running_trials: The num_running_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_running_trials = num_running_trials

    @property
    def num_completed_trials(self):
        """Gets the num_completed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_completed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_completed_trials

    @num_completed_trials.setter
    def num_completed_trials(self, num_completed_trials):
        """Sets the num_completed_trials of this OptimizeStateResponseAllOfStatus.


        :param num_completed_trials: The num_completed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_completed_trials = num_completed_trials

    @property
    def num_failed_trials(self):
        """Gets the num_failed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_failed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_failed_trials

    @num_failed_trials.setter
    def num_failed_trials(self, num_failed_trials):
        """Sets the num_failed_trials of this OptimizeStateResponseAllOfStatus.


        :param num_failed_trials: The num_failed_trials of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_failed_trials = num_failed_trials

    @property
    def num_ready_workers(self):
        """Gets the num_ready_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_ready_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_ready_workers

    @num_ready_workers.setter
    def num_ready_workers(self, num_ready_workers):
        """Sets the num_ready_workers of this OptimizeStateResponseAllOfStatus.


        :param num_ready_workers: The num_ready_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_ready_workers = num_ready_workers

    @property
    def num_busy_workers(self):
        """Gets the num_busy_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_busy_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_busy_workers

    @num_busy_workers.setter
    def num_busy_workers(self, num_busy_workers):
        """Sets the num_busy_workers of this OptimizeStateResponseAllOfStatus.


        :param num_busy_workers: The num_busy_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_busy_workers = num_busy_workers

    @property
    def num_pending_workers(self):
        """Gets the num_pending_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The num_pending_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: float
        """
        return self._num_pending_workers

    @num_pending_workers.setter
    def num_pending_workers(self, num_pending_workers):
        """Sets the num_pending_workers of this OptimizeStateResponseAllOfStatus.


        :param num_pending_workers: The num_pending_workers of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: float
        """

        self._num_pending_workers = num_pending_workers

    @property
    def status(self):
        """Gets the status of this OptimizeStateResponseAllOfStatus.  # noqa: E501


        :return: The status of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OptimizeStateResponseAllOfStatus.


        :param status: The status of this OptimizeStateResponseAllOfStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ready", "running", "completed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizeStateResponseAllOfStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizeStateResponseAllOfStatus):
            return True

        return self.to_dict() != other.to_dict()
