# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OptimizeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_category': 'str',
        'target_latency': 'int',
        'target_device': 'OptimizeConfigTargetDevice',
        'compiler': 'list[str]',
        'precision': 'list[str]',
        'training_cycles': 'int',
        'tuning_max_trials': 'int',
        'tuning_workers': 'int',
        'min_maccs': 'float',
        'max_maccs': 'float',
        'tuning_algorithm': 'str'
    }

    attribute_map = {
        'dataset_category': 'datasetCategory',
        'target_latency': 'targetLatency',
        'target_device': 'targetDevice',
        'compiler': 'compiler',
        'precision': 'precision',
        'training_cycles': 'trainingCycles',
        'tuning_max_trials': 'tuningMaxTrials',
        'tuning_workers': 'tuningWorkers',
        'min_maccs': 'minMACCS',
        'max_maccs': 'maxMACCS',
        'tuning_algorithm': 'tuningAlgorithm'
    }

    def __init__(self, dataset_category=None, target_latency=None, target_device=None, compiler=None, precision=None, training_cycles=None, tuning_max_trials=None, tuning_workers=None, min_maccs=None, max_maccs=None, tuning_algorithm=None, local_vars_configuration=None):  # noqa: E501
        """OptimizeConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_category = None
        self._target_latency = None
        self._target_device = None
        self._compiler = None
        self._precision = None
        self._training_cycles = None
        self._tuning_max_trials = None
        self._tuning_workers = None
        self._min_maccs = None
        self._max_maccs = None
        self._tuning_algorithm = None
        self.discriminator = None

        if dataset_category is not None:
            self.dataset_category = dataset_category
        if target_latency is not None:
            self.target_latency = target_latency
        if target_device is not None:
            self.target_device = target_device
        if compiler is not None:
            self.compiler = compiler
        if precision is not None:
            self.precision = precision
        if training_cycles is not None:
            self.training_cycles = training_cycles
        if tuning_max_trials is not None:
            self.tuning_max_trials = tuning_max_trials
        if tuning_workers is not None:
            self.tuning_workers = tuning_workers
        if min_maccs is not None:
            self.min_maccs = min_maccs
        if max_maccs is not None:
            self.max_maccs = max_maccs
        if tuning_algorithm is not None:
            self.tuning_algorithm = tuning_algorithm

    @property
    def dataset_category(self):
        """Gets the dataset_category of this OptimizeConfig.  # noqa: E501

        Dataset category  # noqa: E501

        :return: The dataset_category of this OptimizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._dataset_category

    @dataset_category.setter
    def dataset_category(self, dataset_category):
        """Sets the dataset_category of this OptimizeConfig.

        Dataset category  # noqa: E501

        :param dataset_category: The dataset_category of this OptimizeConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["speech_keyword", "speech_continuous", "audio_event", "audio_continuous"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and dataset_category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `dataset_category` ({0}), must be one of {1}"  # noqa: E501
                .format(dataset_category, allowed_values)
            )

        self._dataset_category = dataset_category

    @property
    def target_latency(self):
        """Gets the target_latency of this OptimizeConfig.  # noqa: E501

        Target latency in MS  # noqa: E501

        :return: The target_latency of this OptimizeConfig.  # noqa: E501
        :rtype: int
        """
        return self._target_latency

    @target_latency.setter
    def target_latency(self, target_latency):
        """Sets the target_latency of this OptimizeConfig.

        Target latency in MS  # noqa: E501

        :param target_latency: The target_latency of this OptimizeConfig.  # noqa: E501
        :type: int
        """

        self._target_latency = target_latency

    @property
    def target_device(self):
        """Gets the target_device of this OptimizeConfig.  # noqa: E501


        :return: The target_device of this OptimizeConfig.  # noqa: E501
        :rtype: OptimizeConfigTargetDevice
        """
        return self._target_device

    @target_device.setter
    def target_device(self, target_device):
        """Sets the target_device of this OptimizeConfig.


        :param target_device: The target_device of this OptimizeConfig.  # noqa: E501
        :type: OptimizeConfigTargetDevice
        """

        self._target_device = target_device

    @property
    def compiler(self):
        """Gets the compiler of this OptimizeConfig.  # noqa: E501


        :return: The compiler of this OptimizeConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._compiler

    @compiler.setter
    def compiler(self, compiler):
        """Sets the compiler of this OptimizeConfig.


        :param compiler: The compiler of this OptimizeConfig.  # noqa: E501
        :type: list[str]
        """

        self._compiler = compiler

    @property
    def precision(self):
        """Gets the precision of this OptimizeConfig.  # noqa: E501


        :return: The precision of this OptimizeConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this OptimizeConfig.


        :param precision: The precision of this OptimizeConfig.  # noqa: E501
        :type: list[str]
        """

        self._precision = precision

    @property
    def training_cycles(self):
        """Gets the training_cycles of this OptimizeConfig.  # noqa: E501

        Maximum number of training cycles  # noqa: E501

        :return: The training_cycles of this OptimizeConfig.  # noqa: E501
        :rtype: int
        """
        return self._training_cycles

    @training_cycles.setter
    def training_cycles(self, training_cycles):
        """Sets the training_cycles of this OptimizeConfig.

        Maximum number of training cycles  # noqa: E501

        :param training_cycles: The training_cycles of this OptimizeConfig.  # noqa: E501
        :type: int
        """

        self._training_cycles = training_cycles

    @property
    def tuning_max_trials(self):
        """Gets the tuning_max_trials of this OptimizeConfig.  # noqa: E501

        Maximum number of trials  # noqa: E501

        :return: The tuning_max_trials of this OptimizeConfig.  # noqa: E501
        :rtype: int
        """
        return self._tuning_max_trials

    @tuning_max_trials.setter
    def tuning_max_trials(self, tuning_max_trials):
        """Sets the tuning_max_trials of this OptimizeConfig.

        Maximum number of trials  # noqa: E501

        :param tuning_max_trials: The tuning_max_trials of this OptimizeConfig.  # noqa: E501
        :type: int
        """

        self._tuning_max_trials = tuning_max_trials

    @property
    def tuning_workers(self):
        """Gets the tuning_workers of this OptimizeConfig.  # noqa: E501

        Maximum number of parallel workers/jobs  # noqa: E501

        :return: The tuning_workers of this OptimizeConfig.  # noqa: E501
        :rtype: int
        """
        return self._tuning_workers

    @tuning_workers.setter
    def tuning_workers(self, tuning_workers):
        """Sets the tuning_workers of this OptimizeConfig.

        Maximum number of parallel workers/jobs  # noqa: E501

        :param tuning_workers: The tuning_workers of this OptimizeConfig.  # noqa: E501
        :type: int
        """

        self._tuning_workers = tuning_workers

    @property
    def min_maccs(self):
        """Gets the min_maccs of this OptimizeConfig.  # noqa: E501


        :return: The min_maccs of this OptimizeConfig.  # noqa: E501
        :rtype: float
        """
        return self._min_maccs

    @min_maccs.setter
    def min_maccs(self, min_maccs):
        """Sets the min_maccs of this OptimizeConfig.


        :param min_maccs: The min_maccs of this OptimizeConfig.  # noqa: E501
        :type: float
        """

        self._min_maccs = min_maccs

    @property
    def max_maccs(self):
        """Gets the max_maccs of this OptimizeConfig.  # noqa: E501


        :return: The max_maccs of this OptimizeConfig.  # noqa: E501
        :rtype: float
        """
        return self._max_maccs

    @max_maccs.setter
    def max_maccs(self, max_maccs):
        """Sets the max_maccs of this OptimizeConfig.


        :param max_maccs: The max_maccs of this OptimizeConfig.  # noqa: E501
        :type: float
        """

        self._max_maccs = max_maccs

    @property
    def tuning_algorithm(self):
        """Gets the tuning_algorithm of this OptimizeConfig.  # noqa: E501

        Tuning algorithm to use to search hyperparameter space  # noqa: E501

        :return: The tuning_algorithm of this OptimizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._tuning_algorithm

    @tuning_algorithm.setter
    def tuning_algorithm(self, tuning_algorithm):
        """Sets the tuning_algorithm of this OptimizeConfig.

        Tuning algorithm to use to search hyperparameter space  # noqa: E501

        :param tuning_algorithm: The tuning_algorithm of this OptimizeConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["random", "hyperband", "bayesian"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tuning_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tuning_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(tuning_algorithm, allowed_values)
            )

        self._tuning_algorithm = tuning_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizeConfig):
            return True

        return self.to_dict() != other.to_dict()
