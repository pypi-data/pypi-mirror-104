# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class TunerTrial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'last_completed_training': 'datetime',
        'retries': 'float',
        'current_epoch': 'float',
        'keras_tuner_trial': 'TunerTrialKerasTunerTrial'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'last_completed_training': 'lastCompletedTraining',
        'retries': 'retries',
        'current_epoch': 'currentEpoch',
        'keras_tuner_trial': 'kerasTunerTrial'
    }

    def __init__(self, id=None, status=None, last_completed_training=None, retries=None, current_epoch=None, keras_tuner_trial=None, local_vars_configuration=None):  # noqa: E501
        """TunerTrial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._last_completed_training = None
        self._retries = None
        self._current_epoch = None
        self._keras_tuner_trial = None
        self.discriminator = None

        self.id = id
        self.status = status
        if last_completed_training is not None:
            self.last_completed_training = last_completed_training
        if retries is not None:
            self.retries = retries
        if current_epoch is not None:
            self.current_epoch = current_epoch
        if keras_tuner_trial is not None:
            self.keras_tuner_trial = keras_tuner_trial

    @property
    def id(self):
        """Gets the id of this TunerTrial.  # noqa: E501


        :return: The id of this TunerTrial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TunerTrial.


        :param id: The id of this TunerTrial.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this TunerTrial.  # noqa: E501


        :return: The status of this TunerTrial.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TunerTrial.


        :param status: The status of this TunerTrial.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def last_completed_training(self):
        """Gets the last_completed_training of this TunerTrial.  # noqa: E501


        :return: The last_completed_training of this TunerTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._last_completed_training

    @last_completed_training.setter
    def last_completed_training(self, last_completed_training):
        """Sets the last_completed_training of this TunerTrial.


        :param last_completed_training: The last_completed_training of this TunerTrial.  # noqa: E501
        :type: datetime
        """

        self._last_completed_training = last_completed_training

    @property
    def retries(self):
        """Gets the retries of this TunerTrial.  # noqa: E501


        :return: The retries of this TunerTrial.  # noqa: E501
        :rtype: float
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this TunerTrial.


        :param retries: The retries of this TunerTrial.  # noqa: E501
        :type: float
        """

        self._retries = retries

    @property
    def current_epoch(self):
        """Gets the current_epoch of this TunerTrial.  # noqa: E501


        :return: The current_epoch of this TunerTrial.  # noqa: E501
        :rtype: float
        """
        return self._current_epoch

    @current_epoch.setter
    def current_epoch(self, current_epoch):
        """Sets the current_epoch of this TunerTrial.


        :param current_epoch: The current_epoch of this TunerTrial.  # noqa: E501
        :type: float
        """

        self._current_epoch = current_epoch

    @property
    def keras_tuner_trial(self):
        """Gets the keras_tuner_trial of this TunerTrial.  # noqa: E501


        :return: The keras_tuner_trial of this TunerTrial.  # noqa: E501
        :rtype: TunerTrialKerasTunerTrial
        """
        return self._keras_tuner_trial

    @keras_tuner_trial.setter
    def keras_tuner_trial(self, keras_tuner_trial):
        """Sets the keras_tuner_trial of this TunerTrial.


        :param keras_tuner_trial: The keras_tuner_trial of this TunerTrial.  # noqa: E501
        :type: TunerTrialKerasTunerTrial
        """

        self._keras_tuner_trial = keras_tuner_trial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunerTrial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TunerTrial):
            return True

        return self.to_dict() != other.to_dict()
