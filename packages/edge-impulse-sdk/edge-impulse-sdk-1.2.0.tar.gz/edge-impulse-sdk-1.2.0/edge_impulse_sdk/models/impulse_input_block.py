# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ImpulseInputBlock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'name': 'str',
        'title': 'str',
        'window_size_ms': 'int',
        'window_increase_ms': 'int',
        'pad_zeros': 'bool',
        'image_width': 'int',
        'image_height': 'int',
        'resize_mode': 'str',
        'resize_method': 'str',
        'crop_anchor': 'str',
        'primary_version': 'bool',
        'base_block_id': 'float',
        'description': 'str',
        'created_by': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'title': 'title',
        'window_size_ms': 'windowSizeMs',
        'window_increase_ms': 'windowIncreaseMs',
        'pad_zeros': 'padZeros',
        'image_width': 'imageWidth',
        'image_height': 'imageHeight',
        'resize_mode': 'resizeMode',
        'resize_method': 'resizeMethod',
        'crop_anchor': 'cropAnchor',
        'primary_version': 'primaryVersion',
        'base_block_id': 'baseBlockId',
        'description': 'description',
        'created_by': 'createdBy',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, type=None, name=None, title=None, window_size_ms=None, window_increase_ms=None, pad_zeros=None, image_width=None, image_height=None, resize_mode=None, resize_method=None, crop_anchor=None, primary_version=None, base_block_id=None, description=None, created_by=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """ImpulseInputBlock - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._name = None
        self._title = None
        self._window_size_ms = None
        self._window_increase_ms = None
        self._pad_zeros = None
        self._image_width = None
        self._image_height = None
        self._resize_mode = None
        self._resize_method = None
        self._crop_anchor = None
        self._primary_version = None
        self._base_block_id = None
        self._description = None
        self._created_by = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.name = name
        self.title = title
        if window_size_ms is not None:
            self.window_size_ms = window_size_ms
        if window_increase_ms is not None:
            self.window_increase_ms = window_increase_ms
        if pad_zeros is not None:
            self.pad_zeros = pad_zeros
        if image_width is not None:
            self.image_width = image_width
        if image_height is not None:
            self.image_height = image_height
        if resize_mode is not None:
            self.resize_mode = resize_mode
        if resize_method is not None:
            self.resize_method = resize_method
        if crop_anchor is not None:
            self.crop_anchor = crop_anchor
        self.primary_version = primary_version
        if base_block_id is not None:
            self.base_block_id = base_block_id
        if description is not None:
            self.description = description
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this ImpulseInputBlock.  # noqa: E501

        Identifier for this block. Make sure to up this number when creating a new block, and don't re-use identifiers. If the block hasn't changed, keep the ID as-is.  # noqa: E501

        :return: The id of this ImpulseInputBlock.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImpulseInputBlock.

        Identifier for this block. Make sure to up this number when creating a new block, and don't re-use identifiers. If the block hasn't changed, keep the ID as-is.  # noqa: E501

        :param id: The id of this ImpulseInputBlock.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImpulseInputBlock.  # noqa: E501

        Block type (either time-series or image)  # noqa: E501

        :return: The type of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImpulseInputBlock.

        Block type (either time-series or image)  # noqa: E501

        :param type: The type of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["time-series", "image"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this ImpulseInputBlock.  # noqa: E501

        Block name, will be used in menus  # noqa: E501

        :return: The name of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImpulseInputBlock.

        Block name, will be used in menus  # noqa: E501

        :param name: The name of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this ImpulseInputBlock.  # noqa: E501

        Block title, used in the impulse UI  # noqa: E501

        :return: The title of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImpulseInputBlock.

        Block title, used in the impulse UI  # noqa: E501

        :param title: The title of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def window_size_ms(self):
        """Gets the window_size_ms of this ImpulseInputBlock.  # noqa: E501

        Size of the sliding window in milliseconds  # noqa: E501

        :return: The window_size_ms of this ImpulseInputBlock.  # noqa: E501
        :rtype: int
        """
        return self._window_size_ms

    @window_size_ms.setter
    def window_size_ms(self, window_size_ms):
        """Sets the window_size_ms of this ImpulseInputBlock.

        Size of the sliding window in milliseconds  # noqa: E501

        :param window_size_ms: The window_size_ms of this ImpulseInputBlock.  # noqa: E501
        :type: int
        """

        self._window_size_ms = window_size_ms

    @property
    def window_increase_ms(self):
        """Gets the window_increase_ms of this ImpulseInputBlock.  # noqa: E501

        We use a sliding window to go over the raw data. How many milliseconds to increase the sliding window with for each step.  # noqa: E501

        :return: The window_increase_ms of this ImpulseInputBlock.  # noqa: E501
        :rtype: int
        """
        return self._window_increase_ms

    @window_increase_ms.setter
    def window_increase_ms(self, window_increase_ms):
        """Sets the window_increase_ms of this ImpulseInputBlock.

        We use a sliding window to go over the raw data. How many milliseconds to increase the sliding window with for each step.  # noqa: E501

        :param window_increase_ms: The window_increase_ms of this ImpulseInputBlock.  # noqa: E501
        :type: int
        """

        self._window_increase_ms = window_increase_ms

    @property
    def pad_zeros(self):
        """Gets the pad_zeros of this ImpulseInputBlock.  # noqa: E501

        Whether to zero pad data when a data item is too short  # noqa: E501

        :return: The pad_zeros of this ImpulseInputBlock.  # noqa: E501
        :rtype: bool
        """
        return self._pad_zeros

    @pad_zeros.setter
    def pad_zeros(self, pad_zeros):
        """Sets the pad_zeros of this ImpulseInputBlock.

        Whether to zero pad data when a data item is too short  # noqa: E501

        :param pad_zeros: The pad_zeros of this ImpulseInputBlock.  # noqa: E501
        :type: bool
        """

        self._pad_zeros = pad_zeros

    @property
    def image_width(self):
        """Gets the image_width of this ImpulseInputBlock.  # noqa: E501

        Width all images are resized to before training  # noqa: E501

        :return: The image_width of this ImpulseInputBlock.  # noqa: E501
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this ImpulseInputBlock.

        Width all images are resized to before training  # noqa: E501

        :param image_width: The image_width of this ImpulseInputBlock.  # noqa: E501
        :type: int
        """

        self._image_width = image_width

    @property
    def image_height(self):
        """Gets the image_height of this ImpulseInputBlock.  # noqa: E501

        Width all images are resized to before training  # noqa: E501

        :return: The image_height of this ImpulseInputBlock.  # noqa: E501
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this ImpulseInputBlock.

        Width all images are resized to before training  # noqa: E501

        :param image_height: The image_height of this ImpulseInputBlock.  # noqa: E501
        :type: int
        """

        self._image_height = image_height

    @property
    def resize_mode(self):
        """Gets the resize_mode of this ImpulseInputBlock.  # noqa: E501

        How to resize images before training  # noqa: E501

        :return: The resize_mode of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._resize_mode

    @resize_mode.setter
    def resize_mode(self, resize_mode):
        """Sets the resize_mode of this ImpulseInputBlock.

        How to resize images before training  # noqa: E501

        :param resize_mode: The resize_mode of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        allowed_values = ["squash", "fit-short", "fit-long", "crop"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resize_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resize_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(resize_mode, allowed_values)
            )

        self._resize_mode = resize_mode

    @property
    def resize_method(self):
        """Gets the resize_method of this ImpulseInputBlock.  # noqa: E501

        Resize method to use when resizing images  # noqa: E501

        :return: The resize_method of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._resize_method

    @resize_method.setter
    def resize_method(self, resize_method):
        """Sets the resize_method of this ImpulseInputBlock.

        Resize method to use when resizing images  # noqa: E501

        :param resize_method: The resize_method of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        allowed_values = ["lanczos3", "nearest"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resize_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resize_method` ({0}), must be one of {1}"  # noqa: E501
                .format(resize_method, allowed_values)
            )

        self._resize_method = resize_method

    @property
    def crop_anchor(self):
        """Gets the crop_anchor of this ImpulseInputBlock.  # noqa: E501

        If images are resized using a crop, choose where to anchor the crop  # noqa: E501

        :return: The crop_anchor of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._crop_anchor

    @crop_anchor.setter
    def crop_anchor(self, crop_anchor):
        """Sets the crop_anchor of this ImpulseInputBlock.

        If images are resized using a crop, choose where to anchor the crop  # noqa: E501

        :param crop_anchor: The crop_anchor of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """
        allowed_values = ["top-left", "top-center", "top-right", "middle-left", "middle-center", "middle-right", "bottom-left", "bottom-center", "bottom-right"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and crop_anchor not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `crop_anchor` ({0}), must be one of {1}"  # noqa: E501
                .format(crop_anchor, allowed_values)
            )

        self._crop_anchor = crop_anchor

    @property
    def primary_version(self):
        """Gets the primary_version of this ImpulseInputBlock.  # noqa: E501

        Whether this block is the primary version of its base block.  # noqa: E501

        :return: The primary_version of this ImpulseInputBlock.  # noqa: E501
        :rtype: bool
        """
        return self._primary_version

    @primary_version.setter
    def primary_version(self, primary_version):
        """Sets the primary_version of this ImpulseInputBlock.

        Whether this block is the primary version of its base block.  # noqa: E501

        :param primary_version: The primary_version of this ImpulseInputBlock.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and primary_version is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_version`, must not be `None`")  # noqa: E501

        self._primary_version = primary_version

    @property
    def base_block_id(self):
        """Gets the base_block_id of this ImpulseInputBlock.  # noqa: E501

        The version number of the original block this version was based on. If this is an original block, will be undefined.  # noqa: E501

        :return: The base_block_id of this ImpulseInputBlock.  # noqa: E501
        :rtype: float
        """
        return self._base_block_id

    @base_block_id.setter
    def base_block_id(self, base_block_id):
        """Sets the base_block_id of this ImpulseInputBlock.

        The version number of the original block this version was based on. If this is an original block, will be undefined.  # noqa: E501

        :param base_block_id: The base_block_id of this ImpulseInputBlock.  # noqa: E501
        :type: float
        """

        self._base_block_id = base_block_id

    @property
    def description(self):
        """Gets the description of this ImpulseInputBlock.  # noqa: E501

        A short description of the block version, displayed in the block versioning UI  # noqa: E501

        :return: The description of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImpulseInputBlock.

        A short description of the block version, displayed in the block versioning UI  # noqa: E501

        :param description: The description of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this ImpulseInputBlock.  # noqa: E501

        The system component that created the block version (createImpulse | clone | tuner). Cannot be set via API.  # noqa: E501

        :return: The created_by of this ImpulseInputBlock.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ImpulseInputBlock.

        The system component that created the block version (createImpulse | clone | tuner). Cannot be set via API.  # noqa: E501

        :param created_by: The created_by of this ImpulseInputBlock.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this ImpulseInputBlock.  # noqa: E501

        The datetime that the block version was created. Cannot be set via API.  # noqa: E501

        :return: The created_at of this ImpulseInputBlock.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImpulseInputBlock.

        The datetime that the block version was created. Cannot be set via API.  # noqa: E501

        :param created_at: The created_at of this ImpulseInputBlock.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImpulseInputBlock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImpulseInputBlock):
            return True

        return self.to_dict() != other.to_dict()
