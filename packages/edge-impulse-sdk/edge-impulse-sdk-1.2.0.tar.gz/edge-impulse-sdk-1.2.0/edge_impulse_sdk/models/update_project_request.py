# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class UpdateProjectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'logo': 'str',
        'name': 'str',
        'description': 'str',
        'last_deploy_eon_compiler': 'bool',
        'latency_device': 'str',
        'experiments': 'list[str]',
        'show_create_first_impulse': 'bool',
        'labeling_method': 'str',
        'show_getting_started_wizard': 'bool',
        'use_gpu': 'bool',
        'parallel_dsp_jobs': 'int',
        'compute_time_limit_s': 'int',
        'dsp_file_size_mb': 'int'
    }

    attribute_map = {
        'logo': 'logo',
        'name': 'name',
        'description': 'description',
        'last_deploy_eon_compiler': 'lastDeployEonCompiler',
        'latency_device': 'latencyDevice',
        'experiments': 'experiments',
        'show_create_first_impulse': 'showCreateFirstImpulse',
        'labeling_method': 'labelingMethod',
        'show_getting_started_wizard': 'showGettingStartedWizard',
        'use_gpu': 'useGpu',
        'parallel_dsp_jobs': 'parallelDspJobs',
        'compute_time_limit_s': 'computeTimeLimitS',
        'dsp_file_size_mb': 'dspFileSizeMb'
    }

    def __init__(self, logo=None, name=None, description=None, last_deploy_eon_compiler=None, latency_device=None, experiments=None, show_create_first_impulse=None, labeling_method=None, show_getting_started_wizard=None, use_gpu=None, parallel_dsp_jobs=None, compute_time_limit_s=None, dsp_file_size_mb=None, local_vars_configuration=None):  # noqa: E501
        """UpdateProjectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._logo = None
        self._name = None
        self._description = None
        self._last_deploy_eon_compiler = None
        self._latency_device = None
        self._experiments = None
        self._show_create_first_impulse = None
        self._labeling_method = None
        self._show_getting_started_wizard = None
        self._use_gpu = None
        self._parallel_dsp_jobs = None
        self._compute_time_limit_s = None
        self._dsp_file_size_mb = None
        self.discriminator = None

        if logo is not None:
            self.logo = logo
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if last_deploy_eon_compiler is not None:
            self.last_deploy_eon_compiler = last_deploy_eon_compiler
        if latency_device is not None:
            self.latency_device = latency_device
        if experiments is not None:
            self.experiments = experiments
        if show_create_first_impulse is not None:
            self.show_create_first_impulse = show_create_first_impulse
        if labeling_method is not None:
            self.labeling_method = labeling_method
        if show_getting_started_wizard is not None:
            self.show_getting_started_wizard = show_getting_started_wizard
        if use_gpu is not None:
            self.use_gpu = use_gpu
        if parallel_dsp_jobs is not None:
            self.parallel_dsp_jobs = parallel_dsp_jobs
        if compute_time_limit_s is not None:
            self.compute_time_limit_s = compute_time_limit_s
        if dsp_file_size_mb is not None:
            self.dsp_file_size_mb = dsp_file_size_mb

    @property
    def logo(self):
        """Gets the logo of this UpdateProjectRequest.  # noqa: E501

        New logo URL, or set to `null` to remove the logo.  # noqa: E501

        :return: The logo of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this UpdateProjectRequest.

        New logo URL, or set to `null` to remove the logo.  # noqa: E501

        :param logo: The logo of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this UpdateProjectRequest.  # noqa: E501

        New project name.  # noqa: E501

        :return: The name of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProjectRequest.

        New project name.  # noqa: E501

        :param name: The name of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateProjectRequest.  # noqa: E501


        :return: The description of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProjectRequest.


        :param description: The description of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_deploy_eon_compiler(self):
        """Gets the last_deploy_eon_compiler of this UpdateProjectRequest.  # noqa: E501

        Call this when clicking the Eon compiler setting  # noqa: E501

        :return: The last_deploy_eon_compiler of this UpdateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._last_deploy_eon_compiler

    @last_deploy_eon_compiler.setter
    def last_deploy_eon_compiler(self, last_deploy_eon_compiler):
        """Sets the last_deploy_eon_compiler of this UpdateProjectRequest.

        Call this when clicking the Eon compiler setting  # noqa: E501

        :param last_deploy_eon_compiler: The last_deploy_eon_compiler of this UpdateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._last_deploy_eon_compiler = last_deploy_eon_compiler

    @property
    def latency_device(self):
        """Gets the latency_device of this UpdateProjectRequest.  # noqa: E501

        MCU used for calculating latency  # noqa: E501

        :return: The latency_device of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._latency_device

    @latency_device.setter
    def latency_device(self, latency_device):
        """Sets the latency_device of this UpdateProjectRequest.

        MCU used for calculating latency  # noqa: E501

        :param latency_device: The latency_device of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._latency_device = latency_device

    @property
    def experiments(self):
        """Gets the experiments of this UpdateProjectRequest.  # noqa: E501


        :return: The experiments of this UpdateProjectRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this UpdateProjectRequest.


        :param experiments: The experiments of this UpdateProjectRequest.  # noqa: E501
        :type: list[str]
        """

        self._experiments = experiments

    @property
    def show_create_first_impulse(self):
        """Gets the show_create_first_impulse of this UpdateProjectRequest.  # noqa: E501

        Whether to show the 'Create your first impulse' section on the dashboard  # noqa: E501

        :return: The show_create_first_impulse of this UpdateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._show_create_first_impulse

    @show_create_first_impulse.setter
    def show_create_first_impulse(self, show_create_first_impulse):
        """Sets the show_create_first_impulse of this UpdateProjectRequest.

        Whether to show the 'Create your first impulse' section on the dashboard  # noqa: E501

        :param show_create_first_impulse: The show_create_first_impulse of this UpdateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._show_create_first_impulse = show_create_first_impulse

    @property
    def labeling_method(self):
        """Gets the labeling_method of this UpdateProjectRequest.  # noqa: E501

        What labeling flow to use  # noqa: E501

        :return: The labeling_method of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._labeling_method

    @labeling_method.setter
    def labeling_method(self, labeling_method):
        """Sets the labeling_method of this UpdateProjectRequest.

        What labeling flow to use  # noqa: E501

        :param labeling_method: The labeling_method of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["single_label", "object_detection"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and labeling_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `labeling_method` ({0}), must be one of {1}"  # noqa: E501
                .format(labeling_method, allowed_values)
            )

        self._labeling_method = labeling_method

    @property
    def show_getting_started_wizard(self):
        """Gets the show_getting_started_wizard of this UpdateProjectRequest.  # noqa: E501

        Whether to show the getting started wizard on the next page load of the dashboard  # noqa: E501

        :return: The show_getting_started_wizard of this UpdateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._show_getting_started_wizard

    @show_getting_started_wizard.setter
    def show_getting_started_wizard(self, show_getting_started_wizard):
        """Sets the show_getting_started_wizard of this UpdateProjectRequest.

        Whether to show the getting started wizard on the next page load of the dashboard  # noqa: E501

        :param show_getting_started_wizard: The show_getting_started_wizard of this UpdateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._show_getting_started_wizard = show_getting_started_wizard

    @property
    def use_gpu(self):
        """Gets the use_gpu of this UpdateProjectRequest.  # noqa: E501

        Whether to use GPU for training  # noqa: E501

        :return: The use_gpu of this UpdateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_gpu

    @use_gpu.setter
    def use_gpu(self, use_gpu):
        """Sets the use_gpu of this UpdateProjectRequest.

        Whether to use GPU for training  # noqa: E501

        :param use_gpu: The use_gpu of this UpdateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._use_gpu = use_gpu

    @property
    def parallel_dsp_jobs(self):
        """Gets the parallel_dsp_jobs of this UpdateProjectRequest.  # noqa: E501

        Number of parallel DSP jobs  # noqa: E501

        :return: The parallel_dsp_jobs of this UpdateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._parallel_dsp_jobs

    @parallel_dsp_jobs.setter
    def parallel_dsp_jobs(self, parallel_dsp_jobs):
        """Sets the parallel_dsp_jobs of this UpdateProjectRequest.

        Number of parallel DSP jobs  # noqa: E501

        :param parallel_dsp_jobs: The parallel_dsp_jobs of this UpdateProjectRequest.  # noqa: E501
        :type: int
        """

        self._parallel_dsp_jobs = parallel_dsp_jobs

    @property
    def compute_time_limit_s(self):
        """Gets the compute_time_limit_s of this UpdateProjectRequest.  # noqa: E501

        Job limit in seconds  # noqa: E501

        :return: The compute_time_limit_s of this UpdateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._compute_time_limit_s

    @compute_time_limit_s.setter
    def compute_time_limit_s(self, compute_time_limit_s):
        """Sets the compute_time_limit_s of this UpdateProjectRequest.

        Job limit in seconds  # noqa: E501

        :param compute_time_limit_s: The compute_time_limit_s of this UpdateProjectRequest.  # noqa: E501
        :type: int
        """

        self._compute_time_limit_s = compute_time_limit_s

    @property
    def dsp_file_size_mb(self):
        """Gets the dsp_file_size_mb of this UpdateProjectRequest.  # noqa: E501

        DSP file size in MB  # noqa: E501

        :return: The dsp_file_size_mb of this UpdateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._dsp_file_size_mb

    @dsp_file_size_mb.setter
    def dsp_file_size_mb(self, dsp_file_size_mb):
        """Sets the dsp_file_size_mb of this UpdateProjectRequest.

        DSP file size in MB  # noqa: E501

        :param dsp_file_size_mb: The dsp_file_size_mb of this UpdateProjectRequest.  # noqa: E501
        :type: int
        """

        self._dsp_file_size_mb = dsp_file_size_mb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProjectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateProjectRequest):
            return True

        return self.to_dict() != other.to_dict()
