# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edge_impulse_sdk.api_client import ApiClient
from edge_impulse_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)


class OrganizationCreateProjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_organization_transform(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Clear failed transform jobs  # noqa: E501

        Clear all failed transform job from a create project job. Only jobs that have failed will be cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_organization_transform(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.clear_organization_transform_with_http_info(organization_id, create_project_id, **kwargs)  # noqa: E501

    def clear_organization_transform_with_http_info(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Clear failed transform jobs  # noqa: E501

        Clear all failed transform job from a create project job. Only jobs that have failed will be cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_organization_transform_with_http_info(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_organization_transform" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `clear_organization_transform`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `clear_organization_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}/transform/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_create_project(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Delete create project job  # noqa: E501

        Remove a create project job. This will stop all running jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_create_project(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_organization_create_project_with_http_info(organization_id, create_project_id, **kwargs)  # noqa: E501

    def delete_organization_create_project_with_http_info(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Delete create project job  # noqa: E501

        Remove a create project job. This will stop all running jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_create_project_with_http_info(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_create_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `delete_organization_create_project`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `delete_organization_create_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_create_project_file(self, organization_id, create_project_id, create_project_file_id, **kwargs):  # noqa: E501
        """Delete create project file  # noqa: E501

        Remove a file from a create project job. Only files for which no jobs are running can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_create_project_file(organization_id, create_project_id, create_project_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int create_project_file_id: Create project job file ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_organization_create_project_file_with_http_info(organization_id, create_project_id, create_project_file_id, **kwargs)  # noqa: E501

    def delete_organization_create_project_file_with_http_info(self, organization_id, create_project_id, create_project_file_id, **kwargs):  # noqa: E501
        """Delete create project file  # noqa: E501

        Remove a file from a create project job. Only files for which no jobs are running can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_create_project_file_with_http_info(organization_id, create_project_id, create_project_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int create_project_file_id: Create project job file ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id', 'create_project_file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_create_project_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `delete_organization_create_project_file`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `delete_organization_create_project_file`")  # noqa: E501
        # verify the required parameter 'create_project_file_id' is set
        if self.api_client.client_side_validation and ('create_project_file_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_file_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_file_id` when calling `delete_organization_create_project_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501
        if 'create_project_file_id' in local_var_params:
            path_params['createProjectFileId'] = local_var_params['create_project_file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}/files/{createProjectFileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_create_project_status(self, organization_id, create_project_id, transform_limit, transform_offset, **kwargs):  # noqa: E501
        """Get create project status  # noqa: E501

        Get the current status of a create project job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_create_project_status(organization_id, create_project_id, transform_limit, transform_offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int transform_limit: Maximum number of results of transformation jobs (required)
        :param int transform_offset: Offset in results of transformation jobs, can be used in conjunction with TransformLimitResultsParameter to implement paging. (required)
        :param str selection: Type of selected rows, either 'all', 'created', 'in-progress' or 'failed' (defaults to 'all')
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OrganizationCreateProjectStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_organization_create_project_status_with_http_info(organization_id, create_project_id, transform_limit, transform_offset, **kwargs)  # noqa: E501

    def get_organization_create_project_status_with_http_info(self, organization_id, create_project_id, transform_limit, transform_offset, **kwargs):  # noqa: E501
        """Get create project status  # noqa: E501

        Get the current status of a create project job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_create_project_status_with_http_info(organization_id, create_project_id, transform_limit, transform_offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int transform_limit: Maximum number of results of transformation jobs (required)
        :param int transform_offset: Offset in results of transformation jobs, can be used in conjunction with TransformLimitResultsParameter to implement paging. (required)
        :param str selection: Type of selected rows, either 'all', 'created', 'in-progress' or 'failed' (defaults to 'all')
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OrganizationCreateProjectStatusResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id', 'transform_limit', 'transform_offset', 'selection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_create_project_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `get_organization_create_project_status`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `get_organization_create_project_status`")  # noqa: E501
        # verify the required parameter 'transform_limit' is set
        if self.api_client.client_side_validation and ('transform_limit' not in local_var_params or  # noqa: E501
                                                        local_var_params['transform_limit'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transform_limit` when calling `get_organization_create_project_status`")  # noqa: E501
        # verify the required parameter 'transform_offset' is set
        if self.api_client.client_side_validation and ('transform_offset' not in local_var_params or  # noqa: E501
                                                        local_var_params['transform_offset'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transform_offset` when calling `get_organization_create_project_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []
        if 'transform_limit' in local_var_params and local_var_params['transform_limit'] is not None:  # noqa: E501
            query_params.append(('transformLimit', local_var_params['transform_limit']))  # noqa: E501
        if 'transform_offset' in local_var_params and local_var_params['transform_offset'] is not None:  # noqa: E501
            query_params.append(('transformOffset', local_var_params['transform_offset']))  # noqa: E501
        if 'selection' in local_var_params and local_var_params['selection'] is not None:  # noqa: E501
            query_params.append(('selection', local_var_params['selection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationCreateProjectStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_create_projects(self, organization_id, **kwargs):  # noqa: E501
        """List create project jobs  # noqa: E501

        Get list of create project jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_create_projects(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OrganizationGetCreateProjectsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_organization_create_projects_with_http_info(organization_id, **kwargs)  # noqa: E501

    def get_organization_create_projects_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List create project jobs  # noqa: E501

        Get list of create project jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_create_projects_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OrganizationGetCreateProjectsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_create_projects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `get_organization_create_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationGetCreateProjectsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_create_project(self, organization_id, organization_create_project_request, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        Take data from a dataset and create a new Edge Impulse project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_create_project(organization_id, organization_create_project_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param OrganizationCreateProjectRequest organization_create_project_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OrganizationCreateProjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.organization_create_project_with_http_info(organization_id, organization_create_project_request, **kwargs)  # noqa: E501

    def organization_create_project_with_http_info(self, organization_id, organization_create_project_request, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        Take data from a dataset and create a new Edge Impulse project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_create_project_with_http_info(organization_id, organization_create_project_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param OrganizationCreateProjectRequest organization_create_project_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OrganizationCreateProjectResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'organization_create_project_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_create_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `organization_create_project`")  # noqa: E501
        # verify the required parameter 'organization_create_project_request' is set
        if self.api_client.client_side_validation and ('organization_create_project_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_create_project_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_create_project_request` when calling `organization_create_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization_create_project_request' in local_var_params:
            body_params = local_var_params['organization_create_project_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationCreateProjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_organization_create_project_file(self, organization_id, create_project_id, create_project_file_id, **kwargs):  # noqa: E501
        """Retry create project file  # noqa: E501

        Retry a transformation action on a file from a create project job. Only files that have failed can be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_create_project_file(organization_id, create_project_id, create_project_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int create_project_file_id: Create project job file ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retry_organization_create_project_file_with_http_info(organization_id, create_project_id, create_project_file_id, **kwargs)  # noqa: E501

    def retry_organization_create_project_file_with_http_info(self, organization_id, create_project_id, create_project_file_id, **kwargs):  # noqa: E501
        """Retry create project file  # noqa: E501

        Retry a transformation action on a file from a create project job. Only files that have failed can be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_create_project_file_with_http_info(organization_id, create_project_id, create_project_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param int create_project_file_id: Create project job file ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id', 'create_project_file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_organization_create_project_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `retry_organization_create_project_file`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `retry_organization_create_project_file`")  # noqa: E501
        # verify the required parameter 'create_project_file_id' is set
        if self.api_client.client_side_validation and ('create_project_file_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_file_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_file_id` when calling `retry_organization_create_project_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501
        if 'create_project_file_id' in local_var_params:
            path_params['createProjectFileId'] = local_var_params['create_project_file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}/files/{createProjectFileId}/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_organization_transform(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Retry failed transform jobs  # noqa: E501

        Retry all failed transform job from a create project job. Only jobs that have failed will be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_transform(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retry_organization_transform_with_http_info(organization_id, create_project_id, **kwargs)  # noqa: E501

    def retry_organization_transform_with_http_info(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Retry failed transform jobs  # noqa: E501

        Retry all failed transform job from a create project job. Only jobs that have failed will be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_transform_with_http_info(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_organization_transform" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `retry_organization_transform`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `retry_organization_transform`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}/transform/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_organization_upload(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Retry organization upload job  # noqa: E501

        Retry the upload job from a create project job. Only jobs that have failed can be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_upload(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retry_organization_upload_with_http_info(organization_id, create_project_id, **kwargs)  # noqa: E501

    def retry_organization_upload_with_http_info(self, organization_id, create_project_id, **kwargs):  # noqa: E501
        """Retry organization upload job  # noqa: E501

        Retry the upload job from a create project job. Only jobs that have failed can be retried.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_organization_upload_with_http_info(organization_id, create_project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_organization_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `retry_organization_upload`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `retry_organization_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}/upload/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_create_project(self, organization_id, create_project_id, update_organization_create_project_request, **kwargs):  # noqa: E501
        """Update create project  # noqa: E501

        Update the properties of a create project job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_create_project(organization_id, create_project_id, update_organization_create_project_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param UpdateOrganizationCreateProjectRequest update_organization_create_project_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_organization_create_project_with_http_info(organization_id, create_project_id, update_organization_create_project_request, **kwargs)  # noqa: E501

    def update_organization_create_project_with_http_info(self, organization_id, create_project_id, update_organization_create_project_request, **kwargs):  # noqa: E501
        """Update create project  # noqa: E501

        Update the properties of a create project job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_create_project_with_http_info(organization_id, create_project_id, update_organization_create_project_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int create_project_id: Create project job ID. (required)
        :param UpdateOrganizationCreateProjectRequest update_organization_create_project_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'create_project_id', 'update_organization_create_project_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_create_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `update_organization_create_project`")  # noqa: E501
        # verify the required parameter 'create_project_id' is set
        if self.api_client.client_side_validation and ('create_project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_project_id` when calling `update_organization_create_project`")  # noqa: E501
        # verify the required parameter 'update_organization_create_project_request' is set
        if self.api_client.client_side_validation and ('update_organization_create_project_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_organization_create_project_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_organization_create_project_request` when calling `update_organization_create_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'create_project_id' in local_var_params:
            path_params['createProjectId'] = local_var_params['create_project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_organization_create_project_request' in local_var_params:
            body_params = local_var_params['update_organization_create_project_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/create-project/{createProjectId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_custom_block(self, organization_id, tar, type, block_id, **kwargs):  # noqa: E501
        """Upload a custom block  # noqa: E501

        Upload a zip file containing a custom transformation or deployment block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_custom_block(organization_id, tar, type, block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param file tar: (required)
        :param str type: (required)
        :param int block_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: StartJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_custom_block_with_http_info(organization_id, tar, type, block_id, **kwargs)  # noqa: E501

    def upload_custom_block_with_http_info(self, organization_id, tar, type, block_id, **kwargs):  # noqa: E501
        """Upload a custom block  # noqa: E501

        Upload a zip file containing a custom transformation or deployment block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_custom_block_with_http_info(organization_id, tar, type, block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param file tar: (required)
        :param str type: (required)
        :param int block_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(StartJobResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'tar', 'type', 'block_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_custom_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `upload_custom_block`")  # noqa: E501
        # verify the required parameter 'tar' is set
        if self.api_client.client_side_validation and ('tar' not in local_var_params or  # noqa: E501
                                                        local_var_params['tar'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tar` when calling `upload_custom_block`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `upload_custom_block`")  # noqa: E501
        # verify the required parameter 'block_id' is set
        if self.api_client.client_side_validation and ('block_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['block_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `block_id` when calling `upload_custom_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tar' in local_var_params:
            local_var_files['tar'] = local_var_params['tar']  # noqa: E501
        if 'type' in local_var_params:
            form_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'block_id' in local_var_params:
            form_params.append(('blockId', local_var_params['block_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/custom-block', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartJobResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
