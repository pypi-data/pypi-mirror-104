# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edge_impulse_sdk.api_client import ApiClient
from edge_impulse_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)


class OrganizationBlocksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_organization_deploy_block(self, organization_id, name, docker_container, description, cli_arguments, **kwargs):  # noqa: E501
        """Add deploy block  # noqa: E501

        Adds a deploy block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_deploy_block(organization_id, name, docker_container, description, cli_arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param str name: (required)
        :param str docker_container: (required)
        :param str description: (required)
        :param str cli_arguments: (required)
        :param float requests_cpu:
        :param float requests_memory:
        :param float limits_cpu:
        :param float limits_memory:
        :param file photo:
        :param str integrate_url:
        :param bool privileged:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AddOrganizationDeployBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_organization_deploy_block_with_http_info(organization_id, name, docker_container, description, cli_arguments, **kwargs)  # noqa: E501

    def add_organization_deploy_block_with_http_info(self, organization_id, name, docker_container, description, cli_arguments, **kwargs):  # noqa: E501
        """Add deploy block  # noqa: E501

        Adds a deploy block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_deploy_block_with_http_info(organization_id, name, docker_container, description, cli_arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param str name: (required)
        :param str docker_container: (required)
        :param str description: (required)
        :param str cli_arguments: (required)
        :param float requests_cpu:
        :param float requests_memory:
        :param float limits_cpu:
        :param float limits_memory:
        :param file photo:
        :param str integrate_url:
        :param bool privileged:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AddOrganizationDeployBlockResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'name', 'docker_container', 'description', 'cli_arguments', 'requests_cpu', 'requests_memory', 'limits_cpu', 'limits_memory', 'photo', 'integrate_url', 'privileged']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_organization_deploy_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `add_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `add_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'docker_container' is set
        if self.api_client.client_side_validation and ('docker_container' not in local_var_params or  # noqa: E501
                                                        local_var_params['docker_container'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `docker_container` when calling `add_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'description' is set
        if self.api_client.client_side_validation and ('description' not in local_var_params or  # noqa: E501
                                                        local_var_params['description'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `description` when calling `add_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'cli_arguments' is set
        if self.api_client.client_side_validation and ('cli_arguments' not in local_var_params or  # noqa: E501
                                                        local_var_params['cli_arguments'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cli_arguments` when calling `add_organization_deploy_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'docker_container' in local_var_params:
            form_params.append(('dockerContainer', local_var_params['docker_container']))  # noqa: E501
        if 'description' in local_var_params:
            form_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'cli_arguments' in local_var_params:
            form_params.append(('cliArguments', local_var_params['cli_arguments']))  # noqa: E501
        if 'requests_cpu' in local_var_params:
            form_params.append(('requestsCpu', local_var_params['requests_cpu']))  # noqa: E501
        if 'requests_memory' in local_var_params:
            form_params.append(('requestsMemory', local_var_params['requests_memory']))  # noqa: E501
        if 'limits_cpu' in local_var_params:
            form_params.append(('limitsCpu', local_var_params['limits_cpu']))  # noqa: E501
        if 'limits_memory' in local_var_params:
            form_params.append(('limitsMemory', local_var_params['limits_memory']))  # noqa: E501
        if 'photo' in local_var_params:
            local_var_files['photo'] = local_var_params['photo']  # noqa: E501
        if 'integrate_url' in local_var_params:
            form_params.append(('integrateUrl', local_var_params['integrate_url']))  # noqa: E501
        if 'privileged' in local_var_params:
            form_params.append(('privileged', local_var_params['privileged']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOrganizationDeployBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_organization_transformation_block(self, organization_id, add_organization_transformation_block_request, **kwargs):  # noqa: E501
        """Add transformation block  # noqa: E501

        Adds a transformation block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_transformation_block(organization_id, add_organization_transformation_block_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param AddOrganizationTransformationBlockRequest add_organization_transformation_block_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AddOrganizationTransformationBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_organization_transformation_block_with_http_info(organization_id, add_organization_transformation_block_request, **kwargs)  # noqa: E501

    def add_organization_transformation_block_with_http_info(self, organization_id, add_organization_transformation_block_request, **kwargs):  # noqa: E501
        """Add transformation block  # noqa: E501

        Adds a transformation block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_transformation_block_with_http_info(organization_id, add_organization_transformation_block_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param AddOrganizationTransformationBlockRequest add_organization_transformation_block_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AddOrganizationTransformationBlockResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'add_organization_transformation_block_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_organization_transformation_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `add_organization_transformation_block`")  # noqa: E501
        # verify the required parameter 'add_organization_transformation_block_request' is set
        if self.api_client.client_side_validation and ('add_organization_transformation_block_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['add_organization_transformation_block_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `add_organization_transformation_block_request` when calling `add_organization_transformation_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_organization_transformation_block_request' in local_var_params:
            body_params = local_var_params['add_organization_transformation_block_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/transformation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOrganizationTransformationBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_deploy_block(self, organization_id, deploy_id, **kwargs):  # noqa: E501
        """Delete deploy block  # noqa: E501

        Deletes a deploy block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_deploy_block(organization_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int deploy_id: Deploy block ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_organization_deploy_block_with_http_info(organization_id, deploy_id, **kwargs)  # noqa: E501

    def delete_organization_deploy_block_with_http_info(self, organization_id, deploy_id, **kwargs):  # noqa: E501
        """Delete deploy block  # noqa: E501

        Deletes a deploy block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_deploy_block_with_http_info(organization_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int deploy_id: Deploy block ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'deploy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_deploy_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `delete_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if self.api_client.client_side_validation and ('deploy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deploy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deploy_id` when calling `delete_organization_deploy_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'deploy_id' in local_var_params:
            path_params['deployId'] = local_var_params['deploy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/deploy/{deployId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_transformation_block(self, organization_id, transformation_id, **kwargs):  # noqa: E501
        """Delete transformation block  # noqa: E501

        Deletes a transformation block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_transformation_block(organization_id, transformation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int transformation_id: Transformation block ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_organization_transformation_block_with_http_info(organization_id, transformation_id, **kwargs)  # noqa: E501

    def delete_organization_transformation_block_with_http_info(self, organization_id, transformation_id, **kwargs):  # noqa: E501
        """Delete transformation block  # noqa: E501

        Deletes a transformation block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_transformation_block_with_http_info(organization_id, transformation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int transformation_id: Transformation block ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'transformation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_transformation_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `delete_organization_transformation_block`")  # noqa: E501
        # verify the required parameter 'transformation_id' is set
        if self.api_client.client_side_validation and ('transformation_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['transformation_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transformation_id` when calling `delete_organization_transformation_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'transformation_id' in local_var_params:
            path_params['transformationId'] = local_var_params['transformation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/transformation/{transformationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_organization_deploy_blocks(self, organization_id, **kwargs):  # noqa: E501
        """Get deploy blocks  # noqa: E501

        Retrieve all deploy blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_organization_deploy_blocks(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ListOrganizationDeployBlocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_organization_deploy_blocks_with_http_info(organization_id, **kwargs)  # noqa: E501

    def list_organization_deploy_blocks_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get deploy blocks  # noqa: E501

        Retrieve all deploy blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_organization_deploy_blocks_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ListOrganizationDeployBlocksResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_organization_deploy_blocks" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `list_organization_deploy_blocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/deploy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOrganizationDeployBlocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_organization_transformation_blocks(self, organization_id, **kwargs):  # noqa: E501
        """Get transformation blocks  # noqa: E501

        Retrieve all transformation blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_organization_transformation_blocks(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ListOrganizationTransformationBlocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_organization_transformation_blocks_with_http_info(organization_id, **kwargs)  # noqa: E501

    def list_organization_transformation_blocks_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get transformation blocks  # noqa: E501

        Retrieve all transformation blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_organization_transformation_blocks_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ListOrganizationTransformationBlocksResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_organization_transformation_blocks" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `list_organization_transformation_blocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/transformation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOrganizationTransformationBlocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_deploy_block(self, organization_id, deploy_id, **kwargs):  # noqa: E501
        """Update deploy block  # noqa: E501

        Updates a deploy block. Only values in the body will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_deploy_block(organization_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int deploy_id: Deploy block ID. (required)
        :param str name:
        :param str docker_container:
        :param str description:
        :param str cli_arguments:
        :param float requests_cpu:
        :param float requests_memory:
        :param float limits_cpu:
        :param float limits_memory:
        :param file photo:
        :param str integrate_url:
        :param bool privileged:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_organization_deploy_block_with_http_info(organization_id, deploy_id, **kwargs)  # noqa: E501

    def update_organization_deploy_block_with_http_info(self, organization_id, deploy_id, **kwargs):  # noqa: E501
        """Update deploy block  # noqa: E501

        Updates a deploy block. Only values in the body will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_deploy_block_with_http_info(organization_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int deploy_id: Deploy block ID. (required)
        :param str name:
        :param str docker_container:
        :param str description:
        :param str cli_arguments:
        :param float requests_cpu:
        :param float requests_memory:
        :param float limits_cpu:
        :param float limits_memory:
        :param file photo:
        :param str integrate_url:
        :param bool privileged:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'deploy_id', 'name', 'docker_container', 'description', 'cli_arguments', 'requests_cpu', 'requests_memory', 'limits_cpu', 'limits_memory', 'photo', 'integrate_url', 'privileged']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_deploy_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `update_organization_deploy_block`")  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if self.api_client.client_side_validation and ('deploy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deploy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deploy_id` when calling `update_organization_deploy_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'deploy_id' in local_var_params:
            path_params['deployId'] = local_var_params['deploy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'docker_container' in local_var_params:
            form_params.append(('dockerContainer', local_var_params['docker_container']))  # noqa: E501
        if 'description' in local_var_params:
            form_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'cli_arguments' in local_var_params:
            form_params.append(('cliArguments', local_var_params['cli_arguments']))  # noqa: E501
        if 'requests_cpu' in local_var_params:
            form_params.append(('requestsCpu', local_var_params['requests_cpu']))  # noqa: E501
        if 'requests_memory' in local_var_params:
            form_params.append(('requestsMemory', local_var_params['requests_memory']))  # noqa: E501
        if 'limits_cpu' in local_var_params:
            form_params.append(('limitsCpu', local_var_params['limits_cpu']))  # noqa: E501
        if 'limits_memory' in local_var_params:
            form_params.append(('limitsMemory', local_var_params['limits_memory']))  # noqa: E501
        if 'photo' in local_var_params:
            local_var_files['photo'] = local_var_params['photo']  # noqa: E501
        if 'integrate_url' in local_var_params:
            form_params.append(('integrateUrl', local_var_params['integrate_url']))  # noqa: E501
        if 'privileged' in local_var_params:
            form_params.append(('privileged', local_var_params['privileged']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/deploy/{deployId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_transformation_block(self, organization_id, transformation_id, update_organization_transformation_block_request, **kwargs):  # noqa: E501
        """Update transformation block  # noqa: E501

        Updates a transformation block. Only values in the body will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_transformation_block(organization_id, transformation_id, update_organization_transformation_block_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int transformation_id: Transformation block ID. (required)
        :param UpdateOrganizationTransformationBlockRequest update_organization_transformation_block_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_organization_transformation_block_with_http_info(organization_id, transformation_id, update_organization_transformation_block_request, **kwargs)  # noqa: E501

    def update_organization_transformation_block_with_http_info(self, organization_id, transformation_id, update_organization_transformation_block_request, **kwargs):  # noqa: E501
        """Update transformation block  # noqa: E501

        Updates a transformation block. Only values in the body will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_transformation_block_with_http_info(organization_id, transformation_id, update_organization_transformation_block_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int organization_id: Organization ID (required)
        :param int transformation_id: Transformation block ID. (required)
        :param UpdateOrganizationTransformationBlockRequest update_organization_transformation_block_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'transformation_id', 'update_organization_transformation_block_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_transformation_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_id` when calling `update_organization_transformation_block`")  # noqa: E501
        # verify the required parameter 'transformation_id' is set
        if self.api_client.client_side_validation and ('transformation_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['transformation_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transformation_id` when calling `update_organization_transformation_block`")  # noqa: E501
        # verify the required parameter 'update_organization_transformation_block_request' is set
        if self.api_client.client_side_validation and ('update_organization_transformation_block_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_organization_transformation_block_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_organization_transformation_block_request` when calling `update_organization_transformation_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organizationId'] = local_var_params['organization_id']  # noqa: E501
        if 'transformation_id' in local_var_params:
            path_params['transformationId'] = local_var_params['transformation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_organization_transformation_block_request' in local_var_params:
            body_params = local_var_params['update_organization_transformation_block_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/organizations/{organizationId}/transformation/{transformationId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
