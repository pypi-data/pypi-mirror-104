# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edge_impulse_sdk.api_client import ApiClient
from edge_impulse_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)


class UploadPortalApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_signed_upload_link(self, portal_id, create_signed_upload_link_request, **kwargs):  # noqa: E501
        """Create pre-signed S3 upload link  # noqa: E501

        Creates a signed link to securelly upload data to s3 bucket directly from the client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_signed_upload_link(portal_id, create_signed_upload_link_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param CreateSignedUploadLinkRequest create_signed_upload_link_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreateSignedUploadLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_signed_upload_link_with_http_info(portal_id, create_signed_upload_link_request, **kwargs)  # noqa: E501

    def create_signed_upload_link_with_http_info(self, portal_id, create_signed_upload_link_request, **kwargs):  # noqa: E501
        """Create pre-signed S3 upload link  # noqa: E501

        Creates a signed link to securelly upload data to s3 bucket directly from the client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_signed_upload_link_with_http_info(portal_id, create_signed_upload_link_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param CreateSignedUploadLinkRequest create_signed_upload_link_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreateSignedUploadLinkResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['portal_id', 'create_signed_upload_link_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_signed_upload_link" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'portal_id' is set
        if self.api_client.client_side_validation and ('portal_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['portal_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `portal_id` when calling `create_signed_upload_link`")  # noqa: E501
        # verify the required parameter 'create_signed_upload_link_request' is set
        if self.api_client.client_side_validation and ('create_signed_upload_link_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_signed_upload_link_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_signed_upload_link_request` when calling `create_signed_upload_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portal_id' in local_var_params:
            path_params['portalId'] = local_var_params['portal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_signed_upload_link_request' in local_var_params:
            body_params = local_var_params['create_signed_upload_link_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/portals/{portalId}/upload-link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSignedUploadLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_info(self, portal_id, **kwargs):  # noqa: E501
        """Portal info  # noqa: E501

        Get information about a portal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_info(portal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PortalInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_portal_info_with_http_info(portal_id, **kwargs)  # noqa: E501

    def get_portal_info_with_http_info(self, portal_id, **kwargs):  # noqa: E501
        """Portal info  # noqa: E501

        Get information about a portal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_info_with_http_info(portal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PortalInfoResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['portal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'portal_id' is set
        if self.api_client.client_side_validation and ('portal_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['portal_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `portal_id` when calling `get_portal_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portal_id' in local_var_params:
            path_params['portalId'] = local_var_params['portal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/portals/{portalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_portal_files_in_folder(self, portal_id, list_portal_files_in_folder_request, **kwargs):  # noqa: E501
        """List files in portal folder  # noqa: E501

        List all files and directories in specified prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_portal_files_in_folder(portal_id, list_portal_files_in_folder_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param ListPortalFilesInFolderRequest list_portal_files_in_folder_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ListPortalFilesInFolderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_portal_files_in_folder_with_http_info(portal_id, list_portal_files_in_folder_request, **kwargs)  # noqa: E501

    def list_portal_files_in_folder_with_http_info(self, portal_id, list_portal_files_in_folder_request, **kwargs):  # noqa: E501
        """List files in portal folder  # noqa: E501

        List all files and directories in specified prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_portal_files_in_folder_with_http_info(portal_id, list_portal_files_in_folder_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int portal_id: Portal ID (required)
        :param ListPortalFilesInFolderRequest list_portal_files_in_folder_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ListPortalFilesInFolderResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['portal_id', 'list_portal_files_in_folder_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_portal_files_in_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'portal_id' is set
        if self.api_client.client_side_validation and ('portal_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['portal_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `portal_id` when calling `list_portal_files_in_folder`")  # noqa: E501
        # verify the required parameter 'list_portal_files_in_folder_request' is set
        if self.api_client.client_side_validation and ('list_portal_files_in_folder_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_portal_files_in_folder_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_portal_files_in_folder_request` when calling `list_portal_files_in_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portal_id' in local_var_params:
            path_params['portalId'] = local_var_params['portal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'list_portal_files_in_folder_request' in local_var_params:
            body_params = local_var_params['list_portal_files_in_folder_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/portals/{portalId}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPortalFilesInFolderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
