# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class UpdateOrganizationCreateProjectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transformation_parallel': 'int',
        'email_recipient_uids': 'list[float]'
    }

    attribute_map = {
        'transformation_parallel': 'transformationParallel',
        'email_recipient_uids': 'emailRecipientUids'
    }

    def __init__(self, transformation_parallel=None, email_recipient_uids=None, local_vars_configuration=None):  # noqa: E501
        """UpdateOrganizationCreateProjectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transformation_parallel = None
        self._email_recipient_uids = None
        self.discriminator = None

        if transformation_parallel is not None:
            self.transformation_parallel = transformation_parallel
        if email_recipient_uids is not None:
            self.email_recipient_uids = email_recipient_uids

    @property
    def transformation_parallel(self):
        """Gets the transformation_parallel of this UpdateOrganizationCreateProjectRequest.  # noqa: E501

        Number of transformation jobs that can be ran in parallel  # noqa: E501

        :return: The transformation_parallel of this UpdateOrganizationCreateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._transformation_parallel

    @transformation_parallel.setter
    def transformation_parallel(self, transformation_parallel):
        """Sets the transformation_parallel of this UpdateOrganizationCreateProjectRequest.

        Number of transformation jobs that can be ran in parallel  # noqa: E501

        :param transformation_parallel: The transformation_parallel of this UpdateOrganizationCreateProjectRequest.  # noqa: E501
        :type: int
        """

        self._transformation_parallel = transformation_parallel

    @property
    def email_recipient_uids(self):
        """Gets the email_recipient_uids of this UpdateOrganizationCreateProjectRequest.  # noqa: E501

        List of user IDs to notify when a Job succeeds  # noqa: E501

        :return: The email_recipient_uids of this UpdateOrganizationCreateProjectRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._email_recipient_uids

    @email_recipient_uids.setter
    def email_recipient_uids(self, email_recipient_uids):
        """Sets the email_recipient_uids of this UpdateOrganizationCreateProjectRequest.

        List of user IDs to notify when a Job succeeds  # noqa: E501

        :param email_recipient_uids: The email_recipient_uids of this UpdateOrganizationCreateProjectRequest.  # noqa: E501
        :type: list[float]
        """

        self._email_recipient_uids = email_recipient_uids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrganizationCreateProjectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateOrganizationCreateProjectRequest):
            return True

        return self.to_dict() != other.to_dict()
