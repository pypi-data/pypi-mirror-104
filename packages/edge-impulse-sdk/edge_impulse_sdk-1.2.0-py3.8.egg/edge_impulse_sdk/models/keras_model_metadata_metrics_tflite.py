# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasModelMetadataMetricsTflite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ram_required': 'int',
        'rom_required': 'int',
        'arena_size': 'int',
        'model_size': 'int'
    }

    attribute_map = {
        'ram_required': 'ramRequired',
        'rom_required': 'romRequired',
        'arena_size': 'arenaSize',
        'model_size': 'modelSize'
    }

    def __init__(self, ram_required=None, rom_required=None, arena_size=None, model_size=None, local_vars_configuration=None):  # noqa: E501
        """KerasModelMetadataMetricsTflite - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ram_required = None
        self._rom_required = None
        self._arena_size = None
        self._model_size = None
        self.discriminator = None

        self.ram_required = ram_required
        self.rom_required = rom_required
        self.arena_size = arena_size
        self.model_size = model_size

    @property
    def ram_required(self):
        """Gets the ram_required of this KerasModelMetadataMetricsTflite.  # noqa: E501


        :return: The ram_required of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :rtype: int
        """
        return self._ram_required

    @ram_required.setter
    def ram_required(self, ram_required):
        """Sets the ram_required of this KerasModelMetadataMetricsTflite.


        :param ram_required: The ram_required of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and ram_required is None:  # noqa: E501
            raise ValueError("Invalid value for `ram_required`, must not be `None`")  # noqa: E501

        self._ram_required = ram_required

    @property
    def rom_required(self):
        """Gets the rom_required of this KerasModelMetadataMetricsTflite.  # noqa: E501


        :return: The rom_required of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :rtype: int
        """
        return self._rom_required

    @rom_required.setter
    def rom_required(self, rom_required):
        """Sets the rom_required of this KerasModelMetadataMetricsTflite.


        :param rom_required: The rom_required of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and rom_required is None:  # noqa: E501
            raise ValueError("Invalid value for `rom_required`, must not be `None`")  # noqa: E501

        self._rom_required = rom_required

    @property
    def arena_size(self):
        """Gets the arena_size of this KerasModelMetadataMetricsTflite.  # noqa: E501


        :return: The arena_size of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :rtype: int
        """
        return self._arena_size

    @arena_size.setter
    def arena_size(self, arena_size):
        """Sets the arena_size of this KerasModelMetadataMetricsTflite.


        :param arena_size: The arena_size of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and arena_size is None:  # noqa: E501
            raise ValueError("Invalid value for `arena_size`, must not be `None`")  # noqa: E501

        self._arena_size = arena_size

    @property
    def model_size(self):
        """Gets the model_size of this KerasModelMetadataMetricsTflite.  # noqa: E501


        :return: The model_size of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :rtype: int
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this KerasModelMetadataMetricsTflite.


        :param model_size: The model_size of this KerasModelMetadataMetricsTflite.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and model_size is None:  # noqa: E501
            raise ValueError("Invalid value for `model_size`, must not be `None`")  # noqa: E501

        self._model_size = model_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasModelMetadataMetricsTflite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasModelMetadataMetricsTflite):
            return True

        return self.to_dict() != other.to_dict()
