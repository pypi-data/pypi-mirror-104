# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OptimizeStateResponseAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config': 'OptimizeConfig',
        'status': 'OptimizeStateResponseAllOfStatus',
        'active_tuner_job_id': 'float',
        'trials': 'list[TunerTrial]',
        'workers': 'list[OptimizeStateResponseAllOfWorkers]'
    }

    attribute_map = {
        'config': 'config',
        'status': 'status',
        'active_tuner_job_id': 'activeTunerJobId',
        'trials': 'trials',
        'workers': 'workers'
    }

    def __init__(self, config=None, status=None, active_tuner_job_id=None, trials=None, workers=None, local_vars_configuration=None):  # noqa: E501
        """OptimizeStateResponseAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config = None
        self._status = None
        self._active_tuner_job_id = None
        self._trials = None
        self._workers = None
        self.discriminator = None

        self.config = config
        self.status = status
        if active_tuner_job_id is not None:
            self.active_tuner_job_id = active_tuner_job_id
        self.trials = trials
        self.workers = workers

    @property
    def config(self):
        """Gets the config of this OptimizeStateResponseAllOf.  # noqa: E501


        :return: The config of this OptimizeStateResponseAllOf.  # noqa: E501
        :rtype: OptimizeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this OptimizeStateResponseAllOf.


        :param config: The config of this OptimizeStateResponseAllOf.  # noqa: E501
        :type: OptimizeConfig
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def status(self):
        """Gets the status of this OptimizeStateResponseAllOf.  # noqa: E501


        :return: The status of this OptimizeStateResponseAllOf.  # noqa: E501
        :rtype: OptimizeStateResponseAllOfStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OptimizeStateResponseAllOf.


        :param status: The status of this OptimizeStateResponseAllOf.  # noqa: E501
        :type: OptimizeStateResponseAllOfStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def active_tuner_job_id(self):
        """Gets the active_tuner_job_id of this OptimizeStateResponseAllOf.  # noqa: E501


        :return: The active_tuner_job_id of this OptimizeStateResponseAllOf.  # noqa: E501
        :rtype: float
        """
        return self._active_tuner_job_id

    @active_tuner_job_id.setter
    def active_tuner_job_id(self, active_tuner_job_id):
        """Sets the active_tuner_job_id of this OptimizeStateResponseAllOf.


        :param active_tuner_job_id: The active_tuner_job_id of this OptimizeStateResponseAllOf.  # noqa: E501
        :type: float
        """

        self._active_tuner_job_id = active_tuner_job_id

    @property
    def trials(self):
        """Gets the trials of this OptimizeStateResponseAllOf.  # noqa: E501


        :return: The trials of this OptimizeStateResponseAllOf.  # noqa: E501
        :rtype: list[TunerTrial]
        """
        return self._trials

    @trials.setter
    def trials(self, trials):
        """Sets the trials of this OptimizeStateResponseAllOf.


        :param trials: The trials of this OptimizeStateResponseAllOf.  # noqa: E501
        :type: list[TunerTrial]
        """
        if self.local_vars_configuration.client_side_validation and trials is None:  # noqa: E501
            raise ValueError("Invalid value for `trials`, must not be `None`")  # noqa: E501

        self._trials = trials

    @property
    def workers(self):
        """Gets the workers of this OptimizeStateResponseAllOf.  # noqa: E501


        :return: The workers of this OptimizeStateResponseAllOf.  # noqa: E501
        :rtype: list[OptimizeStateResponseAllOfWorkers]
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this OptimizeStateResponseAllOf.


        :param workers: The workers of this OptimizeStateResponseAllOf.  # noqa: E501
        :type: list[OptimizeStateResponseAllOfWorkers]
        """
        if self.local_vars_configuration.client_side_validation and workers is None:  # noqa: E501
            raise ValueError("Invalid value for `workers`, must not be `None`")  # noqa: E501

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizeStateResponseAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizeStateResponseAllOf):
            return True

        return self.to_dict() != other.to_dict()
