# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class TunerTrialKerasTunerTrial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trial_id': 'str',
        'status': 'str',
        'score': 'TunerTrialKerasTunerTrialScore',
        'metrics': 'object',
        'hyperparameters': 'TunerTrialKerasTunerTrialHyperparameters'
    }

    attribute_map = {
        'trial_id': 'trialId',
        'status': 'status',
        'score': 'score',
        'metrics': 'metrics',
        'hyperparameters': 'hyperparameters'
    }

    def __init__(self, trial_id=None, status=None, score=None, metrics=None, hyperparameters=None, local_vars_configuration=None):  # noqa: E501
        """TunerTrialKerasTunerTrial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trial_id = None
        self._status = None
        self._score = None
        self._metrics = None
        self._hyperparameters = None
        self.discriminator = None

        if trial_id is not None:
            self.trial_id = trial_id
        if status is not None:
            self.status = status
        if score is not None:
            self.score = score
        if metrics is not None:
            self.metrics = metrics
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters

    @property
    def trial_id(self):
        """Gets the trial_id of this TunerTrialKerasTunerTrial.  # noqa: E501


        :return: The trial_id of this TunerTrialKerasTunerTrial.  # noqa: E501
        :rtype: str
        """
        return self._trial_id

    @trial_id.setter
    def trial_id(self, trial_id):
        """Sets the trial_id of this TunerTrialKerasTunerTrial.


        :param trial_id: The trial_id of this TunerTrialKerasTunerTrial.  # noqa: E501
        :type: str
        """

        self._trial_id = trial_id

    @property
    def status(self):
        """Gets the status of this TunerTrialKerasTunerTrial.  # noqa: E501


        :return: The status of this TunerTrialKerasTunerTrial.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TunerTrialKerasTunerTrial.


        :param status: The status of this TunerTrialKerasTunerTrial.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def score(self):
        """Gets the score of this TunerTrialKerasTunerTrial.  # noqa: E501


        :return: The score of this TunerTrialKerasTunerTrial.  # noqa: E501
        :rtype: TunerTrialKerasTunerTrialScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TunerTrialKerasTunerTrial.


        :param score: The score of this TunerTrialKerasTunerTrial.  # noqa: E501
        :type: TunerTrialKerasTunerTrialScore
        """

        self._score = score

    @property
    def metrics(self):
        """Gets the metrics of this TunerTrialKerasTunerTrial.  # noqa: E501


        :return: The metrics of this TunerTrialKerasTunerTrial.  # noqa: E501
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TunerTrialKerasTunerTrial.


        :param metrics: The metrics of this TunerTrialKerasTunerTrial.  # noqa: E501
        :type: object
        """

        self._metrics = metrics

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this TunerTrialKerasTunerTrial.  # noqa: E501


        :return: The hyperparameters of this TunerTrialKerasTunerTrial.  # noqa: E501
        :rtype: TunerTrialKerasTunerTrialHyperparameters
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this TunerTrialKerasTunerTrial.


        :param hyperparameters: The hyperparameters of this TunerTrialKerasTunerTrial.  # noqa: E501
        :type: TunerTrialKerasTunerTrialHyperparameters
        """

        self._hyperparameters = hyperparameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunerTrialKerasTunerTrial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TunerTrialKerasTunerTrial):
            return True

        return self.to_dict() != other.to_dict()
