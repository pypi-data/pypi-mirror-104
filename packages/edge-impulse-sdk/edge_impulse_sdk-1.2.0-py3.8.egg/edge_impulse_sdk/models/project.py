# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'created': 'datetime',
        'owner': 'str',
        'logo': 'str',
        'owner_user_id': 'int',
        'owner_organization_id': 'int',
        'collaborators': 'list[User]',
        'labeling_method': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'created': 'created',
        'owner': 'owner',
        'logo': 'logo',
        'owner_user_id': 'ownerUserId',
        'owner_organization_id': 'ownerOrganizationId',
        'collaborators': 'collaborators',
        'labeling_method': 'labelingMethod'
    }

    def __init__(self, id=None, name=None, description=None, created=None, owner=None, logo=None, owner_user_id=None, owner_organization_id=None, collaborators=None, labeling_method=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._created = None
        self._owner = None
        self._logo = None
        self._owner_user_id = None
        self._owner_organization_id = None
        self._collaborators = None
        self._labeling_method = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.description = description
        self.created = created
        self.owner = owner
        if logo is not None:
            self.logo = logo
        if owner_user_id is not None:
            self.owner_user_id = owner_user_id
        if owner_organization_id is not None:
            self.owner_organization_id = owner_organization_id
        self.collaborators = collaborators
        self.labeling_method = labeling_method

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created(self):
        """Gets the created of this Project.  # noqa: E501


        :return: The created of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def owner(self):
        """Gets the owner of this Project.  # noqa: E501

        User or organization that owns the project  # noqa: E501

        :return: The owner of this Project.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.

        User or organization that owns the project  # noqa: E501

        :param owner: The owner of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def logo(self):
        """Gets the logo of this Project.  # noqa: E501

        Custom logo for this project (not available for all projects)  # noqa: E501

        :return: The logo of this Project.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Project.

        Custom logo for this project (not available for all projects)  # noqa: E501

        :param logo: The logo of this Project.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def owner_user_id(self):
        """Gets the owner_user_id of this Project.  # noqa: E501


        :return: The owner_user_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._owner_user_id

    @owner_user_id.setter
    def owner_user_id(self, owner_user_id):
        """Sets the owner_user_id of this Project.


        :param owner_user_id: The owner_user_id of this Project.  # noqa: E501
        :type: int
        """

        self._owner_user_id = owner_user_id

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this Project.  # noqa: E501


        :return: The owner_organization_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this Project.


        :param owner_organization_id: The owner_organization_id of this Project.  # noqa: E501
        :type: int
        """

        self._owner_organization_id = owner_organization_id

    @property
    def collaborators(self):
        """Gets the collaborators of this Project.  # noqa: E501


        :return: The collaborators of this Project.  # noqa: E501
        :rtype: list[User]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Project.


        :param collaborators: The collaborators of this Project.  # noqa: E501
        :type: list[User]
        """
        if self.local_vars_configuration.client_side_validation and collaborators is None:  # noqa: E501
            raise ValueError("Invalid value for `collaborators`, must not be `None`")  # noqa: E501

        self._collaborators = collaborators

    @property
    def labeling_method(self):
        """Gets the labeling_method of this Project.  # noqa: E501


        :return: The labeling_method of this Project.  # noqa: E501
        :rtype: str
        """
        return self._labeling_method

    @labeling_method.setter
    def labeling_method(self, labeling_method):
        """Sets the labeling_method of this Project.


        :param labeling_method: The labeling_method of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and labeling_method is None:  # noqa: E501
            raise ValueError("Invalid value for `labeling_method`, must not be `None`")  # noqa: E501
        allowed_values = ["single_label", "object_detection"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and labeling_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `labeling_method` ({0}), must be one of {1}"  # noqa: E501
                .format(labeling_method, allowed_values)
            )

        self._labeling_method = labeling_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
