# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationInfoResponseAllOfDefaultComputeLimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requests_cpu': 'float',
        'requests_memory': 'float',
        'limits_cpu': 'float',
        'limits_memory': 'float'
    }

    attribute_map = {
        'requests_cpu': 'requestsCpu',
        'requests_memory': 'requestsMemory',
        'limits_cpu': 'limitsCpu',
        'limits_memory': 'limitsMemory'
    }

    def __init__(self, requests_cpu=None, requests_memory=None, limits_cpu=None, limits_memory=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationInfoResponseAllOfDefaultComputeLimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._requests_cpu = None
        self._requests_memory = None
        self._limits_cpu = None
        self._limits_memory = None
        self.discriminator = None

        self.requests_cpu = requests_cpu
        self.requests_memory = requests_memory
        self.limits_cpu = limits_cpu
        self.limits_memory = limits_memory

    @property
    def requests_cpu(self):
        """Gets the requests_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501


        :return: The requests_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :rtype: float
        """
        return self._requests_cpu

    @requests_cpu.setter
    def requests_cpu(self, requests_cpu):
        """Sets the requests_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.


        :param requests_cpu: The requests_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and requests_cpu is None:  # noqa: E501
            raise ValueError("Invalid value for `requests_cpu`, must not be `None`")  # noqa: E501

        self._requests_cpu = requests_cpu

    @property
    def requests_memory(self):
        """Gets the requests_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501


        :return: The requests_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :rtype: float
        """
        return self._requests_memory

    @requests_memory.setter
    def requests_memory(self, requests_memory):
        """Sets the requests_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.


        :param requests_memory: The requests_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and requests_memory is None:  # noqa: E501
            raise ValueError("Invalid value for `requests_memory`, must not be `None`")  # noqa: E501

        self._requests_memory = requests_memory

    @property
    def limits_cpu(self):
        """Gets the limits_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501


        :return: The limits_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :rtype: float
        """
        return self._limits_cpu

    @limits_cpu.setter
    def limits_cpu(self, limits_cpu):
        """Sets the limits_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.


        :param limits_cpu: The limits_cpu of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and limits_cpu is None:  # noqa: E501
            raise ValueError("Invalid value for `limits_cpu`, must not be `None`")  # noqa: E501

        self._limits_cpu = limits_cpu

    @property
    def limits_memory(self):
        """Gets the limits_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501


        :return: The limits_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :rtype: float
        """
        return self._limits_memory

    @limits_memory.setter
    def limits_memory(self, limits_memory):
        """Sets the limits_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.


        :param limits_memory: The limits_memory of this OrganizationInfoResponseAllOfDefaultComputeLimits.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and limits_memory is None:  # noqa: E501
            raise ValueError("Invalid value for `limits_memory`, must not be `None`")  # noqa: E501

        self._limits_memory = limits_memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationInfoResponseAllOfDefaultComputeLimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationInfoResponseAllOfDefaultComputeLimits):
            return True

        return self.to_dict() != other.to_dict()
