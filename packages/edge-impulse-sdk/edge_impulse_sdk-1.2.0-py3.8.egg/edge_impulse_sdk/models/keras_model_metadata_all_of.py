# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasModelMetadataAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'layers': 'list[KerasModelLayer]',
        'class_names': 'list[str]',
        'available_model_types': 'list[KerasModelTypeEnum]',
        'recommended_model_type': 'KerasModelTypeEnum',
        'model_validation_metrics': 'list[KerasModelMetadataMetrics]',
        'has_trained_model': 'bool',
        'mode': 'str'
    }

    attribute_map = {
        'created': 'created',
        'layers': 'layers',
        'class_names': 'class_names',
        'available_model_types': 'available_model_types',
        'recommended_model_type': 'recommended_model_type',
        'model_validation_metrics': 'model_validation_metrics',
        'has_trained_model': 'hasTrainedModel',
        'mode': 'mode'
    }

    def __init__(self, created=None, layers=None, class_names=None, available_model_types=None, recommended_model_type=None, model_validation_metrics=None, has_trained_model=None, mode=None, local_vars_configuration=None):  # noqa: E501
        """KerasModelMetadataAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._layers = None
        self._class_names = None
        self._available_model_types = None
        self._recommended_model_type = None
        self._model_validation_metrics = None
        self._has_trained_model = None
        self._mode = None
        self.discriminator = None

        self.created = created
        self.layers = layers
        self.class_names = class_names
        self.available_model_types = available_model_types
        self.recommended_model_type = recommended_model_type
        self.model_validation_metrics = model_validation_metrics
        self.has_trained_model = has_trained_model
        self.mode = mode

    @property
    def created(self):
        """Gets the created of this KerasModelMetadataAllOf.  # noqa: E501

        Date when the model was trained  # noqa: E501

        :return: The created of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this KerasModelMetadataAllOf.

        Date when the model was trained  # noqa: E501

        :param created: The created of this KerasModelMetadataAllOf.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def layers(self):
        """Gets the layers of this KerasModelMetadataAllOf.  # noqa: E501

        Layers of the neural network  # noqa: E501

        :return: The layers of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[KerasModelLayer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this KerasModelMetadataAllOf.

        Layers of the neural network  # noqa: E501

        :param layers: The layers of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[KerasModelLayer]
        """
        if self.local_vars_configuration.client_side_validation and layers is None:  # noqa: E501
            raise ValueError("Invalid value for `layers`, must not be `None`")  # noqa: E501

        self._layers = layers

    @property
    def class_names(self):
        """Gets the class_names of this KerasModelMetadataAllOf.  # noqa: E501

        Labels for the output layer  # noqa: E501

        :return: The class_names of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._class_names

    @class_names.setter
    def class_names(self, class_names):
        """Sets the class_names of this KerasModelMetadataAllOf.

        Labels for the output layer  # noqa: E501

        :param class_names: The class_names of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and class_names is None:  # noqa: E501
            raise ValueError("Invalid value for `class_names`, must not be `None`")  # noqa: E501

        self._class_names = class_names

    @property
    def available_model_types(self):
        """Gets the available_model_types of this KerasModelMetadataAllOf.  # noqa: E501

        The types of model that are available  # noqa: E501

        :return: The available_model_types of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[KerasModelTypeEnum]
        """
        return self._available_model_types

    @available_model_types.setter
    def available_model_types(self, available_model_types):
        """Sets the available_model_types of this KerasModelMetadataAllOf.

        The types of model that are available  # noqa: E501

        :param available_model_types: The available_model_types of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[KerasModelTypeEnum]
        """
        if self.local_vars_configuration.client_side_validation and available_model_types is None:  # noqa: E501
            raise ValueError("Invalid value for `available_model_types`, must not be `None`")  # noqa: E501

        self._available_model_types = available_model_types

    @property
    def recommended_model_type(self):
        """Gets the recommended_model_type of this KerasModelMetadataAllOf.  # noqa: E501


        :return: The recommended_model_type of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: KerasModelTypeEnum
        """
        return self._recommended_model_type

    @recommended_model_type.setter
    def recommended_model_type(self, recommended_model_type):
        """Sets the recommended_model_type of this KerasModelMetadataAllOf.


        :param recommended_model_type: The recommended_model_type of this KerasModelMetadataAllOf.  # noqa: E501
        :type: KerasModelTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and recommended_model_type is None:  # noqa: E501
            raise ValueError("Invalid value for `recommended_model_type`, must not be `None`")  # noqa: E501

        self._recommended_model_type = recommended_model_type

    @property
    def model_validation_metrics(self):
        """Gets the model_validation_metrics of this KerasModelMetadataAllOf.  # noqa: E501

        Metrics for each of the available model types  # noqa: E501

        :return: The model_validation_metrics of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: list[KerasModelMetadataMetrics]
        """
        return self._model_validation_metrics

    @model_validation_metrics.setter
    def model_validation_metrics(self, model_validation_metrics):
        """Sets the model_validation_metrics of this KerasModelMetadataAllOf.

        Metrics for each of the available model types  # noqa: E501

        :param model_validation_metrics: The model_validation_metrics of this KerasModelMetadataAllOf.  # noqa: E501
        :type: list[KerasModelMetadataMetrics]
        """
        if self.local_vars_configuration.client_side_validation and model_validation_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `model_validation_metrics`, must not be `None`")  # noqa: E501

        self._model_validation_metrics = model_validation_metrics

    @property
    def has_trained_model(self):
        """Gets the has_trained_model of this KerasModelMetadataAllOf.  # noqa: E501


        :return: The has_trained_model of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._has_trained_model

    @has_trained_model.setter
    def has_trained_model(self, has_trained_model):
        """Sets the has_trained_model of this KerasModelMetadataAllOf.


        :param has_trained_model: The has_trained_model of this KerasModelMetadataAllOf.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_trained_model is None:  # noqa: E501
            raise ValueError("Invalid value for `has_trained_model`, must not be `None`")  # noqa: E501

        self._has_trained_model = has_trained_model

    @property
    def mode(self):
        """Gets the mode of this KerasModelMetadataAllOf.  # noqa: E501


        :return: The mode of this KerasModelMetadataAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this KerasModelMetadataAllOf.


        :param mode: The mode of this KerasModelMetadataAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["classification", "regression", "object-detection"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasModelMetadataAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasModelMetadataAllOf):
            return True

        return self.to_dict() != other.to_dict()
