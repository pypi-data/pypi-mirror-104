# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationCreateProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'organization_id': 'int',
        'name': 'str',
        'upload_type': 'str',
        'transform_job_status': 'str',
        'upload_job_id': 'int',
        'upload_job_status': 'str',
        'upload_job_files_uploaded': 'int',
        'project_owner': 'str',
        'project_id': 'int',
        'project_name': 'str',
        'transformation_block_id': 'int',
        'transformation_block_name': 'str',
        'category': 'str',
        'created': 'datetime',
        'output_dataset_name': 'str',
        'total_download_file_count': 'int',
        'total_download_file_size': 'int',
        'total_download_file_size_string': 'str',
        'total_upload_file_count': 'int',
        'transformation_parallel': 'int',
        'transformation_summary': 'OrganizationCreateProjectTransformationSummary',
        'files': 'list[OrganizationCreateProjectFiles]',
        'in_progress': 'bool',
        'label': 'str',
        'email_recipient_uids': 'list[float]'
    }

    attribute_map = {
        'id': 'id',
        'organization_id': 'organizationId',
        'name': 'name',
        'upload_type': 'uploadType',
        'transform_job_status': 'transformJobStatus',
        'upload_job_id': 'uploadJobId',
        'upload_job_status': 'uploadJobStatus',
        'upload_job_files_uploaded': 'uploadJobFilesUploaded',
        'project_owner': 'projectOwner',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'transformation_block_id': 'transformationBlockId',
        'transformation_block_name': 'transformationBlockName',
        'category': 'category',
        'created': 'created',
        'output_dataset_name': 'outputDatasetName',
        'total_download_file_count': 'totalDownloadFileCount',
        'total_download_file_size': 'totalDownloadFileSize',
        'total_download_file_size_string': 'totalDownloadFileSizeString',
        'total_upload_file_count': 'totalUploadFileCount',
        'transformation_parallel': 'transformationParallel',
        'transformation_summary': 'transformationSummary',
        'files': 'files',
        'in_progress': 'inProgress',
        'label': 'label',
        'email_recipient_uids': 'emailRecipientUids'
    }

    def __init__(self, id=None, organization_id=None, name=None, upload_type=None, transform_job_status=None, upload_job_id=None, upload_job_status=None, upload_job_files_uploaded=None, project_owner=None, project_id=None, project_name=None, transformation_block_id=None, transformation_block_name=None, category=None, created=None, output_dataset_name=None, total_download_file_count=None, total_download_file_size=None, total_download_file_size_string=None, total_upload_file_count=None, transformation_parallel=None, transformation_summary=None, files=None, in_progress=None, label=None, email_recipient_uids=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationCreateProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._organization_id = None
        self._name = None
        self._upload_type = None
        self._transform_job_status = None
        self._upload_job_id = None
        self._upload_job_status = None
        self._upload_job_files_uploaded = None
        self._project_owner = None
        self._project_id = None
        self._project_name = None
        self._transformation_block_id = None
        self._transformation_block_name = None
        self._category = None
        self._created = None
        self._output_dataset_name = None
        self._total_download_file_count = None
        self._total_download_file_size = None
        self._total_download_file_size_string = None
        self._total_upload_file_count = None
        self._transformation_parallel = None
        self._transformation_summary = None
        self._files = None
        self._in_progress = None
        self._label = None
        self._email_recipient_uids = None
        self.discriminator = None

        self.id = id
        self.organization_id = organization_id
        self.name = name
        self.upload_type = upload_type
        self.transform_job_status = transform_job_status
        if upload_job_id is not None:
            self.upload_job_id = upload_job_id
        self.upload_job_status = upload_job_status
        if upload_job_files_uploaded is not None:
            self.upload_job_files_uploaded = upload_job_files_uploaded
        if project_owner is not None:
            self.project_owner = project_owner
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if transformation_block_id is not None:
            self.transformation_block_id = transformation_block_id
        if transformation_block_name is not None:
            self.transformation_block_name = transformation_block_name
        self.category = category
        self.created = created
        if output_dataset_name is not None:
            self.output_dataset_name = output_dataset_name
        self.total_download_file_count = total_download_file_count
        self.total_download_file_size = total_download_file_size
        self.total_download_file_size_string = total_download_file_size_string
        self.total_upload_file_count = total_upload_file_count
        self.transformation_parallel = transformation_parallel
        self.transformation_summary = transformation_summary
        self.files = files
        self.in_progress = in_progress
        if label is not None:
            self.label = label
        if email_recipient_uids is not None:
            self.email_recipient_uids = email_recipient_uids

    @property
    def id(self):
        """Gets the id of this OrganizationCreateProject.  # noqa: E501


        :return: The id of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationCreateProject.


        :param id: The id of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationCreateProject.  # noqa: E501


        :return: The organization_id of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationCreateProject.


        :param organization_id: The organization_id of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this OrganizationCreateProject.  # noqa: E501


        :return: The name of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationCreateProject.


        :param name: The name of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def upload_type(self):
        """Gets the upload_type of this OrganizationCreateProject.  # noqa: E501


        :return: The upload_type of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this OrganizationCreateProject.


        :param upload_type: The upload_type of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and upload_type is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_type`, must not be `None`")  # noqa: E501
        allowed_values = ["dataset", "project"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upload_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upload_type` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_type, allowed_values)
            )

        self._upload_type = upload_type

    @property
    def transform_job_status(self):
        """Gets the transform_job_status of this OrganizationCreateProject.  # noqa: E501


        :return: The transform_job_status of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._transform_job_status

    @transform_job_status.setter
    def transform_job_status(self, transform_job_status):
        """Sets the transform_job_status of this OrganizationCreateProject.


        :param transform_job_status: The transform_job_status of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and transform_job_status is None:  # noqa: E501
            raise ValueError("Invalid value for `transform_job_status`, must not be `None`")  # noqa: E501
        allowed_values = ["waiting", "created", "started", "finished", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transform_job_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transform_job_status` ({0}), must be one of {1}"  # noqa: E501
                .format(transform_job_status, allowed_values)
            )

        self._transform_job_status = transform_job_status

    @property
    def upload_job_id(self):
        """Gets the upload_job_id of this OrganizationCreateProject.  # noqa: E501


        :return: The upload_job_id of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._upload_job_id

    @upload_job_id.setter
    def upload_job_id(self, upload_job_id):
        """Sets the upload_job_id of this OrganizationCreateProject.


        :param upload_job_id: The upload_job_id of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """

        self._upload_job_id = upload_job_id

    @property
    def upload_job_status(self):
        """Gets the upload_job_status of this OrganizationCreateProject.  # noqa: E501


        :return: The upload_job_status of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._upload_job_status

    @upload_job_status.setter
    def upload_job_status(self, upload_job_status):
        """Sets the upload_job_status of this OrganizationCreateProject.


        :param upload_job_status: The upload_job_status of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and upload_job_status is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_job_status`, must not be `None`")  # noqa: E501
        allowed_values = ["waiting", "created", "started", "finished", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upload_job_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upload_job_status` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_job_status, allowed_values)
            )

        self._upload_job_status = upload_job_status

    @property
    def upload_job_files_uploaded(self):
        """Gets the upload_job_files_uploaded of this OrganizationCreateProject.  # noqa: E501


        :return: The upload_job_files_uploaded of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._upload_job_files_uploaded

    @upload_job_files_uploaded.setter
    def upload_job_files_uploaded(self, upload_job_files_uploaded):
        """Sets the upload_job_files_uploaded of this OrganizationCreateProject.


        :param upload_job_files_uploaded: The upload_job_files_uploaded of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """

        self._upload_job_files_uploaded = upload_job_files_uploaded

    @property
    def project_owner(self):
        """Gets the project_owner of this OrganizationCreateProject.  # noqa: E501


        :return: The project_owner of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._project_owner

    @project_owner.setter
    def project_owner(self, project_owner):
        """Sets the project_owner of this OrganizationCreateProject.


        :param project_owner: The project_owner of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """

        self._project_owner = project_owner

    @property
    def project_id(self):
        """Gets the project_id of this OrganizationCreateProject.  # noqa: E501


        :return: The project_id of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this OrganizationCreateProject.


        :param project_id: The project_id of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this OrganizationCreateProject.  # noqa: E501


        :return: The project_name of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this OrganizationCreateProject.


        :param project_name: The project_name of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def transformation_block_id(self):
        """Gets the transformation_block_id of this OrganizationCreateProject.  # noqa: E501


        :return: The transformation_block_id of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._transformation_block_id

    @transformation_block_id.setter
    def transformation_block_id(self, transformation_block_id):
        """Sets the transformation_block_id of this OrganizationCreateProject.


        :param transformation_block_id: The transformation_block_id of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """

        self._transformation_block_id = transformation_block_id

    @property
    def transformation_block_name(self):
        """Gets the transformation_block_name of this OrganizationCreateProject.  # noqa: E501


        :return: The transformation_block_name of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._transformation_block_name

    @transformation_block_name.setter
    def transformation_block_name(self, transformation_block_name):
        """Sets the transformation_block_name of this OrganizationCreateProject.


        :param transformation_block_name: The transformation_block_name of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """

        self._transformation_block_name = transformation_block_name

    @property
    def category(self):
        """Gets the category of this OrganizationCreateProject.  # noqa: E501


        :return: The category of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OrganizationCreateProject.


        :param category: The category of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["training", "testing", "split"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created(self):
        """Gets the created of this OrganizationCreateProject.  # noqa: E501


        :return: The created of this OrganizationCreateProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrganizationCreateProject.


        :param created: The created of this OrganizationCreateProject.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def output_dataset_name(self):
        """Gets the output_dataset_name of this OrganizationCreateProject.  # noqa: E501


        :return: The output_dataset_name of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._output_dataset_name

    @output_dataset_name.setter
    def output_dataset_name(self, output_dataset_name):
        """Sets the output_dataset_name of this OrganizationCreateProject.


        :param output_dataset_name: The output_dataset_name of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """

        self._output_dataset_name = output_dataset_name

    @property
    def total_download_file_count(self):
        """Gets the total_download_file_count of this OrganizationCreateProject.  # noqa: E501


        :return: The total_download_file_count of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._total_download_file_count

    @total_download_file_count.setter
    def total_download_file_count(self, total_download_file_count):
        """Sets the total_download_file_count of this OrganizationCreateProject.


        :param total_download_file_count: The total_download_file_count of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_download_file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `total_download_file_count`, must not be `None`")  # noqa: E501

        self._total_download_file_count = total_download_file_count

    @property
    def total_download_file_size(self):
        """Gets the total_download_file_size of this OrganizationCreateProject.  # noqa: E501


        :return: The total_download_file_size of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._total_download_file_size

    @total_download_file_size.setter
    def total_download_file_size(self, total_download_file_size):
        """Sets the total_download_file_size of this OrganizationCreateProject.


        :param total_download_file_size: The total_download_file_size of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_download_file_size is None:  # noqa: E501
            raise ValueError("Invalid value for `total_download_file_size`, must not be `None`")  # noqa: E501

        self._total_download_file_size = total_download_file_size

    @property
    def total_download_file_size_string(self):
        """Gets the total_download_file_size_string of this OrganizationCreateProject.  # noqa: E501


        :return: The total_download_file_size_string of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._total_download_file_size_string

    @total_download_file_size_string.setter
    def total_download_file_size_string(self, total_download_file_size_string):
        """Sets the total_download_file_size_string of this OrganizationCreateProject.


        :param total_download_file_size_string: The total_download_file_size_string of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and total_download_file_size_string is None:  # noqa: E501
            raise ValueError("Invalid value for `total_download_file_size_string`, must not be `None`")  # noqa: E501

        self._total_download_file_size_string = total_download_file_size_string

    @property
    def total_upload_file_count(self):
        """Gets the total_upload_file_count of this OrganizationCreateProject.  # noqa: E501


        :return: The total_upload_file_count of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._total_upload_file_count

    @total_upload_file_count.setter
    def total_upload_file_count(self, total_upload_file_count):
        """Sets the total_upload_file_count of this OrganizationCreateProject.


        :param total_upload_file_count: The total_upload_file_count of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_upload_file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `total_upload_file_count`, must not be `None`")  # noqa: E501

        self._total_upload_file_count = total_upload_file_count

    @property
    def transformation_parallel(self):
        """Gets the transformation_parallel of this OrganizationCreateProject.  # noqa: E501

        Number of transformation jobs that can be ran in parallel  # noqa: E501

        :return: The transformation_parallel of this OrganizationCreateProject.  # noqa: E501
        :rtype: int
        """
        return self._transformation_parallel

    @transformation_parallel.setter
    def transformation_parallel(self, transformation_parallel):
        """Sets the transformation_parallel of this OrganizationCreateProject.

        Number of transformation jobs that can be ran in parallel  # noqa: E501

        :param transformation_parallel: The transformation_parallel of this OrganizationCreateProject.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and transformation_parallel is None:  # noqa: E501
            raise ValueError("Invalid value for `transformation_parallel`, must not be `None`")  # noqa: E501

        self._transformation_parallel = transformation_parallel

    @property
    def transformation_summary(self):
        """Gets the transformation_summary of this OrganizationCreateProject.  # noqa: E501


        :return: The transformation_summary of this OrganizationCreateProject.  # noqa: E501
        :rtype: OrganizationCreateProjectTransformationSummary
        """
        return self._transformation_summary

    @transformation_summary.setter
    def transformation_summary(self, transformation_summary):
        """Sets the transformation_summary of this OrganizationCreateProject.


        :param transformation_summary: The transformation_summary of this OrganizationCreateProject.  # noqa: E501
        :type: OrganizationCreateProjectTransformationSummary
        """
        if self.local_vars_configuration.client_side_validation and transformation_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `transformation_summary`, must not be `None`")  # noqa: E501

        self._transformation_summary = transformation_summary

    @property
    def files(self):
        """Gets the files of this OrganizationCreateProject.  # noqa: E501


        :return: The files of this OrganizationCreateProject.  # noqa: E501
        :rtype: list[OrganizationCreateProjectFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this OrganizationCreateProject.


        :param files: The files of this OrganizationCreateProject.  # noqa: E501
        :type: list[OrganizationCreateProjectFiles]
        """
        if self.local_vars_configuration.client_side_validation and files is None:  # noqa: E501
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def in_progress(self):
        """Gets the in_progress of this OrganizationCreateProject.  # noqa: E501


        :return: The in_progress of this OrganizationCreateProject.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this OrganizationCreateProject.


        :param in_progress: The in_progress of this OrganizationCreateProject.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and in_progress is None:  # noqa: E501
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def label(self):
        """Gets the label of this OrganizationCreateProject.  # noqa: E501


        :return: The label of this OrganizationCreateProject.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this OrganizationCreateProject.


        :param label: The label of this OrganizationCreateProject.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def email_recipient_uids(self):
        """Gets the email_recipient_uids of this OrganizationCreateProject.  # noqa: E501


        :return: The email_recipient_uids of this OrganizationCreateProject.  # noqa: E501
        :rtype: list[float]
        """
        return self._email_recipient_uids

    @email_recipient_uids.setter
    def email_recipient_uids(self, email_recipient_uids):
        """Sets the email_recipient_uids of this OrganizationCreateProject.


        :param email_recipient_uids: The email_recipient_uids of this OrganizationCreateProject.  # noqa: E501
        :type: list[float]
        """

        self._email_recipient_uids = email_recipient_uids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationCreateProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationCreateProject):
            return True

        return self.to_dict() != other.to_dict()
