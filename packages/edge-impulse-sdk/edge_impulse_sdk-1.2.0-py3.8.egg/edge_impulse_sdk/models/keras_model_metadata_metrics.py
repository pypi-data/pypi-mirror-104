# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasModelMetadataMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'KerasModelTypeEnum',
        'loss': 'float',
        'accuracy': 'float',
        'confusion_matrix': 'list[list[float]]',
        'report': 'object',
        'on_device_performance': 'list[KerasModelMetadataMetricsOnDevicePerformance]',
        'predictions': 'list[list[float]]'
    }

    attribute_map = {
        'type': 'type',
        'loss': 'loss',
        'accuracy': 'accuracy',
        'confusion_matrix': 'confusion_matrix',
        'report': 'report',
        'on_device_performance': 'onDevicePerformance',
        'predictions': 'predictions'
    }

    def __init__(self, type=None, loss=None, accuracy=None, confusion_matrix=None, report=None, on_device_performance=None, predictions=None, local_vars_configuration=None):  # noqa: E501
        """KerasModelMetadataMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._loss = None
        self._accuracy = None
        self._confusion_matrix = None
        self._report = None
        self._on_device_performance = None
        self._predictions = None
        self.discriminator = None

        self.type = type
        self.loss = loss
        if accuracy is not None:
            self.accuracy = accuracy
        self.confusion_matrix = confusion_matrix
        self.report = report
        self.on_device_performance = on_device_performance
        if predictions is not None:
            self.predictions = predictions

    @property
    def type(self):
        """Gets the type of this KerasModelMetadataMetrics.  # noqa: E501


        :return: The type of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: KerasModelTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KerasModelMetadataMetrics.


        :param type: The type of this KerasModelMetadataMetrics.  # noqa: E501
        :type: KerasModelTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def loss(self):
        """Gets the loss of this KerasModelMetadataMetrics.  # noqa: E501

        The model's loss on the validation set after training  # noqa: E501

        :return: The loss of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: float
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this KerasModelMetadataMetrics.

        The model's loss on the validation set after training  # noqa: E501

        :param loss: The loss of this KerasModelMetadataMetrics.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and loss is None:  # noqa: E501
            raise ValueError("Invalid value for `loss`, must not be `None`")  # noqa: E501

        self._loss = loss

    @property
    def accuracy(self):
        """Gets the accuracy of this KerasModelMetadataMetrics.  # noqa: E501

        The model's accuracy on the validation set after training  # noqa: E501

        :return: The accuracy of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this KerasModelMetadataMetrics.

        The model's accuracy on the validation set after training  # noqa: E501

        :param accuracy: The accuracy of this KerasModelMetadataMetrics.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def confusion_matrix(self):
        """Gets the confusion_matrix of this KerasModelMetadataMetrics.  # noqa: E501


        :return: The confusion_matrix of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._confusion_matrix

    @confusion_matrix.setter
    def confusion_matrix(self, confusion_matrix):
        """Sets the confusion_matrix of this KerasModelMetadataMetrics.


        :param confusion_matrix: The confusion_matrix of this KerasModelMetadataMetrics.  # noqa: E501
        :type: list[list[float]]
        """
        if self.local_vars_configuration.client_side_validation and confusion_matrix is None:  # noqa: E501
            raise ValueError("Invalid value for `confusion_matrix`, must not be `None`")  # noqa: E501

        self._confusion_matrix = confusion_matrix

    @property
    def report(self):
        """Gets the report of this KerasModelMetadataMetrics.  # noqa: E501

        Precision, recall, F1 and support scores  # noqa: E501

        :return: The report of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: object
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this KerasModelMetadataMetrics.

        Precision, recall, F1 and support scores  # noqa: E501

        :param report: The report of this KerasModelMetadataMetrics.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and report is None:  # noqa: E501
            raise ValueError("Invalid value for `report`, must not be `None`")  # noqa: E501

        self._report = report

    @property
    def on_device_performance(self):
        """Gets the on_device_performance of this KerasModelMetadataMetrics.  # noqa: E501


        :return: The on_device_performance of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: list[KerasModelMetadataMetricsOnDevicePerformance]
        """
        return self._on_device_performance

    @on_device_performance.setter
    def on_device_performance(self, on_device_performance):
        """Sets the on_device_performance of this KerasModelMetadataMetrics.


        :param on_device_performance: The on_device_performance of this KerasModelMetadataMetrics.  # noqa: E501
        :type: list[KerasModelMetadataMetricsOnDevicePerformance]
        """
        if self.local_vars_configuration.client_side_validation and on_device_performance is None:  # noqa: E501
            raise ValueError("Invalid value for `on_device_performance`, must not be `None`")  # noqa: E501

        self._on_device_performance = on_device_performance

    @property
    def predictions(self):
        """Gets the predictions of this KerasModelMetadataMetrics.  # noqa: E501


        :return: The predictions of this KerasModelMetadataMetrics.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this KerasModelMetadataMetrics.


        :param predictions: The predictions of this KerasModelMetadataMetrics.  # noqa: E501
        :type: list[list[float]]
        """

        self._predictions = predictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasModelMetadataMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasModelMetadataMetrics):
            return True

        return self.to_dict() != other.to_dict()
