# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ProjectInfoResponseAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project': 'Project',
        'development_keys': 'DevelopmentKeys',
        'impulse': 'ProjectInfoResponseAllOfImpulse',
        'devices': 'list[Device]',
        'data_summary': 'ProjectDataSummary',
        'data_summary_per_category': 'ProjectInfoResponseAllOfDataSummaryPerCategory',
        'compute_time': 'ProjectInfoResponseAllOfComputeTime',
        'acquisition_settings': 'ProjectInfoResponseAllOfAcquisitionSettings',
        'collaborators': 'list[User]',
        'deploy_settings': 'ProjectInfoResponseAllOfDeploySettings',
        'experiments': 'list[ProjectInfoResponseAllOfExperiments]',
        'latency_devices': 'list[ProjectInfoResponseAllOfLatencyDevices]',
        'evaluation_project_type': 'str',
        'urls': 'ProjectInfoResponseAllOfUrls',
        'show_create_first_impulse': 'bool',
        'show_getting_started_wizard': 'bool',
        'performance': 'ProjectInfoResponseAllOfPerformance'
    }

    attribute_map = {
        'project': 'project',
        'development_keys': 'developmentKeys',
        'impulse': 'impulse',
        'devices': 'devices',
        'data_summary': 'dataSummary',
        'data_summary_per_category': 'dataSummaryPerCategory',
        'compute_time': 'computeTime',
        'acquisition_settings': 'acquisitionSettings',
        'collaborators': 'collaborators',
        'deploy_settings': 'deploySettings',
        'experiments': 'experiments',
        'latency_devices': 'latencyDevices',
        'evaluation_project_type': 'evaluationProjectType',
        'urls': 'urls',
        'show_create_first_impulse': 'showCreateFirstImpulse',
        'show_getting_started_wizard': 'showGettingStartedWizard',
        'performance': 'performance'
    }

    def __init__(self, project=None, development_keys=None, impulse=None, devices=None, data_summary=None, data_summary_per_category=None, compute_time=None, acquisition_settings=None, collaborators=None, deploy_settings=None, experiments=None, latency_devices=None, evaluation_project_type=None, urls=None, show_create_first_impulse=None, show_getting_started_wizard=None, performance=None, local_vars_configuration=None):  # noqa: E501
        """ProjectInfoResponseAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project = None
        self._development_keys = None
        self._impulse = None
        self._devices = None
        self._data_summary = None
        self._data_summary_per_category = None
        self._compute_time = None
        self._acquisition_settings = None
        self._collaborators = None
        self._deploy_settings = None
        self._experiments = None
        self._latency_devices = None
        self._evaluation_project_type = None
        self._urls = None
        self._show_create_first_impulse = None
        self._show_getting_started_wizard = None
        self._performance = None
        self.discriminator = None

        self.project = project
        self.development_keys = development_keys
        self.impulse = impulse
        self.devices = devices
        self.data_summary = data_summary
        self.data_summary_per_category = data_summary_per_category
        self.compute_time = compute_time
        self.acquisition_settings = acquisition_settings
        self.collaborators = collaborators
        self.deploy_settings = deploy_settings
        self.experiments = experiments
        self.latency_devices = latency_devices
        if evaluation_project_type is not None:
            self.evaluation_project_type = evaluation_project_type
        self.urls = urls
        self.show_create_first_impulse = show_create_first_impulse
        self.show_getting_started_wizard = show_getting_started_wizard
        self.performance = performance

    @property
    def project(self):
        """Gets the project of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The project of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectInfoResponseAllOf.


        :param project: The project of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: Project
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def development_keys(self):
        """Gets the development_keys of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The development_keys of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: DevelopmentKeys
        """
        return self._development_keys

    @development_keys.setter
    def development_keys(self, development_keys):
        """Sets the development_keys of this ProjectInfoResponseAllOf.


        :param development_keys: The development_keys of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: DevelopmentKeys
        """
        if self.local_vars_configuration.client_side_validation and development_keys is None:  # noqa: E501
            raise ValueError("Invalid value for `development_keys`, must not be `None`")  # noqa: E501

        self._development_keys = development_keys

    @property
    def impulse(self):
        """Gets the impulse of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The impulse of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfImpulse
        """
        return self._impulse

    @impulse.setter
    def impulse(self, impulse):
        """Sets the impulse of this ProjectInfoResponseAllOf.


        :param impulse: The impulse of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfImpulse
        """
        if self.local_vars_configuration.client_side_validation and impulse is None:  # noqa: E501
            raise ValueError("Invalid value for `impulse`, must not be `None`")  # noqa: E501

        self._impulse = impulse

    @property
    def devices(self):
        """Gets the devices of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The devices of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: list[Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ProjectInfoResponseAllOf.


        :param devices: The devices of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: list[Device]
        """
        if self.local_vars_configuration.client_side_validation and devices is None:  # noqa: E501
            raise ValueError("Invalid value for `devices`, must not be `None`")  # noqa: E501

        self._devices = devices

    @property
    def data_summary(self):
        """Gets the data_summary of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The data_summary of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectDataSummary
        """
        return self._data_summary

    @data_summary.setter
    def data_summary(self, data_summary):
        """Sets the data_summary of this ProjectInfoResponseAllOf.


        :param data_summary: The data_summary of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectDataSummary
        """
        if self.local_vars_configuration.client_side_validation and data_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `data_summary`, must not be `None`")  # noqa: E501

        self._data_summary = data_summary

    @property
    def data_summary_per_category(self):
        """Gets the data_summary_per_category of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The data_summary_per_category of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfDataSummaryPerCategory
        """
        return self._data_summary_per_category

    @data_summary_per_category.setter
    def data_summary_per_category(self, data_summary_per_category):
        """Sets the data_summary_per_category of this ProjectInfoResponseAllOf.


        :param data_summary_per_category: The data_summary_per_category of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfDataSummaryPerCategory
        """
        if self.local_vars_configuration.client_side_validation and data_summary_per_category is None:  # noqa: E501
            raise ValueError("Invalid value for `data_summary_per_category`, must not be `None`")  # noqa: E501

        self._data_summary_per_category = data_summary_per_category

    @property
    def compute_time(self):
        """Gets the compute_time of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The compute_time of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfComputeTime
        """
        return self._compute_time

    @compute_time.setter
    def compute_time(self, compute_time):
        """Sets the compute_time of this ProjectInfoResponseAllOf.


        :param compute_time: The compute_time of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfComputeTime
        """
        if self.local_vars_configuration.client_side_validation and compute_time is None:  # noqa: E501
            raise ValueError("Invalid value for `compute_time`, must not be `None`")  # noqa: E501

        self._compute_time = compute_time

    @property
    def acquisition_settings(self):
        """Gets the acquisition_settings of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The acquisition_settings of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfAcquisitionSettings
        """
        return self._acquisition_settings

    @acquisition_settings.setter
    def acquisition_settings(self, acquisition_settings):
        """Sets the acquisition_settings of this ProjectInfoResponseAllOf.


        :param acquisition_settings: The acquisition_settings of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfAcquisitionSettings
        """
        if self.local_vars_configuration.client_side_validation and acquisition_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `acquisition_settings`, must not be `None`")  # noqa: E501

        self._acquisition_settings = acquisition_settings

    @property
    def collaborators(self):
        """Gets the collaborators of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The collaborators of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: list[User]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this ProjectInfoResponseAllOf.


        :param collaborators: The collaborators of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: list[User]
        """
        if self.local_vars_configuration.client_side_validation and collaborators is None:  # noqa: E501
            raise ValueError("Invalid value for `collaborators`, must not be `None`")  # noqa: E501

        self._collaborators = collaborators

    @property
    def deploy_settings(self):
        """Gets the deploy_settings of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The deploy_settings of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfDeploySettings
        """
        return self._deploy_settings

    @deploy_settings.setter
    def deploy_settings(self, deploy_settings):
        """Sets the deploy_settings of this ProjectInfoResponseAllOf.


        :param deploy_settings: The deploy_settings of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfDeploySettings
        """
        if self.local_vars_configuration.client_side_validation and deploy_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `deploy_settings`, must not be `None`")  # noqa: E501

        self._deploy_settings = deploy_settings

    @property
    def experiments(self):
        """Gets the experiments of this ProjectInfoResponseAllOf.  # noqa: E501

        Experiments that the project has access to. Enabling experiments can only be done through a JWT token.  # noqa: E501

        :return: The experiments of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: list[ProjectInfoResponseAllOfExperiments]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this ProjectInfoResponseAllOf.

        Experiments that the project has access to. Enabling experiments can only be done through a JWT token.  # noqa: E501

        :param experiments: The experiments of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: list[ProjectInfoResponseAllOfExperiments]
        """
        if self.local_vars_configuration.client_side_validation and experiments is None:  # noqa: E501
            raise ValueError("Invalid value for `experiments`, must not be `None`")  # noqa: E501

        self._experiments = experiments

    @property
    def latency_devices(self):
        """Gets the latency_devices of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The latency_devices of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: list[ProjectInfoResponseAllOfLatencyDevices]
        """
        return self._latency_devices

    @latency_devices.setter
    def latency_devices(self, latency_devices):
        """Sets the latency_devices of this ProjectInfoResponseAllOf.


        :param latency_devices: The latency_devices of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: list[ProjectInfoResponseAllOfLatencyDevices]
        """
        if self.local_vars_configuration.client_side_validation and latency_devices is None:  # noqa: E501
            raise ValueError("Invalid value for `latency_devices`, must not be `None`")  # noqa: E501

        self._latency_devices = latency_devices

    @property
    def evaluation_project_type(self):
        """Gets the evaluation_project_type of this ProjectInfoResponseAllOf.  # noqa: E501

        Evaluation project type  # noqa: E501

        :return: The evaluation_project_type of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_project_type

    @evaluation_project_type.setter
    def evaluation_project_type(self, evaluation_project_type):
        """Sets the evaluation_project_type of this ProjectInfoResponseAllOf.

        Evaluation project type  # noqa: E501

        :param evaluation_project_type: The evaluation_project_type of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: str
        """

        self._evaluation_project_type = evaluation_project_type

    @property
    def urls(self):
        """Gets the urls of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The urls of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this ProjectInfoResponseAllOf.


        :param urls: The urls of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfUrls
        """
        if self.local_vars_configuration.client_side_validation and urls is None:  # noqa: E501
            raise ValueError("Invalid value for `urls`, must not be `None`")  # noqa: E501

        self._urls = urls

    @property
    def show_create_first_impulse(self):
        """Gets the show_create_first_impulse of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The show_create_first_impulse of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._show_create_first_impulse

    @show_create_first_impulse.setter
    def show_create_first_impulse(self, show_create_first_impulse):
        """Sets the show_create_first_impulse of this ProjectInfoResponseAllOf.


        :param show_create_first_impulse: The show_create_first_impulse of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and show_create_first_impulse is None:  # noqa: E501
            raise ValueError("Invalid value for `show_create_first_impulse`, must not be `None`")  # noqa: E501

        self._show_create_first_impulse = show_create_first_impulse

    @property
    def show_getting_started_wizard(self):
        """Gets the show_getting_started_wizard of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The show_getting_started_wizard of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._show_getting_started_wizard

    @show_getting_started_wizard.setter
    def show_getting_started_wizard(self, show_getting_started_wizard):
        """Sets the show_getting_started_wizard of this ProjectInfoResponseAllOf.


        :param show_getting_started_wizard: The show_getting_started_wizard of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and show_getting_started_wizard is None:  # noqa: E501
            raise ValueError("Invalid value for `show_getting_started_wizard`, must not be `None`")  # noqa: E501

        self._show_getting_started_wizard = show_getting_started_wizard

    @property
    def performance(self):
        """Gets the performance of this ProjectInfoResponseAllOf.  # noqa: E501


        :return: The performance of this ProjectInfoResponseAllOf.  # noqa: E501
        :rtype: ProjectInfoResponseAllOfPerformance
        """
        return self._performance

    @performance.setter
    def performance(self, performance):
        """Sets the performance of this ProjectInfoResponseAllOf.


        :param performance: The performance of this ProjectInfoResponseAllOf.  # noqa: E501
        :type: ProjectInfoResponseAllOfPerformance
        """
        if self.local_vars_configuration.client_side_validation and performance is None:  # noqa: E501
            raise ValueError("Invalid value for `performance`, must not be `None`")  # noqa: E501

        self._performance = performance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfoResponseAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectInfoResponseAllOf):
            return True

        return self.to_dict() != other.to_dict()
