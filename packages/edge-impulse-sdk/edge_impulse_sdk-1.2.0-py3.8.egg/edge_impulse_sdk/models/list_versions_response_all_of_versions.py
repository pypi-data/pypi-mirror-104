# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class ListVersionsResponseAllOfVersions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'version': 'int',
        'description': 'str',
        'bucket': 'ListVersionsResponseAllOfBucket',
        'created': 'datetime',
        'user_id': 'int',
        'user_name': 'str',
        'user_photo': 'str',
        'public_project_id': 'int',
        'public_project_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'description': 'description',
        'bucket': 'bucket',
        'created': 'created',
        'user_id': 'userId',
        'user_name': 'userName',
        'user_photo': 'userPhoto',
        'public_project_id': 'publicProjectId',
        'public_project_url': 'publicProjectUrl'
    }

    def __init__(self, id=None, version=None, description=None, bucket=None, created=None, user_id=None, user_name=None, user_photo=None, public_project_id=None, public_project_url=None, local_vars_configuration=None):  # noqa: E501
        """ListVersionsResponseAllOfVersions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._version = None
        self._description = None
        self._bucket = None
        self._created = None
        self._user_id = None
        self._user_name = None
        self._user_photo = None
        self._public_project_id = None
        self._public_project_url = None
        self.discriminator = None

        self.id = id
        self.version = version
        self.description = description
        self.bucket = bucket
        self.created = created
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_photo is not None:
            self.user_photo = user_photo
        if public_project_id is not None:
            self.public_project_id = public_project_id
        if public_project_url is not None:
            self.public_project_url = public_project_url

    @property
    def id(self):
        """Gets the id of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListVersionsResponseAllOfVersions.


        :param id: The id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self):
        """Gets the version of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The version of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ListVersionsResponseAllOfVersions.


        :param version: The version of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def description(self):
        """Gets the description of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The description of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListVersionsResponseAllOfVersions.


        :param description: The description of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def bucket(self):
        """Gets the bucket of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The bucket of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: ListVersionsResponseAllOfBucket
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ListVersionsResponseAllOfVersions.


        :param bucket: The bucket of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: ListVersionsResponseAllOfBucket
        """
        if self.local_vars_configuration.client_side_validation and bucket is None:  # noqa: E501
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501

        self._bucket = bucket

    @property
    def created(self):
        """Gets the created of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The created of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ListVersionsResponseAllOfVersions.


        :param created: The created of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def user_id(self):
        """Gets the user_id of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The user_id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ListVersionsResponseAllOfVersions.


        :param user_id: The user_id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The user_name of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ListVersionsResponseAllOfVersions.


        :param user_name: The user_name of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_photo(self):
        """Gets the user_photo of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The user_photo of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: str
        """
        return self._user_photo

    @user_photo.setter
    def user_photo(self, user_photo):
        """Sets the user_photo of this ListVersionsResponseAllOfVersions.


        :param user_photo: The user_photo of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: str
        """

        self._user_photo = user_photo

    @property
    def public_project_id(self):
        """Gets the public_project_id of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The public_project_id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: int
        """
        return self._public_project_id

    @public_project_id.setter
    def public_project_id(self, public_project_id):
        """Sets the public_project_id of this ListVersionsResponseAllOfVersions.


        :param public_project_id: The public_project_id of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: int
        """

        self._public_project_id = public_project_id

    @property
    def public_project_url(self):
        """Gets the public_project_url of this ListVersionsResponseAllOfVersions.  # noqa: E501


        :return: The public_project_url of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :rtype: str
        """
        return self._public_project_url

    @public_project_url.setter
    def public_project_url(self, public_project_url):
        """Sets the public_project_url of this ListVersionsResponseAllOfVersions.


        :param public_project_url: The public_project_url of this ListVersionsResponseAllOfVersions.  # noqa: E501
        :type: str
        """

        self._public_project_url = public_project_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListVersionsResponseAllOfVersions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListVersionsResponseAllOfVersions):
            return True

        return self.to_dict() != other.to_dict()
