# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class AddOrganizationDeployBlockRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'docker_container': 'str',
        'description': 'str',
        'cli_arguments': 'str',
        'requests_cpu': 'float',
        'requests_memory': 'float',
        'limits_cpu': 'float',
        'limits_memory': 'float',
        'photo': 'file',
        'integrate_url': 'str',
        'privileged': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'docker_container': 'dockerContainer',
        'description': 'description',
        'cli_arguments': 'cliArguments',
        'requests_cpu': 'requestsCpu',
        'requests_memory': 'requestsMemory',
        'limits_cpu': 'limitsCpu',
        'limits_memory': 'limitsMemory',
        'photo': 'photo',
        'integrate_url': 'integrateUrl',
        'privileged': 'privileged'
    }

    def __init__(self, name=None, docker_container=None, description=None, cli_arguments=None, requests_cpu=None, requests_memory=None, limits_cpu=None, limits_memory=None, photo=None, integrate_url=None, privileged=None, local_vars_configuration=None):  # noqa: E501
        """AddOrganizationDeployBlockRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._docker_container = None
        self._description = None
        self._cli_arguments = None
        self._requests_cpu = None
        self._requests_memory = None
        self._limits_cpu = None
        self._limits_memory = None
        self._photo = None
        self._integrate_url = None
        self._privileged = None
        self.discriminator = None

        self.name = name
        self.docker_container = docker_container
        self.description = description
        self.cli_arguments = cli_arguments
        if requests_cpu is not None:
            self.requests_cpu = requests_cpu
        if requests_memory is not None:
            self.requests_memory = requests_memory
        if limits_cpu is not None:
            self.limits_cpu = limits_cpu
        if limits_memory is not None:
            self.limits_memory = limits_memory
        if photo is not None:
            self.photo = photo
        if integrate_url is not None:
            self.integrate_url = integrate_url
        if privileged is not None:
            self.privileged = privileged

    @property
    def name(self):
        """Gets the name of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The name of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddOrganizationDeployBlockRequest.


        :param name: The name of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def docker_container(self):
        """Gets the docker_container of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The docker_container of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_container

    @docker_container.setter
    def docker_container(self, docker_container):
        """Sets the docker_container of this AddOrganizationDeployBlockRequest.


        :param docker_container: The docker_container of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and docker_container is None:  # noqa: E501
            raise ValueError("Invalid value for `docker_container`, must not be `None`")  # noqa: E501

        self._docker_container = docker_container

    @property
    def description(self):
        """Gets the description of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The description of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddOrganizationDeployBlockRequest.


        :param description: The description of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def cli_arguments(self):
        """Gets the cli_arguments of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The cli_arguments of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._cli_arguments

    @cli_arguments.setter
    def cli_arguments(self, cli_arguments):
        """Sets the cli_arguments of this AddOrganizationDeployBlockRequest.


        :param cli_arguments: The cli_arguments of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cli_arguments is None:  # noqa: E501
            raise ValueError("Invalid value for `cli_arguments`, must not be `None`")  # noqa: E501

        self._cli_arguments = cli_arguments

    @property
    def requests_cpu(self):
        """Gets the requests_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The requests_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._requests_cpu

    @requests_cpu.setter
    def requests_cpu(self, requests_cpu):
        """Sets the requests_cpu of this AddOrganizationDeployBlockRequest.


        :param requests_cpu: The requests_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: float
        """

        self._requests_cpu = requests_cpu

    @property
    def requests_memory(self):
        """Gets the requests_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The requests_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._requests_memory

    @requests_memory.setter
    def requests_memory(self, requests_memory):
        """Sets the requests_memory of this AddOrganizationDeployBlockRequest.


        :param requests_memory: The requests_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: float
        """

        self._requests_memory = requests_memory

    @property
    def limits_cpu(self):
        """Gets the limits_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The limits_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._limits_cpu

    @limits_cpu.setter
    def limits_cpu(self, limits_cpu):
        """Sets the limits_cpu of this AddOrganizationDeployBlockRequest.


        :param limits_cpu: The limits_cpu of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: float
        """

        self._limits_cpu = limits_cpu

    @property
    def limits_memory(self):
        """Gets the limits_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The limits_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._limits_memory

    @limits_memory.setter
    def limits_memory(self, limits_memory):
        """Sets the limits_memory of this AddOrganizationDeployBlockRequest.


        :param limits_memory: The limits_memory of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: float
        """

        self._limits_memory = limits_memory

    @property
    def photo(self):
        """Gets the photo of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The photo of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: file
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this AddOrganizationDeployBlockRequest.


        :param photo: The photo of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: file
        """

        self._photo = photo

    @property
    def integrate_url(self):
        """Gets the integrate_url of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The integrate_url of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._integrate_url

    @integrate_url.setter
    def integrate_url(self, integrate_url):
        """Sets the integrate_url of this AddOrganizationDeployBlockRequest.


        :param integrate_url: The integrate_url of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: str
        """

        self._integrate_url = integrate_url

    @property
    def privileged(self):
        """Gets the privileged of this AddOrganizationDeployBlockRequest.  # noqa: E501


        :return: The privileged of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged):
        """Sets the privileged of this AddOrganizationDeployBlockRequest.


        :param privileged: The privileged of this AddOrganizationDeployBlockRequest.  # noqa: E501
        :type: bool
        """

        self._privileged = privileged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrganizationDeployBlockRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddOrganizationDeployBlockRequest):
            return True

        return self.to_dict() != other.to_dict()
