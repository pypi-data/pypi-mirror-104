# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class OrganizationCreateProjectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'filter': 'str',
        'upload_type': 'str',
        'project_id': 'int',
        'new_project_name': 'str',
        'project_api_key': 'str',
        'project_hmac_key': 'str',
        'transformation_block_id': 'int',
        'category': 'str',
        'output_dataset_name': 'str',
        'label': 'str',
        'email_recipient_uids': 'list[float]'
    }

    attribute_map = {
        'name': 'name',
        'filter': 'filter',
        'upload_type': 'uploadType',
        'project_id': 'projectId',
        'new_project_name': 'newProjectName',
        'project_api_key': 'projectApiKey',
        'project_hmac_key': 'projectHmacKey',
        'transformation_block_id': 'transformationBlockId',
        'category': 'category',
        'output_dataset_name': 'outputDatasetName',
        'label': 'label',
        'email_recipient_uids': 'emailRecipientUids'
    }

    def __init__(self, name=None, filter=None, upload_type=None, project_id=None, new_project_name=None, project_api_key=None, project_hmac_key=None, transformation_block_id=None, category=None, output_dataset_name=None, label=None, email_recipient_uids=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationCreateProjectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._filter = None
        self._upload_type = None
        self._project_id = None
        self._new_project_name = None
        self._project_api_key = None
        self._project_hmac_key = None
        self._transformation_block_id = None
        self._category = None
        self._output_dataset_name = None
        self._label = None
        self._email_recipient_uids = None
        self.discriminator = None

        self.name = name
        self.filter = filter
        self.upload_type = upload_type
        if project_id is not None:
            self.project_id = project_id
        if new_project_name is not None:
            self.new_project_name = new_project_name
        if project_api_key is not None:
            self.project_api_key = project_api_key
        if project_hmac_key is not None:
            self.project_hmac_key = project_hmac_key
        if transformation_block_id is not None:
            self.transformation_block_id = transformation_block_id
        if category is not None:
            self.category = category
        if output_dataset_name is not None:
            self.output_dataset_name = output_dataset_name
        if label is not None:
            self.label = label
        if email_recipient_uids is not None:
            self.email_recipient_uids = email_recipient_uids

    @property
    def name(self):
        """Gets the name of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The name of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationCreateProjectRequest.


        :param name: The name of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def filter(self):
        """Gets the filter of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The filter of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this OrganizationCreateProjectRequest.


        :param filter: The filter of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filter is None:  # noqa: E501
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def upload_type(self):
        """Gets the upload_type of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The upload_type of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this OrganizationCreateProjectRequest.


        :param upload_type: The upload_type of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and upload_type is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_type`, must not be `None`")  # noqa: E501
        allowed_values = ["project", "dataset"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upload_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upload_type` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_type, allowed_values)
            )

        self._upload_type = upload_type

    @property
    def project_id(self):
        """Gets the project_id of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The project_id of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this OrganizationCreateProjectRequest.


        :param project_id: The project_id of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def new_project_name(self):
        """Gets the new_project_name of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The new_project_name of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_project_name

    @new_project_name.setter
    def new_project_name(self, new_project_name):
        """Sets the new_project_name of this OrganizationCreateProjectRequest.


        :param new_project_name: The new_project_name of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._new_project_name = new_project_name

    @property
    def project_api_key(self):
        """Gets the project_api_key of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The project_api_key of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_api_key

    @project_api_key.setter
    def project_api_key(self, project_api_key):
        """Sets the project_api_key of this OrganizationCreateProjectRequest.


        :param project_api_key: The project_api_key of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_api_key = project_api_key

    @property
    def project_hmac_key(self):
        """Gets the project_hmac_key of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The project_hmac_key of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_hmac_key

    @project_hmac_key.setter
    def project_hmac_key(self, project_hmac_key):
        """Sets the project_hmac_key of this OrganizationCreateProjectRequest.


        :param project_hmac_key: The project_hmac_key of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_hmac_key = project_hmac_key

    @property
    def transformation_block_id(self):
        """Gets the transformation_block_id of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The transformation_block_id of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: int
        """
        return self._transformation_block_id

    @transformation_block_id.setter
    def transformation_block_id(self, transformation_block_id):
        """Sets the transformation_block_id of this OrganizationCreateProjectRequest.


        :param transformation_block_id: The transformation_block_id of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: int
        """

        self._transformation_block_id = transformation_block_id

    @property
    def category(self):
        """Gets the category of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The category of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OrganizationCreateProjectRequest.


        :param category: The category of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["training", "testing", "split"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def output_dataset_name(self):
        """Gets the output_dataset_name of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The output_dataset_name of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._output_dataset_name

    @output_dataset_name.setter
    def output_dataset_name(self, output_dataset_name):
        """Sets the output_dataset_name of this OrganizationCreateProjectRequest.


        :param output_dataset_name: The output_dataset_name of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._output_dataset_name = output_dataset_name

    @property
    def label(self):
        """Gets the label of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The label of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this OrganizationCreateProjectRequest.


        :param label: The label of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def email_recipient_uids(self):
        """Gets the email_recipient_uids of this OrganizationCreateProjectRequest.  # noqa: E501


        :return: The email_recipient_uids of this OrganizationCreateProjectRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._email_recipient_uids

    @email_recipient_uids.setter
    def email_recipient_uids(self, email_recipient_uids):
        """Sets the email_recipient_uids of this OrganizationCreateProjectRequest.


        :param email_recipient_uids: The email_recipient_uids of this OrganizationCreateProjectRequest.  # noqa: E501
        :type: list[float]
        """

        self._email_recipient_uids = email_recipient_uids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationCreateProjectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationCreateProjectRequest):
            return True

        return self.to_dict() != other.to_dict()
