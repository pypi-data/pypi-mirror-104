# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class UpdateOrganizationTransformationBlockRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'docker_container': 'str',
        'ind_metadata': 'bool',
        'description': 'str',
        'cli_arguments': 'str',
        'requests_cpu': 'float',
        'requests_memory': 'float',
        'limits_cpu': 'float',
        'limits_memory': 'float'
    }

    attribute_map = {
        'name': 'name',
        'docker_container': 'dockerContainer',
        'ind_metadata': 'indMetadata',
        'description': 'description',
        'cli_arguments': 'cliArguments',
        'requests_cpu': 'requestsCpu',
        'requests_memory': 'requestsMemory',
        'limits_cpu': 'limitsCpu',
        'limits_memory': 'limitsMemory'
    }

    def __init__(self, name=None, docker_container=None, ind_metadata=None, description=None, cli_arguments=None, requests_cpu=None, requests_memory=None, limits_cpu=None, limits_memory=None, local_vars_configuration=None):  # noqa: E501
        """UpdateOrganizationTransformationBlockRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._docker_container = None
        self._ind_metadata = None
        self._description = None
        self._cli_arguments = None
        self._requests_cpu = None
        self._requests_memory = None
        self._limits_cpu = None
        self._limits_memory = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if docker_container is not None:
            self.docker_container = docker_container
        if ind_metadata is not None:
            self.ind_metadata = ind_metadata
        if description is not None:
            self.description = description
        if cli_arguments is not None:
            self.cli_arguments = cli_arguments
        if requests_cpu is not None:
            self.requests_cpu = requests_cpu
        if requests_memory is not None:
            self.requests_memory = requests_memory
        if limits_cpu is not None:
            self.limits_cpu = limits_cpu
        if limits_memory is not None:
            self.limits_memory = limits_memory

    @property
    def name(self):
        """Gets the name of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The name of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateOrganizationTransformationBlockRequest.


        :param name: The name of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def docker_container(self):
        """Gets the docker_container of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The docker_container of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_container

    @docker_container.setter
    def docker_container(self, docker_container):
        """Sets the docker_container of this UpdateOrganizationTransformationBlockRequest.


        :param docker_container: The docker_container of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: str
        """

        self._docker_container = docker_container

    @property
    def ind_metadata(self):
        """Gets the ind_metadata of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501

        Whether to pass the `--metadata` parameter to the container.  # noqa: E501

        :return: The ind_metadata of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ind_metadata

    @ind_metadata.setter
    def ind_metadata(self, ind_metadata):
        """Sets the ind_metadata of this UpdateOrganizationTransformationBlockRequest.

        Whether to pass the `--metadata` parameter to the container.  # noqa: E501

        :param ind_metadata: The ind_metadata of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: bool
        """

        self._ind_metadata = ind_metadata

    @property
    def description(self):
        """Gets the description of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The description of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateOrganizationTransformationBlockRequest.


        :param description: The description of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cli_arguments(self):
        """Gets the cli_arguments of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The cli_arguments of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: str
        """
        return self._cli_arguments

    @cli_arguments.setter
    def cli_arguments(self, cli_arguments):
        """Sets the cli_arguments of this UpdateOrganizationTransformationBlockRequest.


        :param cli_arguments: The cli_arguments of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: str
        """

        self._cli_arguments = cli_arguments

    @property
    def requests_cpu(self):
        """Gets the requests_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The requests_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._requests_cpu

    @requests_cpu.setter
    def requests_cpu(self, requests_cpu):
        """Sets the requests_cpu of this UpdateOrganizationTransformationBlockRequest.


        :param requests_cpu: The requests_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: float
        """

        self._requests_cpu = requests_cpu

    @property
    def requests_memory(self):
        """Gets the requests_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The requests_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._requests_memory

    @requests_memory.setter
    def requests_memory(self, requests_memory):
        """Sets the requests_memory of this UpdateOrganizationTransformationBlockRequest.


        :param requests_memory: The requests_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: float
        """

        self._requests_memory = requests_memory

    @property
    def limits_cpu(self):
        """Gets the limits_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The limits_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._limits_cpu

    @limits_cpu.setter
    def limits_cpu(self, limits_cpu):
        """Sets the limits_cpu of this UpdateOrganizationTransformationBlockRequest.


        :param limits_cpu: The limits_cpu of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: float
        """

        self._limits_cpu = limits_cpu

    @property
    def limits_memory(self):
        """Gets the limits_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501


        :return: The limits_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :rtype: float
        """
        return self._limits_memory

    @limits_memory.setter
    def limits_memory(self, limits_memory):
        """Sets the limits_memory of this UpdateOrganizationTransformationBlockRequest.


        :param limits_memory: The limits_memory of this UpdateOrganizationTransformationBlockRequest.  # noqa: E501
        :type: float
        """

        self._limits_memory = limits_memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrganizationTransformationBlockRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateOrganizationTransformationBlockRequest):
            return True

        return self.to_dict() != other.to_dict()
