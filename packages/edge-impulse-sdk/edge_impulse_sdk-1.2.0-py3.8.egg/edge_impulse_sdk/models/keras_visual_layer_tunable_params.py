# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class KerasVisualLayerTunableParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'param': 'str',
        'default_value': 'float',
        'min_value': 'float',
        'max_value': 'float',
        'values': 'list[float]'
    }

    attribute_map = {
        'param': 'param',
        'default_value': 'defaultValue',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'values': 'values'
    }

    def __init__(self, param=None, default_value=None, min_value=None, max_value=None, values=None, local_vars_configuration=None):  # noqa: E501
        """KerasVisualLayerTunableParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._param = None
        self._default_value = None
        self._min_value = None
        self._max_value = None
        self._values = None
        self.discriminator = None

        self.param = param
        self.default_value = default_value
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if values is not None:
            self.values = values

    @property
    def param(self):
        """Gets the param of this KerasVisualLayerTunableParams.  # noqa: E501


        :return: The param of this KerasVisualLayerTunableParams.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this KerasVisualLayerTunableParams.


        :param param: The param of this KerasVisualLayerTunableParams.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and param is None:  # noqa: E501
            raise ValueError("Invalid value for `param`, must not be `None`")  # noqa: E501
        allowed_values = ["enabled", "neurons", "dropoutRate", "kernelSize"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and param not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `param` ({0}), must be one of {1}"  # noqa: E501
                .format(param, allowed_values)
            )

        self._param = param

    @property
    def default_value(self):
        """Gets the default_value of this KerasVisualLayerTunableParams.  # noqa: E501


        :return: The default_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :rtype: float
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this KerasVisualLayerTunableParams.


        :param default_value: The default_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and default_value is None:  # noqa: E501
            raise ValueError("Invalid value for `default_value`, must not be `None`")  # noqa: E501

        self._default_value = default_value

    @property
    def min_value(self):
        """Gets the min_value of this KerasVisualLayerTunableParams.  # noqa: E501


        :return: The min_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this KerasVisualLayerTunableParams.


        :param min_value: The min_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this KerasVisualLayerTunableParams.  # noqa: E501


        :return: The max_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this KerasVisualLayerTunableParams.


        :param max_value: The max_value of this KerasVisualLayerTunableParams.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def values(self):
        """Gets the values of this KerasVisualLayerTunableParams.  # noqa: E501


        :return: The values of this KerasVisualLayerTunableParams.  # noqa: E501
        :rtype: list[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this KerasVisualLayerTunableParams.


        :param values: The values of this KerasVisualLayerTunableParams.  # noqa: E501
        :type: list[float]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasVisualLayerTunableParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerasVisualLayerTunableParams):
            return True

        return self.to_dict() != other.to_dict()
