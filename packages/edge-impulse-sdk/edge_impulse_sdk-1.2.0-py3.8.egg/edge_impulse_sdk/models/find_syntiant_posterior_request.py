# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from edge_impulse_sdk.configuration import Configuration


class FindSyntiantPosteriorRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_words': 'list[str]',
        'reference_set': 'str',
        'wav_file': 'file',
        'meta_csv_file': 'file'
    }

    attribute_map = {
        'target_words': 'targetWords',
        'reference_set': 'referenceSet',
        'wav_file': 'wavFile',
        'meta_csv_file': 'metaCsvFile'
    }

    def __init__(self, target_words=None, reference_set=None, wav_file=None, meta_csv_file=None, local_vars_configuration=None):  # noqa: E501
        """FindSyntiantPosteriorRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._target_words = None
        self._reference_set = None
        self._wav_file = None
        self._meta_csv_file = None
        self.discriminator = None

        self.target_words = target_words
        self.reference_set = reference_set
        if wav_file is not None:
            self.wav_file = wav_file
        if meta_csv_file is not None:
            self.meta_csv_file = meta_csv_file

    @property
    def target_words(self):
        """Gets the target_words of this FindSyntiantPosteriorRequest.  # noqa: E501


        :return: The target_words of this FindSyntiantPosteriorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_words

    @target_words.setter
    def target_words(self, target_words):
        """Sets the target_words of this FindSyntiantPosteriorRequest.


        :param target_words: The target_words of this FindSyntiantPosteriorRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and target_words is None:  # noqa: E501
            raise ValueError("Invalid value for `target_words`, must not be `None`")  # noqa: E501

        self._target_words = target_words

    @property
    def reference_set(self):
        """Gets the reference_set of this FindSyntiantPosteriorRequest.  # noqa: E501


        :return: The reference_set of this FindSyntiantPosteriorRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_set

    @reference_set.setter
    def reference_set(self, reference_set):
        """Sets the reference_set of this FindSyntiantPosteriorRequest.


        :param reference_set: The reference_set of this FindSyntiantPosteriorRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reference_set is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_set`, must not be `None`")  # noqa: E501
        allowed_values = ["600_seconds", "full", "custom", "no_calibration"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and reference_set not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `reference_set` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_set, allowed_values)
            )

        self._reference_set = reference_set

    @property
    def wav_file(self):
        """Gets the wav_file of this FindSyntiantPosteriorRequest.  # noqa: E501


        :return: The wav_file of this FindSyntiantPosteriorRequest.  # noqa: E501
        :rtype: file
        """
        return self._wav_file

    @wav_file.setter
    def wav_file(self, wav_file):
        """Sets the wav_file of this FindSyntiantPosteriorRequest.


        :param wav_file: The wav_file of this FindSyntiantPosteriorRequest.  # noqa: E501
        :type: file
        """

        self._wav_file = wav_file

    @property
    def meta_csv_file(self):
        """Gets the meta_csv_file of this FindSyntiantPosteriorRequest.  # noqa: E501


        :return: The meta_csv_file of this FindSyntiantPosteriorRequest.  # noqa: E501
        :rtype: file
        """
        return self._meta_csv_file

    @meta_csv_file.setter
    def meta_csv_file(self, meta_csv_file):
        """Sets the meta_csv_file of this FindSyntiantPosteriorRequest.


        :param meta_csv_file: The meta_csv_file of this FindSyntiantPosteriorRequest.  # noqa: E501
        :type: file
        """

        self._meta_csv_file = meta_csv_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindSyntiantPosteriorRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindSyntiantPosteriorRequest):
            return True

        return self.to_dict() != other.to_dict()
