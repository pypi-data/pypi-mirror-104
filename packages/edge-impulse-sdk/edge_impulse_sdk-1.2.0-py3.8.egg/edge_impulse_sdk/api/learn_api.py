# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edge_impulse_sdk.api_client import ApiClient
from edge_impulse_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)


class LearnApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def anomaly_trained_features(self, project_id, learn_id, feature_ax1, feature_ax2, **kwargs):  # noqa: E501
        """Trained features  # noqa: E501

        Get a sample of trained features, this extracts a number of samples and their features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.anomaly_trained_features(project_id, learn_id, feature_ax1, feature_ax2, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param int feature_ax1: Feature axis 1 (required)
        :param int feature_ax2: Feature axis 2 (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnomalyTrainedFeaturesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.anomaly_trained_features_with_http_info(project_id, learn_id, feature_ax1, feature_ax2, **kwargs)  # noqa: E501

    def anomaly_trained_features_with_http_info(self, project_id, learn_id, feature_ax1, feature_ax2, **kwargs):  # noqa: E501
        """Trained features  # noqa: E501

        Get a sample of trained features, this extracts a number of samples and their features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.anomaly_trained_features_with_http_info(project_id, learn_id, feature_ax1, feature_ax2, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param int feature_ax1: Feature axis 1 (required)
        :param int feature_ax2: Feature axis 2 (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnomalyTrainedFeaturesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'feature_ax1', 'feature_ax2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method anomaly_trained_features" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `anomaly_trained_features`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `anomaly_trained_features`")  # noqa: E501
        # verify the required parameter 'feature_ax1' is set
        if self.api_client.client_side_validation and ('feature_ax1' not in local_var_params or  # noqa: E501
                                                        local_var_params['feature_ax1'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_ax1` when calling `anomaly_trained_features`")  # noqa: E501
        # verify the required parameter 'feature_ax2' is set
        if self.api_client.client_side_validation and ('feature_ax2' not in local_var_params or  # noqa: E501
                                                        local_var_params['feature_ax2'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_ax2` when calling `anomaly_trained_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []
        if 'feature_ax1' in local_var_params and local_var_params['feature_ax1'] is not None:  # noqa: E501
            query_params.append(('featureAx1', local_var_params['feature_ax1']))  # noqa: E501
        if 'feature_ax2' in local_var_params and local_var_params['feature_ax2'] is not None:  # noqa: E501
            query_params.append(('featureAx2', local_var_params['feature_ax2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/anomaly/{learnId}/features/get-graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnomalyTrainedFeaturesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def anomaly_trained_features_per_sample(self, project_id, learn_id, sample_id, **kwargs):  # noqa: E501
        """Trained features for sample  # noqa: E501

        Get trained features for a single sample. This runs both the DSP prerequisites and the anomaly classifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.anomaly_trained_features_per_sample(project_id, learn_id, sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param int sample_id: Sample ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnomalyTrainedFeaturesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.anomaly_trained_features_per_sample_with_http_info(project_id, learn_id, sample_id, **kwargs)  # noqa: E501

    def anomaly_trained_features_per_sample_with_http_info(self, project_id, learn_id, sample_id, **kwargs):  # noqa: E501
        """Trained features for sample  # noqa: E501

        Get trained features for a single sample. This runs both the DSP prerequisites and the anomaly classifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.anomaly_trained_features_per_sample_with_http_info(project_id, learn_id, sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param int sample_id: Sample ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnomalyTrainedFeaturesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'sample_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method anomaly_trained_features_per_sample" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `anomaly_trained_features_per_sample`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `anomaly_trained_features_per_sample`")  # noqa: E501
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sample_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sample_id` when calling `anomaly_trained_features_per_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501
        if 'sample_id' in local_var_params:
            path_params['sampleId'] = local_var_params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/anomaly/{learnId}/features/get-graph/classification/{sampleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnomalyTrainedFeaturesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_learn_model(self, project_id, learn_id, model_download_id, **kwargs):  # noqa: E501
        """Download trained model  # noqa: E501

        Download a trained model for a learning block. Depending on the block this can be a TensorFlow model, or the cluster centroids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_learn_model(project_id, learn_id, model_download_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param str model_download_id: Model download ID, which can be obtained from the project information (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.download_learn_model_with_http_info(project_id, learn_id, model_download_id, **kwargs)  # noqa: E501

    def download_learn_model_with_http_info(self, project_id, learn_id, model_download_id, **kwargs):  # noqa: E501
        """Download trained model  # noqa: E501

        Download a trained model for a learning block. Depending on the block this can be a TensorFlow model, or the cluster centroids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_learn_model_with_http_info(project_id, learn_id, model_download_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param str model_download_id: Model download ID, which can be obtained from the project information (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'model_download_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_learn_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `download_learn_model`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `download_learn_model`")  # noqa: E501
        # verify the required parameter 'model_download_id' is set
        if self.api_client.client_side_validation and ('model_download_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_download_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_download_id` when calling `download_learn_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501
        if 'model_download_id' in local_var_params:
            path_params['modelDownloadId'] = local_var_params['model_download_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/learn-data/{learnId}/model/{modelDownloadId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_anomaly(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Anomaly information  # noqa: E501

        Get information about an anomaly block, such as its dependencies. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnomalyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anomaly_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_anomaly_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Anomaly information  # noqa: E501

        Get information about an anomaly block, such as its dependencies. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnomalyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomaly" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_anomaly`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_anomaly`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/anomaly/{learnId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnomalyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_anomaly_metadata(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Anomaly metadata  # noqa: E501

        Get metadata about a trained anomaly block. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly_metadata(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnomalyModelMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anomaly_metadata_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_anomaly_metadata_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Anomaly metadata  # noqa: E501

        Get metadata about a trained anomaly block. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly_metadata_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnomalyModelMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomaly_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_anomaly_metadata`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_anomaly_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/anomaly/{learnId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnomalyModelMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keras(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Keras information  # noqa: E501

        Get information about a Keras block, such as its dependencies. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KerasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_keras_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_keras_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Keras information  # noqa: E501

        Get information about a Keras block, such as its dependencies. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KerasResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keras" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_keras`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_keras`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/keras/{learnId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KerasResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keras_metadata(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Keras metadata  # noqa: E501

        Get metadata about a trained Keras block. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras_metadata(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KerasModelMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_keras_metadata_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_keras_metadata_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Keras metadata  # noqa: E501

        Get metadata about a trained Keras block. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras_metadata_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KerasModelMetadata, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keras_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_keras_metadata`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_keras_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/keras/{learnId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KerasModelMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keras_notebook(self, project_id, learn_id, **kwargs):  # noqa: E501
        """iPython Notebook  # noqa: E501

        Export the neural network architecture as an iPython notebook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras_notebook(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_keras_notebook_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_keras_notebook_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """iPython Notebook  # noqa: E501

        Export the neural network architecture as an iPython notebook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keras_notebook_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keras_notebook" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_keras_notebook`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_keras_notebook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/x-ipynb+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/keras/{learnId}/ipynb', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learn_x_data(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Download data  # noqa: E501

        Download the processed data for this learning block. This is data already processed by the signal processing blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learn_x_data(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_learn_x_data_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_learn_x_data_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Download data  # noqa: E501

        Download the processed data for this learning block. This is data already processed by the signal processing blocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learn_x_data_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learn_x_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_learn_x_data`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_learn_x_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/{learnId}/x', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learn_y_data(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Download labels  # noqa: E501

        Download the labels for this learning block. This is data already processed by the signal processing blocks. Not all blocks support this function. If so, a GenericApiResponse is returned with an error message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learn_y_data(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_learn_y_data_with_http_info(project_id, learn_id, **kwargs)  # noqa: E501

    def get_learn_y_data_with_http_info(self, project_id, learn_id, **kwargs):  # noqa: E501
        """Download labels  # noqa: E501

        Download the labels for this learning block. This is data already processed by the signal processing blocks. Not all blocks support this function. If so, a GenericApiResponse is returned with an error message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learn_y_data_with_http_info(project_id, learn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learn_y_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `get_learn_y_data`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `get_learn_y_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/{learnId}/y', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_anomaly(self, project_id, learn_id, set_anomaly_parameter_request, **kwargs):  # noqa: E501
        """Anomaly settings  # noqa: E501

        Configure the anomaly block, such as its minimum confidence score. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_anomaly(project_id, learn_id, set_anomaly_parameter_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param SetAnomalyParameterRequest set_anomaly_parameter_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.set_anomaly_with_http_info(project_id, learn_id, set_anomaly_parameter_request, **kwargs)  # noqa: E501

    def set_anomaly_with_http_info(self, project_id, learn_id, set_anomaly_parameter_request, **kwargs):  # noqa: E501
        """Anomaly settings  # noqa: E501

        Configure the anomaly block, such as its minimum confidence score. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_anomaly_with_http_info(project_id, learn_id, set_anomaly_parameter_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param SetAnomalyParameterRequest set_anomaly_parameter_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'set_anomaly_parameter_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_anomaly" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `set_anomaly`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `set_anomaly`")  # noqa: E501
        # verify the required parameter 'set_anomaly_parameter_request' is set
        if self.api_client.client_side_validation and ('set_anomaly_parameter_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['set_anomaly_parameter_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `set_anomaly_parameter_request` when calling `set_anomaly`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_anomaly_parameter_request' in local_var_params:
            body_params = local_var_params['set_anomaly_parameter_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/anomaly/{learnId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_keras(self, project_id, learn_id, set_keras_parameter_request, **kwargs):  # noqa: E501
        """Keras settings  # noqa: E501

        Configure the Keras block, such as its minimum confidence score. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_keras(project_id, learn_id, set_keras_parameter_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param SetKerasParameterRequest set_keras_parameter_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.set_keras_with_http_info(project_id, learn_id, set_keras_parameter_request, **kwargs)  # noqa: E501

    def set_keras_with_http_info(self, project_id, learn_id, set_keras_parameter_request, **kwargs):  # noqa: E501
        """Keras settings  # noqa: E501

        Configure the Keras block, such as its minimum confidence score. Use the impulse blocks to find the learnId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_keras_with_http_info(project_id, learn_id, set_keras_parameter_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param SetKerasParameterRequest set_keras_parameter_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'set_keras_parameter_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_keras" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `set_keras`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `set_keras`")  # noqa: E501
        # verify the required parameter 'set_keras_parameter_request' is set
        if self.api_client.client_side_validation and ('set_keras_parameter_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['set_keras_parameter_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `set_keras_parameter_request` when calling `set_keras`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_keras_parameter_request' in local_var_params:
            body_params = local_var_params['set_keras_parameter_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/keras/{learnId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_keras_files(self, project_id, learn_id, zip, **kwargs):  # noqa: E501
        """Upload Keras files  # noqa: E501

        Replace Keras block files with the contents of a zip. This is an internal API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_keras_files(project_id, learn_id, zip, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param file zip: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_keras_files_with_http_info(project_id, learn_id, zip, **kwargs)  # noqa: E501

    def upload_keras_files_with_http_info(self, project_id, learn_id, zip, **kwargs):  # noqa: E501
        """Upload Keras files  # noqa: E501

        Replace Keras block files with the contents of a zip. This is an internal API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_keras_files_with_http_info(project_id, learn_id, zip, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int project_id: Project ID (required)
        :param int learn_id: Learn Block ID, use the impulse functions to retrieve the ID (required)
        :param file zip: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'learn_id', 'zip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_keras_files" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `upload_keras_files`")  # noqa: E501
        # verify the required parameter 'learn_id' is set
        if self.api_client.client_side_validation and ('learn_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['learn_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `learn_id` when calling `upload_keras_files`")  # noqa: E501
        # verify the required parameter 'zip' is set
        if self.api_client.client_side_validation and ('zip' not in local_var_params or  # noqa: E501
                                                        local_var_params['zip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `zip` when calling `upload_keras_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501
        if 'learn_id' in local_var_params:
            path_params['learnId'] = local_var_params['learn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'zip' in local_var_params:
            local_var_files['zip'] = local_var_params['zip']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthentication', 'JWTAuthentication', 'JWTHttpHeaderAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/api/{projectId}/training/keras/{learnId}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
