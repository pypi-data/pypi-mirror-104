name: Python CI/CD

on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.8

    steps:

      - uses: actions/checkout@master
      - run: git fetch --prune --unshallow

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install sdist dependencies
        run: pip install setuptools_scm cmake_build_extension

      - name: Build sdist
        run: python setup.py sdist

      - name: Install build dependencies
        run: |
          sudo sh -c 'echo "deb http://www.icub.org/ubuntu $(lsb_release -cs) contrib/science" > \
              /etc/apt/sources.list.d/icub.list'
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6
          sudo apt-get update
          sudo apt-get install -y yarp pybind11-dev

      - name: Install sdist
        run: pip -v install dist/*.tar.gz

      - name: Test import
        run: python -c 'from gazebo_yarp_synchronizer import GazeboYarpSynchronizer'

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.8
        os:
          - ubuntu-20.04
          #- macos-latest
          #- windows-latest

    steps:

      - uses: actions/checkout@master
      - run: git fetch --prune --unshallow

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp37-*_x86_64 cp38-*_x86_64 cp39-*_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_ENVIRONMENT_LINUX: AUDITWHEEL_PLAT=manylinux_2_24_x86_64
          CIBW_BEFORE_ALL_LINUX: |
              echo "deb http://ftp.debian.org/debian stretch-backports main" | tee -a \
                  /etc/apt/sources.list.d/stretch-backports.list &&\
              echo "deb http://ftp.debian.org/debian stretch-backports-sloppy main" | tee -a \
                  /etc/apt/sources.list.d/stretch-backports-sloppy.list &&\
              apt-get update &&\
              apt-get install -y --no-install-recommends \
                  lsb-release lsb-core dirmngr &&\
              apt-get install -y --no-install-recommends -t stretch-backports-sloppy libarchive13 &&\
              apt-get install -y --no-install-recommends -t stretch-backports cmake &&\
              echo "deb http://www.icub.org/debian buster contrib/science" | tee -a \
                  /etc/apt/sources.list.d/icub.list &&\
              apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 &&\
              apt-get update &&\
              apt-get install -y --no-install-recommends yarp &&\
              ln -s /usr/lib/libACE.so /usr/lib/libACE-6.4.5.so
          CIBW_TEST_COMMAND: "python -c 'from gazebo_yarp_synchronizer import GazeboYarpSynchronizer'"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs:
      - build_sdist
      - build_wheels
    runs-on: ubuntu-latest
    # Master branch produces pre-releases.
    # Tagged versions produce stable releases linked to GitHub releases.
    if: |
      github.repository == 'diegoferigo/gazebo-yarp-synchronizer' &&
      ((github.event_name == 'release' && github.event.action == 'published') ||
       (github.event_name == 'push' && github.ref == 'refs/heads/main'))

    steps:

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
