"""
pytermgui.cmd
-------------
author: bczsalba

File providing the commandline utilities to pytermgui, living
under the `ptg` command.

Check `usage` for, well, the usage.
"""

from . import __version__, styles

usage = f"""\
pytermgui v{__version__}

usage:
    - ptg <path>: parse & open .ptg file
    - ptg <path> --inspect: dump .ptg file with 4-space indentation
    - ptg -g (--getch): return output of getch() call
    - ptg -s (--size) : return (width())x(height())"
"""

generated_program = """\
# < file generated by pytermgui >
"""


def main():
    import sys, os

    if not len(sys.argv) > 1:
        print(usage)
        return

    args = sys.argv[1:]

    # unfinished
    if False and args[0] == "--builder" or args[0] == "-b":
        builder()
        return

    elif args[0] == "--getch" or args[0] == "-g":
        from . import getch

        print("getch() output: ", end="", flush=True)
        print(getch())
        return

    elif args[0] == "--size" or args[0] == "-s":
        from .utils import width, height

        print("current terminal size:", f"{width()}x{height()}")
        return

    elif os.path.isfile(args[0]):
        from . import load, getch, wipe
        from .utils import width, height
        import json

        wipe()

        with open(args[0], "r") as f:
            if "--inspect" in args:
                print(json.dumps(json.load(f), indent=4))
                return

            c = load(f)
            c.width = min(c.width, width())
            c.height = min(c.height, height() - 7)
            c.center()

        if "--input" in args or "-i" in args:
            from .utils import basic_selection

            basic_selection(c)

        else:
            print(c)
            getch()
            wipe()
        return

    else:
        print(f"Not sure what to do with {args}\n" + usage)


def builder():
    def create_container(name="c"):
        c = Container()
        code = [f"{name} = Container()"]
        c.center()
        print(c)
        while True:
            x, y = c.pos
            key = getch()
            c.wipe()
            if key == "ENTER":
                code.append(f"{name}.move(" + repr(c.pos) + ")")
                return c, "\n".join(code)

            elif key in ["SIGTERM", "CTRL_D"]:
                c.wipe()
                return []

            elif key == "h":
                c.move([x - 1, y])
            elif key == "l":
                c.move([x + 1, y])
            elif key == "j":
                c.move([x, y + 1])
            elif key == "k":
                c.move([x, y - 1])

            print(c)

    def create_selector():
        d = {}
        for i, e in enumerate(elements):
            d[type(e).__name__ + str(i)] = e.pos
            selector = container_from_dict(d)[0]

        selector.center()
        selector.select()
        print(selector)

        while True:
            key = getch()
            if key == "SIGTERM":
                return None

            elif key in keys.next:
                selector.selected_index += 1
            elif key in keys.prev:
                selector.selected_index -= 1

            elif key == "ENTER":
                selector.wipe()
                return selector.selected[0]

            selector.select()
            print(selector)

    def create_object_picker():
        c = Container()
        c += Label("Pick object to add")
        wipe()
        for obj in [Container, Prompt, Label]:
            c += Prompt(options=[obj.__name__])
        c.center()
        c.select()
        print(c)

    global generated_program

    from pytermgui import (
        Container,
        Prompt,
        Label,
        wipe,
        utils,
        getch,
        container_from_dict,
    )
    from pytermgui.utils import keys

    styles.random()
    wipe()
    elements = []
    selected = None
    utils.hide_cursor()

    main, code = create_container("main")
    generated_program += code + "\n"
    while True:
        for e in elements:
            print(e)

        key = getch()
        if key == "SIGTERM":
            print("\033[H" + generated_program)
            getch()
            break

        elif key == "+":
            create_object_picker()

        # elif key == "+":
        # if not selected:
        # values = create_container()
        # if len(values):
        # obj,code = values
        # elements.append(obj)
        # generated_program += code+'\n'
        # continue

        elif key == "TAB":
            create_selector()


if __name__ == "__main__":
    main()
