Metadata-Version: 2.1
Name: backtracked
Version: 0.1.1
Summary: Python & asyncio wrapper for the QueUp API
Home-page: https://github.com/hedgehog1029/backtracked
Author: offbeatwitch
Author-email: obw@generalprogramming.org
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/hedgehog1029/backtracked/issues
Project-URL: Documentation, https://backtracked.readthedocs.io/en/latest/
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: Free for non-commercial use
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Internet
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Framework :: AsyncIO
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: aiohttp

# backtracked

A python wrapper for the QueUp API.

You can find the docs [here](https://backtracked.readthedocs.io/).

### Example

```python
from backtracked import Client, Presence, Message
import logging

c = Client()
logging.basicConfig(level=logging.DEBUG, format="%(levelname)s - %(name)s: %(message)s")

@c.event
async def on_ready():
    print("Logged in as {0.username}".format(c.user))
    await c.join_room("my-awesome-room")

@c.event
async def on_chat(message: Message):
    if message.content == "~online":
        await message.room.change_presence(Presence.enter)
    elif message.content == "~ping":
        await message.room.send_message("Pong!")

c.run(email="bot@example.com", password="my_bot_password")
```


